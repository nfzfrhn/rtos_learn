
001Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08006568  08006568  00016568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006740  08006740  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006740  08006740  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006740  08006740  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006740  08006740  00016740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006744  08006744  00016744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001445c  20000078  080067c0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200144d4  080067c0  000244d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016dd0  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030c6  00000000  00000000  00036e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00039f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  0003af10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d99  00000000  00000000  0003bd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d40  00000000  00000000  00064b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3ea4  00000000  00000000  00075841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001696e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045c8  00000000  00000000  00169738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006550 	.word	0x08006550

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006550 	.word	0x08006550

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001441c 	.word	0x2001441c

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b088      	sub	sp, #32
 8000268:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026a:	f000 fa1b 	bl	80006a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026e:	f000 f851 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000272:	f000 f8a1 	bl	80003b8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //Enable the CYCCNT counter
  DWT_CTRL |= (1<<0);
 8000276:	4b20      	ldr	r3, [pc, #128]	; (80002f8 <main+0x94>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a1f      	ldr	r2, [pc, #124]	; (80002f8 <main+0x94>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000282:	f003 fe37 	bl	8003ef4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000286:	f004 fe7b 	bl	8004f80 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "task-1", 200, "Hello World from Task-1", 2, &task1_handle);
 800028a:	f107 0308 	add.w	r3, r7, #8
 800028e:	9301      	str	r3, [sp, #4]
 8000290:	2302      	movs	r3, #2
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	4b19      	ldr	r3, [pc, #100]	; (80002fc <main+0x98>)
 8000296:	22c8      	movs	r2, #200	; 0xc8
 8000298:	4919      	ldr	r1, [pc, #100]	; (8000300 <main+0x9c>)
 800029a:	481a      	ldr	r0, [pc, #104]	; (8000304 <main+0xa0>)
 800029c:	f001 feea 	bl	8002074 <xTaskCreate>
 80002a0:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80002a2:	697b      	ldr	r3, [r7, #20]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d00a      	beq.n	80002be <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002ac:	f383 8811 	msr	BASEPRI, r3
 80002b0:	f3bf 8f6f 	isb	sy
 80002b4:	f3bf 8f4f 	dsb	sy
 80002b8:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002ba:	bf00      	nop
 80002bc:	e7fe      	b.n	80002bc <main+0x58>

  status = xTaskCreate(task2_handler, "task-2", 200, "Hello World from Task-2", 2, &task2_handle);
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2302      	movs	r3, #2
 80002c4:	9300      	str	r3, [sp, #0]
 80002c6:	4b10      	ldr	r3, [pc, #64]	; (8000308 <main+0xa4>)
 80002c8:	22c8      	movs	r2, #200	; 0xc8
 80002ca:	4910      	ldr	r1, [pc, #64]	; (800030c <main+0xa8>)
 80002cc:	4810      	ldr	r0, [pc, #64]	; (8000310 <main+0xac>)
 80002ce:	f001 fed1 	bl	8002074 <xTaskCreate>
 80002d2:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80002d4:	697b      	ldr	r3, [r7, #20]
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d00a      	beq.n	80002f0 <main+0x8c>
        __asm volatile
 80002da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002de:	f383 8811 	msr	BASEPRI, r3
 80002e2:	f3bf 8f6f 	isb	sy
 80002e6:	f3bf 8f4f 	dsb	sy
 80002ea:	60fb      	str	r3, [r7, #12]
    }
 80002ec:	bf00      	nop
 80002ee:	e7fe      	b.n	80002ee <main+0x8a>

  //Start the freeRTOS scheduler
  vTaskStartScheduler();
 80002f0:	f002 f85a 	bl	80023a8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002f4:	e7fe      	b.n	80002f4 <main+0x90>
 80002f6:	bf00      	nop
 80002f8:	e0001000 	.word	0xe0001000
 80002fc:	08006568 	.word	0x08006568
 8000300:	08006580 	.word	0x08006580
 8000304:	080004a9 	.word	0x080004a9
 8000308:	08006588 	.word	0x08006588
 800030c:	080065a0 	.word	0x080065a0
 8000310:	080004b9 	.word	0x080004b9

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b096      	sub	sp, #88	; 0x58
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	f107 0314 	add.w	r3, r7, #20
 800031e:	2244      	movs	r2, #68	; 0x44
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f005 fc4a 	bl	8005bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000328:	463b      	mov	r3, r7
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
 8000334:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000336:	f44f 7000 	mov.w	r0, #512	; 0x200
 800033a:	f000 fcd1 	bl	8000ce0 <HAL_PWREx_ControlVoltageScaling>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000344:	f000 f8c0 	bl	80004c8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000348:	2302      	movs	r3, #2
 800034a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000350:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000352:	2310      	movs	r3, #16
 8000354:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000356:	2302      	movs	r3, #2
 8000358:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800035a:	2302      	movs	r3, #2
 800035c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800035e:	2301      	movs	r3, #1
 8000360:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000362:	230a      	movs	r3, #10
 8000364:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000366:	2307      	movs	r3, #7
 8000368:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800036a:	2302      	movs	r3, #2
 800036c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800036e:	2302      	movs	r3, #2
 8000370:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000372:	f107 0314 	add.w	r3, r7, #20
 8000376:	4618      	mov	r0, r3
 8000378:	f000 fd08 	bl	8000d8c <HAL_RCC_OscConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000382:	f000 f8a1 	bl	80004c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000386:	230f      	movs	r3, #15
 8000388:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038a:	2303      	movs	r3, #3
 800038c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800039a:	463b      	mov	r3, r7
 800039c:	2104      	movs	r1, #4
 800039e:	4618      	mov	r0, r3
 80003a0:	f001 f8da 	bl	8001558 <HAL_RCC_ClockConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003aa:	f000 f88d 	bl	80004c8 <Error_Handler>
  }
}
 80003ae:	bf00      	nop
 80003b0:	3758      	adds	r7, #88	; 0x58
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b08a      	sub	sp, #40	; 0x28
 80003bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003be:	f107 0314 	add.w	r3, r7, #20
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
 80003cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ce:	4b33      	ldr	r3, [pc, #204]	; (800049c <MX_GPIO_Init+0xe4>)
 80003d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d2:	4a32      	ldr	r2, [pc, #200]	; (800049c <MX_GPIO_Init+0xe4>)
 80003d4:	f043 0304 	orr.w	r3, r3, #4
 80003d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003da:	4b30      	ldr	r3, [pc, #192]	; (800049c <MX_GPIO_Init+0xe4>)
 80003dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003de:	f003 0304 	and.w	r3, r3, #4
 80003e2:	613b      	str	r3, [r7, #16]
 80003e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003e6:	4b2d      	ldr	r3, [pc, #180]	; (800049c <MX_GPIO_Init+0xe4>)
 80003e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ea:	4a2c      	ldr	r2, [pc, #176]	; (800049c <MX_GPIO_Init+0xe4>)
 80003ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f2:	4b2a      	ldr	r3, [pc, #168]	; (800049c <MX_GPIO_Init+0xe4>)
 80003f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fe:	4b27      	ldr	r3, [pc, #156]	; (800049c <MX_GPIO_Init+0xe4>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000402:	4a26      	ldr	r2, [pc, #152]	; (800049c <MX_GPIO_Init+0xe4>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040a:	4b24      	ldr	r3, [pc, #144]	; (800049c <MX_GPIO_Init+0xe4>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	60bb      	str	r3, [r7, #8]
 8000414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000416:	4b21      	ldr	r3, [pc, #132]	; (800049c <MX_GPIO_Init+0xe4>)
 8000418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041a:	4a20      	ldr	r2, [pc, #128]	; (800049c <MX_GPIO_Init+0xe4>)
 800041c:	f043 0302 	orr.w	r3, r3, #2
 8000420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000422:	4b1e      	ldr	r3, [pc, #120]	; (800049c <MX_GPIO_Init+0xe4>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000426:	f003 0302 	and.w	r3, r3, #2
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2120      	movs	r1, #32
 8000432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000436:	f000 fc2d 	bl	8000c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800043a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800043e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000440:	4b17      	ldr	r3, [pc, #92]	; (80004a0 <MX_GPIO_Init+0xe8>)
 8000442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000444:	2300      	movs	r3, #0
 8000446:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000448:	f107 0314 	add.w	r3, r7, #20
 800044c:	4619      	mov	r1, r3
 800044e:	4815      	ldr	r0, [pc, #84]	; (80004a4 <MX_GPIO_Init+0xec>)
 8000450:	f000 fa76 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000454:	230c      	movs	r3, #12
 8000456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000458:	2302      	movs	r3, #2
 800045a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	2300      	movs	r3, #0
 800045e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000460:	2303      	movs	r3, #3
 8000462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000464:	2307      	movs	r3, #7
 8000466:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	4619      	mov	r1, r3
 800046e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000472:	f000 fa65 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000476:	2320      	movs	r3, #32
 8000478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047a:	2301      	movs	r3, #1
 800047c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047e:	2300      	movs	r3, #0
 8000480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000482:	2300      	movs	r3, #0
 8000484:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000486:	f107 0314 	add.w	r3, r7, #20
 800048a:	4619      	mov	r1, r3
 800048c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000490:	f000 fa56 	bl	8000940 <HAL_GPIO_Init>

}
 8000494:	bf00      	nop
 8000496:	3728      	adds	r7, #40	; 0x28
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40021000 	.word	0x40021000
 80004a0:	10210000 	.word	0x10210000
 80004a4:	48000800 	.word	0x48000800

080004a8 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameter){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s\n",(char*)parameter);
 80004b0:	6878      	ldr	r0, [r7, #4]
 80004b2:	f005 fbf9 	bl	8005ca8 <puts>
 80004b6:	e7fb      	b.n	80004b0 <task1_handler+0x8>

080004b8 <task2_handler>:
		//taskYIELD();
	}
}

static void task2_handler(void* parameter){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	while(1){
			printf("%s\n",(char*)parameter);
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f005 fbf1 	bl	8005ca8 <puts>
 80004c6:	e7fb      	b.n	80004c0 <task2_handler+0x8>

080004c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004cc:	b672      	cpsid	i
}
 80004ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <Error_Handler+0x8>
	...

080004d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004da:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <HAL_MspInit+0x44>)
 80004dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004de:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <HAL_MspInit+0x44>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	6613      	str	r3, [r2, #96]	; 0x60
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <HAL_MspInit+0x44>)
 80004e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <HAL_MspInit+0x44>)
 80004f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004f6:	4a08      	ldr	r2, [pc, #32]	; (8000518 <HAL_MspInit+0x44>)
 80004f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004fc:	6593      	str	r3, [r2, #88]	; 0x58
 80004fe:	4b06      	ldr	r3, [pc, #24]	; (8000518 <HAL_MspInit+0x44>)
 8000500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800050a:	f003 f93d 	bl	8003788 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000

0800051c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <NMI_Handler+0x4>

08000522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000526:	e7fe      	b.n	8000526 <HardFault_Handler+0x4>

08000528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800052c:	e7fe      	b.n	800052c <MemManage_Handler+0x4>

0800052e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000532:	e7fe      	b.n	8000532 <BusFault_Handler+0x4>

08000534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <UsageFault_Handler+0x4>

0800053a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	e00a      	b.n	8000570 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800055a:	f3af 8000 	nop.w
 800055e:	4601      	mov	r1, r0
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	60ba      	str	r2, [r7, #8]
 8000566:	b2ca      	uxtb	r2, r1
 8000568:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	3301      	adds	r3, #1
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	697a      	ldr	r2, [r7, #20]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	429a      	cmp	r2, r3
 8000576:	dbf0      	blt.n	800055a <_read+0x12>
	}

return len;
 8000578:	687b      	ldr	r3, [r7, #4]
}
 800057a:	4618      	mov	r0, r3
 800057c:	3718      	adds	r7, #24
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000582:	b480      	push	{r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
	return -1;
 800058a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800058e:	4618      	mov	r0, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800059a:	b480      	push	{r7}
 800059c:	b083      	sub	sp, #12
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
 80005a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005aa:	605a      	str	r2, [r3, #4]
	return 0;
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <_isatty>:

int _isatty(int file)
{
 80005ba:	b480      	push	{r7}
 80005bc:	b083      	sub	sp, #12
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
	return 1;
 80005c2:	2301      	movs	r3, #1
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
	return 0;
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
	...

080005ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005f0:	4b15      	ldr	r3, [pc, #84]	; (8000648 <SystemInit+0x5c>)
 80005f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f6:	4a14      	ldr	r2, [pc, #80]	; (8000648 <SystemInit+0x5c>)
 80005f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <SystemInit+0x60>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a11      	ldr	r2, [pc, #68]	; (800064c <SystemInit+0x60>)
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <SystemInit+0x60>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <SystemInit+0x60>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a0d      	ldr	r2, [pc, #52]	; (800064c <SystemInit+0x60>)
 8000618:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800061c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000620:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <SystemInit+0x60>)
 8000624:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000628:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <SystemInit+0x60>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a07      	ldr	r2, [pc, #28]	; (800064c <SystemInit+0x60>)
 8000630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000634:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <SystemInit+0x60>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00
 800064c:	40021000 	.word	0x40021000

08000650 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000688 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000654:	f7ff ffca 	bl	80005ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000658:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800065a:	e003      	b.n	8000664 <LoopCopyDataInit>

0800065c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800065c:	4b0b      	ldr	r3, [pc, #44]	; (800068c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800065e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000660:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000662:	3104      	adds	r1, #4

08000664 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000664:	480a      	ldr	r0, [pc, #40]	; (8000690 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000668:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800066a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800066c:	d3f6      	bcc.n	800065c <CopyDataInit>
	ldr	r2, =_sbss
 800066e:	4a0a      	ldr	r2, [pc, #40]	; (8000698 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000670:	e002      	b.n	8000678 <LoopFillZerobss>

08000672 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000672:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000674:	f842 3b04 	str.w	r3, [r2], #4

08000678 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <LoopForever+0x16>)
	cmp	r2, r3
 800067a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800067c:	d3f9      	bcc.n	8000672 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800067e:	f005 fa5d 	bl	8005b3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000682:	f7ff fdef 	bl	8000264 <main>

08000686 <LoopForever>:

LoopForever:
    b LoopForever
 8000686:	e7fe      	b.n	8000686 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000688:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800068c:	08006748 	.word	0x08006748
	ldr	r0, =_sdata
 8000690:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000694:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8000698:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 800069c:	200144d4 	.word	0x200144d4

080006a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006a0:	e7fe      	b.n	80006a0 <ADC1_2_IRQHandler>
	...

080006a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006aa:	2300      	movs	r3, #0
 80006ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <HAL_Init+0x3c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a0b      	ldr	r2, [pc, #44]	; (80006e0 <HAL_Init+0x3c>)
 80006b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ba:	2003      	movs	r0, #3
 80006bc:	f000 f90c 	bl	80008d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006c0:	2000      	movs	r0, #0
 80006c2:	f000 f80f 	bl	80006e4 <HAL_InitTick>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d002      	beq.n	80006d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80006cc:	2301      	movs	r3, #1
 80006ce:	71fb      	strb	r3, [r7, #7]
 80006d0:	e001      	b.n	80006d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006d2:	f7ff feff 	bl	80004d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006d6:	79fb      	ldrb	r3, [r7, #7]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40022000 	.word	0x40022000

080006e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006ec:	2300      	movs	r3, #0
 80006ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <HAL_InitTick+0x6c>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d023      	beq.n	8000740 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006f8:	4b16      	ldr	r3, [pc, #88]	; (8000754 <HAL_InitTick+0x70>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <HAL_InitTick+0x6c>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000706:	fbb3 f3f1 	udiv	r3, r3, r1
 800070a:	fbb2 f3f3 	udiv	r3, r2, r3
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f909 	bl	8000926 <HAL_SYSTICK_Config>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d10f      	bne.n	800073a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b0f      	cmp	r3, #15
 800071e:	d809      	bhi.n	8000734 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000720:	2200      	movs	r2, #0
 8000722:	6879      	ldr	r1, [r7, #4]
 8000724:	f04f 30ff 	mov.w	r0, #4294967295
 8000728:	f000 f8e1 	bl	80008ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800072c:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <HAL_InitTick+0x74>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6013      	str	r3, [r2, #0]
 8000732:	e007      	b.n	8000744 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000734:	2301      	movs	r3, #1
 8000736:	73fb      	strb	r3, [r7, #15]
 8000738:	e004      	b.n	8000744 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	73fb      	strb	r3, [r7, #15]
 800073e:	e001      	b.n	8000744 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000740:	2301      	movs	r3, #1
 8000742:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000744:	7bfb      	ldrb	r3, [r7, #15]
}
 8000746:	4618      	mov	r0, r3
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000008 	.word	0x20000008
 8000754:	20000000 	.word	0x20000000
 8000758:	20000004 	.word	0x20000004

0800075c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  return uwTick;
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <HAL_GetTick+0x14>)
 8000762:	681b      	ldr	r3, [r3, #0]
}
 8000764:	4618      	mov	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	200143d8 	.word	0x200143d8

08000774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000790:	4013      	ands	r3, r2
 8000792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800079c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a6:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <__NVIC_SetPriorityGrouping+0x44>)
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	60d3      	str	r3, [r2, #12]
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <__NVIC_GetPriorityGrouping+0x18>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	f003 0307 	and.w	r3, r3, #7
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db0a      	blt.n	8000802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	490c      	ldr	r1, [pc, #48]	; (8000824 <__NVIC_SetPriority+0x4c>)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	0112      	lsls	r2, r2, #4
 80007f8:	b2d2      	uxtb	r2, r2
 80007fa:	440b      	add	r3, r1
 80007fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000800:	e00a      	b.n	8000818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4908      	ldr	r1, [pc, #32]	; (8000828 <__NVIC_SetPriority+0x50>)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	f003 030f 	and.w	r3, r3, #15
 800080e:	3b04      	subs	r3, #4
 8000810:	0112      	lsls	r2, r2, #4
 8000812:	b2d2      	uxtb	r2, r2
 8000814:	440b      	add	r3, r1
 8000816:	761a      	strb	r2, [r3, #24]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000e100 	.word	0xe000e100
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082c:	b480      	push	{r7}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	f1c3 0307 	rsb	r3, r3, #7
 8000846:	2b04      	cmp	r3, #4
 8000848:	bf28      	it	cs
 800084a:	2304      	movcs	r3, #4
 800084c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3304      	adds	r3, #4
 8000852:	2b06      	cmp	r3, #6
 8000854:	d902      	bls.n	800085c <NVIC_EncodePriority+0x30>
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3b03      	subs	r3, #3
 800085a:	e000      	b.n	800085e <NVIC_EncodePriority+0x32>
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	f04f 32ff 	mov.w	r2, #4294967295
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	43da      	mvns	r2, r3
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	401a      	ands	r2, r3
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000874:	f04f 31ff 	mov.w	r1, #4294967295
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	fa01 f303 	lsl.w	r3, r1, r3
 800087e:	43d9      	mvns	r1, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	4313      	orrs	r3, r2
         );
}
 8000886:	4618      	mov	r0, r3
 8000888:	3724      	adds	r7, #36	; 0x24
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
	...

08000894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3b01      	subs	r3, #1
 80008a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008a4:	d301      	bcc.n	80008aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a6:	2301      	movs	r3, #1
 80008a8:	e00f      	b.n	80008ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <SysTick_Config+0x40>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008b2:	210f      	movs	r1, #15
 80008b4:	f04f 30ff 	mov.w	r0, #4294967295
 80008b8:	f7ff ff8e 	bl	80007d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <SysTick_Config+0x40>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c2:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <SysTick_Config+0x40>)
 80008c4:	2207      	movs	r2, #7
 80008c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	e000e010 	.word	0xe000e010

080008d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff ff47 	bl	8000774 <__NVIC_SetPriorityGrouping>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b086      	sub	sp, #24
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	4603      	mov	r3, r0
 80008f6:	60b9      	str	r1, [r7, #8]
 80008f8:	607a      	str	r2, [r7, #4]
 80008fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000900:	f7ff ff5c 	bl	80007bc <__NVIC_GetPriorityGrouping>
 8000904:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	68b9      	ldr	r1, [r7, #8]
 800090a:	6978      	ldr	r0, [r7, #20]
 800090c:	f7ff ff8e 	bl	800082c <NVIC_EncodePriority>
 8000910:	4602      	mov	r2, r0
 8000912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff5d 	bl	80007d8 <__NVIC_SetPriority>
}
 800091e:	bf00      	nop
 8000920:	3718      	adds	r7, #24
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff ffb0 	bl	8000894 <SysTick_Config>
 8000934:	4603      	mov	r3, r0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000940:	b480      	push	{r7}
 8000942:	b087      	sub	sp, #28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800094e:	e17f      	b.n	8000c50 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	2101      	movs	r1, #1
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	fa01 f303 	lsl.w	r3, r1, r3
 800095c:	4013      	ands	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	2b00      	cmp	r3, #0
 8000964:	f000 8171 	beq.w	8000c4a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d00b      	beq.n	8000988 <HAL_GPIO_Init+0x48>
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	2b02      	cmp	r3, #2
 8000976:	d007      	beq.n	8000988 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800097c:	2b11      	cmp	r3, #17
 800097e:	d003      	beq.n	8000988 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	2b12      	cmp	r3, #18
 8000986:	d130      	bne.n	80009ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	2203      	movs	r2, #3
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4013      	ands	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	68da      	ldr	r2, [r3, #12]
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009be:	2201      	movs	r2, #1
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	091b      	lsrs	r3, r3, #4
 80009d4:	f003 0201 	and.w	r2, r3, #1
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f003 0303 	and.w	r3, r3, #3
 80009f2:	2b03      	cmp	r3, #3
 80009f4:	d118      	bne.n	8000a28 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80009fc:	2201      	movs	r2, #1
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	43db      	mvns	r3, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	08db      	lsrs	r3, r3, #3
 8000a12:	f003 0201 	and.w	r2, r3, #1
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	2203      	movs	r2, #3
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	689a      	ldr	r2, [r3, #8]
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d003      	beq.n	8000a68 <HAL_GPIO_Init+0x128>
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2b12      	cmp	r3, #18
 8000a66:	d123      	bne.n	8000ab0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	08da      	lsrs	r2, r3, #3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3208      	adds	r2, #8
 8000a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a74:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	f003 0307 	and.w	r3, r3, #7
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	220f      	movs	r2, #15
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	43db      	mvns	r3, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	691a      	ldr	r2, [r3, #16]
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	08da      	lsrs	r2, r3, #3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3208      	adds	r2, #8
 8000aaa:	6939      	ldr	r1, [r7, #16]
 8000aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	2203      	movs	r2, #3
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f003 0203 	and.w	r2, r3, #3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	f000 80ac 	beq.w	8000c4a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	4b5f      	ldr	r3, [pc, #380]	; (8000c70 <HAL_GPIO_Init+0x330>)
 8000af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af6:	4a5e      	ldr	r2, [pc, #376]	; (8000c70 <HAL_GPIO_Init+0x330>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6613      	str	r3, [r2, #96]	; 0x60
 8000afe:	4b5c      	ldr	r3, [pc, #368]	; (8000c70 <HAL_GPIO_Init+0x330>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b0a:	4a5a      	ldr	r2, [pc, #360]	; (8000c74 <HAL_GPIO_Init+0x334>)
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	089b      	lsrs	r3, r3, #2
 8000b10:	3302      	adds	r3, #2
 8000b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b16:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	f003 0303 	and.w	r3, r3, #3
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	220f      	movs	r2, #15
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b34:	d025      	beq.n	8000b82 <HAL_GPIO_Init+0x242>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a4f      	ldr	r2, [pc, #316]	; (8000c78 <HAL_GPIO_Init+0x338>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d01f      	beq.n	8000b7e <HAL_GPIO_Init+0x23e>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a4e      	ldr	r2, [pc, #312]	; (8000c7c <HAL_GPIO_Init+0x33c>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d019      	beq.n	8000b7a <HAL_GPIO_Init+0x23a>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a4d      	ldr	r2, [pc, #308]	; (8000c80 <HAL_GPIO_Init+0x340>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d013      	beq.n	8000b76 <HAL_GPIO_Init+0x236>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a4c      	ldr	r2, [pc, #304]	; (8000c84 <HAL_GPIO_Init+0x344>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d00d      	beq.n	8000b72 <HAL_GPIO_Init+0x232>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a4b      	ldr	r2, [pc, #300]	; (8000c88 <HAL_GPIO_Init+0x348>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d007      	beq.n	8000b6e <HAL_GPIO_Init+0x22e>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a4a      	ldr	r2, [pc, #296]	; (8000c8c <HAL_GPIO_Init+0x34c>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d101      	bne.n	8000b6a <HAL_GPIO_Init+0x22a>
 8000b66:	2306      	movs	r3, #6
 8000b68:	e00c      	b.n	8000b84 <HAL_GPIO_Init+0x244>
 8000b6a:	2307      	movs	r3, #7
 8000b6c:	e00a      	b.n	8000b84 <HAL_GPIO_Init+0x244>
 8000b6e:	2305      	movs	r3, #5
 8000b70:	e008      	b.n	8000b84 <HAL_GPIO_Init+0x244>
 8000b72:	2304      	movs	r3, #4
 8000b74:	e006      	b.n	8000b84 <HAL_GPIO_Init+0x244>
 8000b76:	2303      	movs	r3, #3
 8000b78:	e004      	b.n	8000b84 <HAL_GPIO_Init+0x244>
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	e002      	b.n	8000b84 <HAL_GPIO_Init+0x244>
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e000      	b.n	8000b84 <HAL_GPIO_Init+0x244>
 8000b82:	2300      	movs	r3, #0
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	f002 0203 	and.w	r2, r2, #3
 8000b8a:	0092      	lsls	r2, r2, #2
 8000b8c:	4093      	lsls	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b94:	4937      	ldr	r1, [pc, #220]	; (8000c74 <HAL_GPIO_Init+0x334>)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	089b      	lsrs	r3, r3, #2
 8000b9a:	3302      	adds	r3, #2
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ba2:	4b3b      	ldr	r3, [pc, #236]	; (8000c90 <HAL_GPIO_Init+0x350>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	43db      	mvns	r3, r3
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d003      	beq.n	8000bc6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bc6:	4a32      	ldr	r2, [pc, #200]	; (8000c90 <HAL_GPIO_Init+0x350>)
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000bcc:	4b30      	ldr	r3, [pc, #192]	; (8000c90 <HAL_GPIO_Init+0x350>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d003      	beq.n	8000bf0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bf0:	4a27      	ldr	r2, [pc, #156]	; (8000c90 <HAL_GPIO_Init+0x350>)
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bf6:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <HAL_GPIO_Init+0x350>)
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4013      	ands	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d003      	beq.n	8000c1a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c1a:	4a1d      	ldr	r2, [pc, #116]	; (8000c90 <HAL_GPIO_Init+0x350>)
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <HAL_GPIO_Init+0x350>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d003      	beq.n	8000c44 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c44:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <HAL_GPIO_Init+0x350>)
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa22 f303 	lsr.w	r3, r2, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f47f ae78 	bne.w	8000950 <HAL_GPIO_Init+0x10>
  }
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	371c      	adds	r7, #28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40010000 	.word	0x40010000
 8000c78:	48000400 	.word	0x48000400
 8000c7c:	48000800 	.word	0x48000800
 8000c80:	48000c00 	.word	0x48000c00
 8000c84:	48001000 	.word	0x48001000
 8000c88:	48001400 	.word	0x48001400
 8000c8c:	48001800 	.word	0x48001800
 8000c90:	40010400 	.word	0x40010400

08000c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	807b      	strh	r3, [r7, #2]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ca4:	787b      	ldrb	r3, [r7, #1]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000caa:	887a      	ldrh	r2, [r7, #2]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cb0:	e002      	b.n	8000cb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cb2:	887a      	ldrh	r2, [r7, #2]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <HAL_PWREx_GetVoltageRange+0x18>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40007000 	.word	0x40007000

08000ce0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cee:	d130      	bne.n	8000d52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cf0:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cfc:	d038      	beq.n	8000d70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cfe:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d06:	4a1e      	ldr	r2, [pc, #120]	; (8000d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2232      	movs	r2, #50	; 0x32
 8000d14:	fb02 f303 	mul.w	r3, r2, r3
 8000d18:	4a1b      	ldr	r2, [pc, #108]	; (8000d88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1e:	0c9b      	lsrs	r3, r3, #18
 8000d20:	3301      	adds	r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d24:	e002      	b.n	8000d2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d38:	d102      	bne.n	8000d40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1f2      	bne.n	8000d26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d4c:	d110      	bne.n	8000d70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e00f      	b.n	8000d72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d5e:	d007      	beq.n	8000d70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d68:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40007000 	.word	0x40007000
 8000d84:	20000000 	.word	0x20000000
 8000d88:	431bde83 	.word	0x431bde83

08000d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e3d4      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d9e:	4ba1      	ldr	r3, [pc, #644]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f003 030c 	and.w	r3, r3, #12
 8000da6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000da8:	4b9e      	ldr	r3, [pc, #632]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0310 	and.w	r3, r3, #16
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 80e4 	beq.w	8000f88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d007      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x4a>
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	2b0c      	cmp	r3, #12
 8000dca:	f040 808b 	bne.w	8000ee4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	f040 8087 	bne.w	8000ee4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000dd6:	4b93      	ldr	r3, [pc, #588]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d005      	beq.n	8000dee <HAL_RCC_OscConfig+0x62>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e3ac      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a1a      	ldr	r2, [r3, #32]
 8000df2:	4b8c      	ldr	r3, [pc, #560]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d004      	beq.n	8000e08 <HAL_RCC_OscConfig+0x7c>
 8000dfe:	4b89      	ldr	r3, [pc, #548]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e06:	e005      	b.n	8000e14 <HAL_RCC_OscConfig+0x88>
 8000e08:	4b86      	ldr	r3, [pc, #536]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e0e:	091b      	lsrs	r3, r3, #4
 8000e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d223      	bcs.n	8000e60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a1b      	ldr	r3, [r3, #32]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 fd09 	bl	8001834 <RCC_SetFlashLatencyFromMSIRange>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e38d      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e2c:	4b7d      	ldr	r3, [pc, #500]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a7c      	ldr	r2, [pc, #496]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000e32:	f043 0308 	orr.w	r3, r3, #8
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	4b7a      	ldr	r3, [pc, #488]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6a1b      	ldr	r3, [r3, #32]
 8000e44:	4977      	ldr	r1, [pc, #476]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000e46:	4313      	orrs	r3, r2
 8000e48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e4a:	4b76      	ldr	r3, [pc, #472]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	4972      	ldr	r1, [pc, #456]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	604b      	str	r3, [r1, #4]
 8000e5e:	e025      	b.n	8000eac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e60:	4b70      	ldr	r3, [pc, #448]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a6f      	ldr	r2, [pc, #444]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000e66:	f043 0308 	orr.w	r3, r3, #8
 8000e6a:	6013      	str	r3, [r2, #0]
 8000e6c:	4b6d      	ldr	r3, [pc, #436]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a1b      	ldr	r3, [r3, #32]
 8000e78:	496a      	ldr	r1, [pc, #424]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e7e:	4b69      	ldr	r3, [pc, #420]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	021b      	lsls	r3, r3, #8
 8000e8c:	4965      	ldr	r1, [pc, #404]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d109      	bne.n	8000eac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 fcc9 	bl	8001834 <RCC_SetFlashLatencyFromMSIRange>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e34d      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000eac:	f000 fc36 	bl	800171c <HAL_RCC_GetSysClockFreq>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	4b5c      	ldr	r3, [pc, #368]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	091b      	lsrs	r3, r3, #4
 8000eb8:	f003 030f 	and.w	r3, r3, #15
 8000ebc:	495a      	ldr	r1, [pc, #360]	; (8001028 <HAL_RCC_OscConfig+0x29c>)
 8000ebe:	5ccb      	ldrb	r3, [r1, r3]
 8000ec0:	f003 031f 	and.w	r3, r3, #31
 8000ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec8:	4a58      	ldr	r2, [pc, #352]	; (800102c <HAL_RCC_OscConfig+0x2a0>)
 8000eca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ecc:	4b58      	ldr	r3, [pc, #352]	; (8001030 <HAL_RCC_OscConfig+0x2a4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fc07 	bl	80006e4 <HAL_InitTick>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d052      	beq.n	8000f86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	e331      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d032      	beq.n	8000f52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000eec:	4b4d      	ldr	r3, [pc, #308]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a4c      	ldr	r2, [pc, #304]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ef8:	f7ff fc30 	bl	800075c <HAL_GetTick>
 8000efc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000efe:	e008      	b.n	8000f12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f00:	f7ff fc2c 	bl	800075c <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d901      	bls.n	8000f12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e31a      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f12:	4b44      	ldr	r3, [pc, #272]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d0f0      	beq.n	8000f00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f1e:	4b41      	ldr	r3, [pc, #260]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a40      	ldr	r2, [pc, #256]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000f24:	f043 0308 	orr.w	r3, r3, #8
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	4b3e      	ldr	r3, [pc, #248]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a1b      	ldr	r3, [r3, #32]
 8000f36:	493b      	ldr	r1, [pc, #236]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f3c:	4b39      	ldr	r3, [pc, #228]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69db      	ldr	r3, [r3, #28]
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	4936      	ldr	r1, [pc, #216]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	604b      	str	r3, [r1, #4]
 8000f50:	e01a      	b.n	8000f88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f52:	4b34      	ldr	r3, [pc, #208]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a33      	ldr	r2, [pc, #204]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000f58:	f023 0301 	bic.w	r3, r3, #1
 8000f5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f5e:	f7ff fbfd 	bl	800075c <HAL_GetTick>
 8000f62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f64:	e008      	b.n	8000f78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f66:	f7ff fbf9 	bl	800075c <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e2e7      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f78:	4b2a      	ldr	r3, [pc, #168]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1f0      	bne.n	8000f66 <HAL_RCC_OscConfig+0x1da>
 8000f84:	e000      	b.n	8000f88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d074      	beq.n	800107e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	2b08      	cmp	r3, #8
 8000f98:	d005      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x21a>
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	2b0c      	cmp	r3, #12
 8000f9e:	d10e      	bne.n	8000fbe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d10b      	bne.n	8000fbe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d064      	beq.n	800107c <HAL_RCC_OscConfig+0x2f0>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d160      	bne.n	800107c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e2c4      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fc6:	d106      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x24a>
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a15      	ldr	r2, [pc, #84]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	e01d      	b.n	8001012 <HAL_RCC_OscConfig+0x286>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fde:	d10c      	bne.n	8000ffa <HAL_RCC_OscConfig+0x26e>
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000fe6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0c      	ldr	r2, [pc, #48]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	e00b      	b.n	8001012 <HAL_RCC_OscConfig+0x286>
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a09      	ldr	r2, [pc, #36]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8001000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a06      	ldr	r2, [pc, #24]	; (8001024 <HAL_RCC_OscConfig+0x298>)
 800100c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001010:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d01c      	beq.n	8001054 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800101a:	f7ff fb9f 	bl	800075c <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001020:	e011      	b.n	8001046 <HAL_RCC_OscConfig+0x2ba>
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000
 8001028:	08006688 	.word	0x08006688
 800102c:	20000000 	.word	0x20000000
 8001030:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001034:	f7ff fb92 	bl	800075c <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b64      	cmp	r3, #100	; 0x64
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e280      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001046:	4baf      	ldr	r3, [pc, #700]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0f0      	beq.n	8001034 <HAL_RCC_OscConfig+0x2a8>
 8001052:	e014      	b.n	800107e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001054:	f7ff fb82 	bl	800075c <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800105c:	f7ff fb7e 	bl	800075c <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b64      	cmp	r3, #100	; 0x64
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e26c      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800106e:	4ba5      	ldr	r3, [pc, #660]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f0      	bne.n	800105c <HAL_RCC_OscConfig+0x2d0>
 800107a:	e000      	b.n	800107e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d060      	beq.n	800114c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	2b04      	cmp	r3, #4
 800108e:	d005      	beq.n	800109c <HAL_RCC_OscConfig+0x310>
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	2b0c      	cmp	r3, #12
 8001094:	d119      	bne.n	80010ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d116      	bne.n	80010ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800109c:	4b99      	ldr	r3, [pc, #612]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <HAL_RCC_OscConfig+0x328>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e249      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b4:	4b93      	ldr	r3, [pc, #588]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	061b      	lsls	r3, r3, #24
 80010c2:	4990      	ldr	r1, [pc, #576]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010c8:	e040      	b.n	800114c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d023      	beq.n	800111a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010d2:	4b8c      	ldr	r3, [pc, #560]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a8b      	ldr	r2, [pc, #556]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 80010d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010de:	f7ff fb3d 	bl	800075c <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e6:	f7ff fb39 	bl	800075c <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e227      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010f8:	4b82      	ldr	r3, [pc, #520]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0f0      	beq.n	80010e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001104:	4b7f      	ldr	r3, [pc, #508]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	061b      	lsls	r3, r3, #24
 8001112:	497c      	ldr	r1, [pc, #496]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 8001114:	4313      	orrs	r3, r2
 8001116:	604b      	str	r3, [r1, #4]
 8001118:	e018      	b.n	800114c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800111a:	4b7a      	ldr	r3, [pc, #488]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a79      	ldr	r2, [pc, #484]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 8001120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001126:	f7ff fb19 	bl	800075c <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800112e:	f7ff fb15 	bl	800075c <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e203      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001140:	4b70      	ldr	r3, [pc, #448]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1f0      	bne.n	800112e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b00      	cmp	r3, #0
 8001156:	d03c      	beq.n	80011d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d01c      	beq.n	800119a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001160:	4b68      	ldr	r3, [pc, #416]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 8001162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001166:	4a67      	ldr	r2, [pc, #412]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001170:	f7ff faf4 	bl	800075c <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001178:	f7ff faf0 	bl	800075c <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e1de      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800118a:	4b5e      	ldr	r3, [pc, #376]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 800118c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0ef      	beq.n	8001178 <HAL_RCC_OscConfig+0x3ec>
 8001198:	e01b      	b.n	80011d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800119a:	4b5a      	ldr	r3, [pc, #360]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 800119c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011a0:	4a58      	ldr	r2, [pc, #352]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 80011a2:	f023 0301 	bic.w	r3, r3, #1
 80011a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011aa:	f7ff fad7 	bl	800075c <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b2:	f7ff fad3 	bl	800075c <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e1c1      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011c4:	4b4f      	ldr	r3, [pc, #316]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 80011c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1ef      	bne.n	80011b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 80a6 	beq.w	800132c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011e0:	2300      	movs	r3, #0
 80011e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011e4:	4b47      	ldr	r3, [pc, #284]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 80011e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10d      	bne.n	800120c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011f0:	4b44      	ldr	r3, [pc, #272]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 80011f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f4:	4a43      	ldr	r2, [pc, #268]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 80011f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fa:	6593      	str	r3, [r2, #88]	; 0x58
 80011fc:	4b41      	ldr	r3, [pc, #260]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 80011fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001208:	2301      	movs	r3, #1
 800120a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800120c:	4b3e      	ldr	r3, [pc, #248]	; (8001308 <HAL_RCC_OscConfig+0x57c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001214:	2b00      	cmp	r3, #0
 8001216:	d118      	bne.n	800124a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001218:	4b3b      	ldr	r3, [pc, #236]	; (8001308 <HAL_RCC_OscConfig+0x57c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a3a      	ldr	r2, [pc, #232]	; (8001308 <HAL_RCC_OscConfig+0x57c>)
 800121e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001222:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001224:	f7ff fa9a 	bl	800075c <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800122c:	f7ff fa96 	bl	800075c <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e184      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800123e:	4b32      	ldr	r3, [pc, #200]	; (8001308 <HAL_RCC_OscConfig+0x57c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d108      	bne.n	8001264 <HAL_RCC_OscConfig+0x4d8>
 8001252:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 8001254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001258:	4a2a      	ldr	r2, [pc, #168]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001262:	e024      	b.n	80012ae <HAL_RCC_OscConfig+0x522>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	2b05      	cmp	r3, #5
 800126a:	d110      	bne.n	800128e <HAL_RCC_OscConfig+0x502>
 800126c:	4b25      	ldr	r3, [pc, #148]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 800126e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001272:	4a24      	ldr	r2, [pc, #144]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800127c:	4b21      	ldr	r3, [pc, #132]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 800127e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001282:	4a20      	ldr	r2, [pc, #128]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800128c:	e00f      	b.n	80012ae <HAL_RCC_OscConfig+0x522>
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 8001290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001294:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 8001296:	f023 0301 	bic.w	r3, r3, #1
 800129a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 80012a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a4:	4a17      	ldr	r2, [pc, #92]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 80012a6:	f023 0304 	bic.w	r3, r3, #4
 80012aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d016      	beq.n	80012e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b6:	f7ff fa51 	bl	800075c <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012bc:	e00a      	b.n	80012d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012be:	f7ff fa4d 	bl	800075c <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e139      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012d4:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <HAL_RCC_OscConfig+0x578>)
 80012d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0ed      	beq.n	80012be <HAL_RCC_OscConfig+0x532>
 80012e2:	e01a      	b.n	800131a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e4:	f7ff fa3a 	bl	800075c <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012ea:	e00f      	b.n	800130c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ec:	f7ff fa36 	bl	800075c <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d906      	bls.n	800130c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e122      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000
 8001308:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800130c:	4b90      	ldr	r3, [pc, #576]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 800130e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1e8      	bne.n	80012ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800131a:	7ffb      	ldrb	r3, [r7, #31]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d105      	bne.n	800132c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001320:	4b8b      	ldr	r3, [pc, #556]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 8001322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001324:	4a8a      	ldr	r2, [pc, #552]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 8001326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800132a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 8108 	beq.w	8001546 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133a:	2b02      	cmp	r3, #2
 800133c:	f040 80d0 	bne.w	80014e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001340:	4b83      	ldr	r3, [pc, #524]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f003 0203 	and.w	r2, r3, #3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001350:	429a      	cmp	r2, r3
 8001352:	d130      	bne.n	80013b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	3b01      	subs	r3, #1
 8001360:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001362:	429a      	cmp	r2, r3
 8001364:	d127      	bne.n	80013b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001370:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001372:	429a      	cmp	r2, r3
 8001374:	d11f      	bne.n	80013b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001380:	2a07      	cmp	r2, #7
 8001382:	bf14      	ite	ne
 8001384:	2201      	movne	r2, #1
 8001386:	2200      	moveq	r2, #0
 8001388:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800138a:	4293      	cmp	r3, r2
 800138c:	d113      	bne.n	80013b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001398:	085b      	lsrs	r3, r3, #1
 800139a:	3b01      	subs	r3, #1
 800139c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800139e:	429a      	cmp	r2, r3
 80013a0:	d109      	bne.n	80013b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	085b      	lsrs	r3, r3, #1
 80013ae:	3b01      	subs	r3, #1
 80013b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d06e      	beq.n	8001494 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	2b0c      	cmp	r3, #12
 80013ba:	d069      	beq.n	8001490 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80013bc:	4b64      	ldr	r3, [pc, #400]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d105      	bne.n	80013d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80013c8:	4b61      	ldr	r3, [pc, #388]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e0b7      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013d8:	4b5d      	ldr	r3, [pc, #372]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a5c      	ldr	r2, [pc, #368]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 80013de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013e4:	f7ff f9ba 	bl	800075c <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ec:	f7ff f9b6 	bl	800075c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e0a4      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013fe:	4b54      	ldr	r3, [pc, #336]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800140a:	4b51      	ldr	r3, [pc, #324]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	4b51      	ldr	r3, [pc, #324]	; (8001554 <HAL_RCC_OscConfig+0x7c8>)
 8001410:	4013      	ands	r3, r2
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800141a:	3a01      	subs	r2, #1
 800141c:	0112      	lsls	r2, r2, #4
 800141e:	4311      	orrs	r1, r2
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001424:	0212      	lsls	r2, r2, #8
 8001426:	4311      	orrs	r1, r2
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800142c:	0852      	lsrs	r2, r2, #1
 800142e:	3a01      	subs	r2, #1
 8001430:	0552      	lsls	r2, r2, #21
 8001432:	4311      	orrs	r1, r2
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001438:	0852      	lsrs	r2, r2, #1
 800143a:	3a01      	subs	r2, #1
 800143c:	0652      	lsls	r2, r2, #25
 800143e:	4311      	orrs	r1, r2
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001444:	0912      	lsrs	r2, r2, #4
 8001446:	0452      	lsls	r2, r2, #17
 8001448:	430a      	orrs	r2, r1
 800144a:	4941      	ldr	r1, [pc, #260]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 800144c:	4313      	orrs	r3, r2
 800144e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001450:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a3e      	ldr	r2, [pc, #248]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 8001456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800145a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800145c:	4b3c      	ldr	r3, [pc, #240]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	4a3b      	ldr	r2, [pc, #236]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 8001462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001466:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001468:	f7ff f978 	bl	800075c <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001470:	f7ff f974 	bl	800075c <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e062      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001482:	4b33      	ldr	r3, [pc, #204]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800148e:	e05a      	b.n	8001546 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e059      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001494:	4b2e      	ldr	r3, [pc, #184]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d152      	bne.n	8001546 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80014a0:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a2a      	ldr	r2, [pc, #168]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 80014a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	4a27      	ldr	r2, [pc, #156]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 80014b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014b8:	f7ff f950 	bl	800075c <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c0:	f7ff f94c 	bl	800075c <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e03a      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014d2:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x734>
 80014de:	e032      	b.n	8001546 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	2b0c      	cmp	r3, #12
 80014e4:	d02d      	beq.n	8001542 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e6:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a19      	ldr	r2, [pc, #100]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 80014ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d105      	bne.n	800150a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	4a13      	ldr	r2, [pc, #76]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 8001504:	f023 0303 	bic.w	r3, r3, #3
 8001508:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	4a10      	ldr	r2, [pc, #64]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 8001510:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001518:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151a:	f7ff f91f 	bl	800075c <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001522:	f7ff f91b 	bl	800075c <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e009      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_RCC_OscConfig+0x7c4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f0      	bne.n	8001522 <HAL_RCC_OscConfig+0x796>
 8001540:	e001      	b.n	8001546 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3720      	adds	r7, #32
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40021000 	.word	0x40021000
 8001554:	f99d808c 	.word	0xf99d808c

08001558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e0c8      	b.n	80016fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800156c:	4b66      	ldr	r3, [pc, #408]	; (8001708 <HAL_RCC_ClockConfig+0x1b0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d910      	bls.n	800159c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157a:	4b63      	ldr	r3, [pc, #396]	; (8001708 <HAL_RCC_ClockConfig+0x1b0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 0207 	bic.w	r2, r3, #7
 8001582:	4961      	ldr	r1, [pc, #388]	; (8001708 <HAL_RCC_ClockConfig+0x1b0>)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	4313      	orrs	r3, r2
 8001588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158a:	4b5f      	ldr	r3, [pc, #380]	; (8001708 <HAL_RCC_ClockConfig+0x1b0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d001      	beq.n	800159c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0b0      	b.n	80016fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d04c      	beq.n	8001642 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d107      	bne.n	80015c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015b0:	4b56      	ldr	r3, [pc, #344]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d121      	bne.n	8001600 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e09e      	b.n	80016fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d107      	bne.n	80015d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015c8:	4b50      	ldr	r3, [pc, #320]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d115      	bne.n	8001600 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e092      	b.n	80016fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d107      	bne.n	80015f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015e0:	4b4a      	ldr	r3, [pc, #296]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d109      	bne.n	8001600 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e086      	b.n	80016fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f0:	4b46      	ldr	r3, [pc, #280]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e07e      	b.n	80016fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001600:	4b42      	ldr	r3, [pc, #264]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f023 0203 	bic.w	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	493f      	ldr	r1, [pc, #252]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 800160e:	4313      	orrs	r3, r2
 8001610:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001612:	f7ff f8a3 	bl	800075c <HAL_GetTick>
 8001616:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001618:	e00a      	b.n	8001630 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800161a:	f7ff f89f 	bl	800075c <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	f241 3288 	movw	r2, #5000	; 0x1388
 8001628:	4293      	cmp	r3, r2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e066      	b.n	80016fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001630:	4b36      	ldr	r3, [pc, #216]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 020c 	and.w	r2, r3, #12
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	429a      	cmp	r2, r3
 8001640:	d1eb      	bne.n	800161a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d008      	beq.n	8001660 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800164e:	4b2f      	ldr	r3, [pc, #188]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	492c      	ldr	r1, [pc, #176]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 800165c:	4313      	orrs	r3, r2
 800165e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001660:	4b29      	ldr	r3, [pc, #164]	; (8001708 <HAL_RCC_ClockConfig+0x1b0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d210      	bcs.n	8001690 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166e:	4b26      	ldr	r3, [pc, #152]	; (8001708 <HAL_RCC_ClockConfig+0x1b0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 0207 	bic.w	r2, r3, #7
 8001676:	4924      	ldr	r1, [pc, #144]	; (8001708 <HAL_RCC_ClockConfig+0x1b0>)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167e:	4b22      	ldr	r3, [pc, #136]	; (8001708 <HAL_RCC_ClockConfig+0x1b0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	d001      	beq.n	8001690 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e036      	b.n	80016fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d008      	beq.n	80016ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800169c:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	4918      	ldr	r1, [pc, #96]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d009      	beq.n	80016ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ba:	4b14      	ldr	r3, [pc, #80]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	4910      	ldr	r1, [pc, #64]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016ce:	f000 f825 	bl	800171c <HAL_RCC_GetSysClockFreq>
 80016d2:	4602      	mov	r2, r0
 80016d4:	4b0d      	ldr	r3, [pc, #52]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	091b      	lsrs	r3, r3, #4
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	490c      	ldr	r1, [pc, #48]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 80016e0:	5ccb      	ldrb	r3, [r1, r3]
 80016e2:	f003 031f 	and.w	r3, r3, #31
 80016e6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe fff6 	bl	80006e4 <HAL_InitTick>
 80016f8:	4603      	mov	r3, r0
 80016fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80016fc:	7afb      	ldrb	r3, [r7, #11]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40022000 	.word	0x40022000
 800170c:	40021000 	.word	0x40021000
 8001710:	08006688 	.word	0x08006688
 8001714:	20000000 	.word	0x20000000
 8001718:	20000004 	.word	0x20000004

0800171c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800172a:	4b3e      	ldr	r3, [pc, #248]	; (8001824 <HAL_RCC_GetSysClockFreq+0x108>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001734:	4b3b      	ldr	r3, [pc, #236]	; (8001824 <HAL_RCC_GetSysClockFreq+0x108>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0x34>
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	2b0c      	cmp	r3, #12
 8001748:	d121      	bne.n	800178e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d11e      	bne.n	800178e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001750:	4b34      	ldr	r3, [pc, #208]	; (8001824 <HAL_RCC_GetSysClockFreq+0x108>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d107      	bne.n	800176c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800175c:	4b31      	ldr	r3, [pc, #196]	; (8001824 <HAL_RCC_GetSysClockFreq+0x108>)
 800175e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001762:	0a1b      	lsrs	r3, r3, #8
 8001764:	f003 030f 	and.w	r3, r3, #15
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	e005      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800176c:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <HAL_RCC_GetSysClockFreq+0x108>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001778:	4a2b      	ldr	r2, [pc, #172]	; (8001828 <HAL_RCC_GetSysClockFreq+0x10c>)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001780:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d10d      	bne.n	80017a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800178c:	e00a      	b.n	80017a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	2b04      	cmp	r3, #4
 8001792:	d102      	bne.n	800179a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001794:	4b25      	ldr	r3, [pc, #148]	; (800182c <HAL_RCC_GetSysClockFreq+0x110>)
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	e004      	b.n	80017a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	2b08      	cmp	r3, #8
 800179e:	d101      	bne.n	80017a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017a0:	4b23      	ldr	r3, [pc, #140]	; (8001830 <HAL_RCC_GetSysClockFreq+0x114>)
 80017a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	2b0c      	cmp	r3, #12
 80017a8:	d134      	bne.n	8001814 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017aa:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <HAL_RCC_GetSysClockFreq+0x108>)
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d003      	beq.n	80017c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d003      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0xac>
 80017c0:	e005      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017c2:	4b1a      	ldr	r3, [pc, #104]	; (800182c <HAL_RCC_GetSysClockFreq+0x110>)
 80017c4:	617b      	str	r3, [r7, #20]
      break;
 80017c6:	e005      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017c8:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_RCC_GetSysClockFreq+0x114>)
 80017ca:	617b      	str	r3, [r7, #20]
      break;
 80017cc:	e002      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	617b      	str	r3, [r7, #20]
      break;
 80017d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_RCC_GetSysClockFreq+0x108>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	3301      	adds	r3, #1
 80017e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_RCC_GetSysClockFreq+0x108>)
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	0a1b      	lsrs	r3, r3, #8
 80017e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	fb02 f203 	mul.w	r2, r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_RCC_GetSysClockFreq+0x108>)
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	0e5b      	lsrs	r3, r3, #25
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	3301      	adds	r3, #1
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001812:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001814:	69bb      	ldr	r3, [r7, #24]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3724      	adds	r7, #36	; 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000
 8001828:	08006698 	.word	0x08006698
 800182c:	00f42400 	.word	0x00f42400
 8001830:	007a1200 	.word	0x007a1200

08001834 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001840:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800184c:	f7ff fa3a 	bl	8000cc4 <HAL_PWREx_GetVoltageRange>
 8001850:	6178      	str	r0, [r7, #20]
 8001852:	e014      	b.n	800187e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001858:	4a24      	ldr	r2, [pc, #144]	; (80018ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800185a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185e:	6593      	str	r3, [r2, #88]	; 0x58
 8001860:	4b22      	ldr	r3, [pc, #136]	; (80018ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800186c:	f7ff fa2a 	bl	8000cc4 <HAL_PWREx_GetVoltageRange>
 8001870:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001872:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001876:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800187c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001884:	d10b      	bne.n	800189e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b80      	cmp	r3, #128	; 0x80
 800188a:	d919      	bls.n	80018c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2ba0      	cmp	r3, #160	; 0xa0
 8001890:	d902      	bls.n	8001898 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001892:	2302      	movs	r3, #2
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	e013      	b.n	80018c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001898:	2301      	movs	r3, #1
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	e010      	b.n	80018c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b80      	cmp	r3, #128	; 0x80
 80018a2:	d902      	bls.n	80018aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018a4:	2303      	movs	r3, #3
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	e00a      	b.n	80018c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b80      	cmp	r3, #128	; 0x80
 80018ae:	d102      	bne.n	80018b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018b0:	2302      	movs	r3, #2
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	e004      	b.n	80018c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b70      	cmp	r3, #112	; 0x70
 80018ba:	d101      	bne.n	80018c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018bc:	2301      	movs	r3, #1
 80018be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f023 0207 	bic.w	r2, r3, #7
 80018c8:	4909      	ldr	r1, [pc, #36]	; (80018f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018d0:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d001      	beq.n	80018e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40022000 	.word	0x40022000

080018f4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f103 0208 	add.w	r2, r3, #8
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f04f 32ff 	mov.w	r2, #4294967295
 800190c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f103 0208 	add.w	r2, r3, #8
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f103 0208 	add.w	r2, r3, #8
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800194e:	b480      	push	{r7}
 8001950:	b085      	sub	sp, #20
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001964:	d103      	bne.n	800196e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	e00c      	b.n	8001988 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3308      	adds	r3, #8
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	e002      	b.n	800197c <vListInsert+0x2e>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	429a      	cmp	r2, r3
 8001986:	d2f6      	bcs.n	8001976 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	601a      	str	r2, [r3, #0]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6892      	ldr	r2, [r2, #8]
 80019d6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6852      	ldr	r2, [r2, #4]
 80019e0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d103      	bne.n	80019f4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	1e5a      	subs	r2, r3, #1
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10a      	bne.n	8001a42 <xQueueGenericReset+0x2e>
        __asm volatile
 8001a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a30:	f383 8811 	msr	BASEPRI, r3
 8001a34:	f3bf 8f6f 	isb	sy
 8001a38:	f3bf 8f4f 	dsb	sy
 8001a3c:	60fb      	str	r3, [r7, #12]
    }
 8001a3e:	bf00      	nop
 8001a40:	e7fe      	b.n	8001a40 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d05d      	beq.n	8001b04 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d059      	beq.n	8001b04 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a58:	2100      	movs	r1, #0
 8001a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d000      	beq.n	8001a64 <xQueueGenericReset+0x50>
 8001a62:	2101      	movs	r1, #1
 8001a64:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d14c      	bne.n	8001b04 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001a6a:	f001 ff0b 	bl	8003884 <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a76:	6939      	ldr	r1, [r7, #16]
 8001a78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a7a:	fb01 f303 	mul.w	r3, r1, r3
 8001a7e:	441a      	add	r2, r3
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	2200      	movs	r2, #0
 8001a88:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	6939      	ldr	r1, [r7, #16]
 8001a9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001aa0:	fb01 f303 	mul.w	r3, r1, r3
 8001aa4:	441a      	add	r2, r3
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	22ff      	movs	r2, #255	; 0xff
 8001aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	22ff      	movs	r2, #255	; 0xff
 8001ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d114      	bne.n	8001aea <xQueueGenericReset+0xd6>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01a      	beq.n	8001afe <xQueueGenericReset+0xea>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	3310      	adds	r3, #16
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 ffed 	bl	8002aac <xTaskRemoveFromEventList>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d012      	beq.n	8001afe <xQueueGenericReset+0xea>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <xQueueGenericReset+0x11c>)
 8001ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	f3bf 8f4f 	dsb	sy
 8001ae4:	f3bf 8f6f 	isb	sy
 8001ae8:	e009      	b.n	8001afe <xQueueGenericReset+0xea>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	3310      	adds	r3, #16
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff ff00 	bl	80018f4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	3324      	adds	r3, #36	; 0x24
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fefb 	bl	80018f4 <vListInitialise>
        }
        taskEXIT_CRITICAL();
 8001afe:	f001 fef1 	bl	80038e4 <vPortExitCritical>
 8001b02:	e001      	b.n	8001b08 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10a      	bne.n	8001b24 <xQueueGenericReset+0x110>
        __asm volatile
 8001b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b12:	f383 8811 	msr	BASEPRI, r3
 8001b16:	f3bf 8f6f 	isb	sy
 8001b1a:	f3bf 8f4f 	dsb	sy
 8001b1e:	60bb      	str	r3, [r7, #8]
    }
 8001b20:	bf00      	nop
 8001b22:	e7fe      	b.n	8001b22 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001b24:	697b      	ldr	r3, [r7, #20]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	e000ed04 	.word	0xe000ed04

08001b34 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d02e      	beq.n	8001baa <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	fba3 2302 	umull	r2, r3, r3, r2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d000      	beq.n	8001b5c <xQueueGenericCreate+0x28>
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d123      	bne.n	8001baa <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001b6a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001b6e:	d81c      	bhi.n	8001baa <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	fb02 f303 	mul.w	r3, r2, r3
 8001b78:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	3350      	adds	r3, #80	; 0x50
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f001 ffac 	bl	8003adc <pvPortMalloc>
 8001b84:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d01c      	beq.n	8001bc6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	3350      	adds	r3, #80	; 0x50
 8001b94:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001b96:	79fa      	ldrb	r2, [r7, #7]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 f814 	bl	8001bd0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001ba8:	e00d      	b.n	8001bc6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10a      	bne.n	8001bc6 <xQueueGenericCreate+0x92>
        __asm volatile
 8001bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bb4:	f383 8811 	msr	BASEPRI, r3
 8001bb8:	f3bf 8f6f 	isb	sy
 8001bbc:	f3bf 8f4f 	dsb	sy
 8001bc0:	613b      	str	r3, [r7, #16]
    }
 8001bc2:	bf00      	nop
 8001bc4:	e7fe      	b.n	8001bc4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
    }
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3720      	adds	r7, #32
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d103      	bne.n	8001bec <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	e002      	b.n	8001bf2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001bfe:	2101      	movs	r1, #1
 8001c00:	69b8      	ldr	r0, [r7, #24]
 8001c02:	f7ff ff07 	bl	8001a14 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	78fa      	ldrb	r2, [r7, #3]
 8001c0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	68f9      	ldr	r1, [r7, #12]
 8001c14:	2073      	movs	r0, #115	; 0x73
 8001c16:	f003 f8ab 	bl	8004d70 <SEGGER_SYSVIEW_RecordU32x3>
}
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b08f      	sub	sp, #60	; 0x3c
 8001c28:	af02      	add	r7, sp, #8
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10a      	bne.n	8001c54 <xQueueReceive+0x30>
        __asm volatile
 8001c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c42:	f383 8811 	msr	BASEPRI, r3
 8001c46:	f3bf 8f6f 	isb	sy
 8001c4a:	f3bf 8f4f 	dsb	sy
 8001c4e:	623b      	str	r3, [r7, #32]
    }
 8001c50:	bf00      	nop
 8001c52:	e7fe      	b.n	8001c52 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d103      	bne.n	8001c62 <xQueueReceive+0x3e>
 8001c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <xQueueReceive+0x42>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <xQueueReceive+0x44>
 8001c66:	2300      	movs	r3, #0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10a      	bne.n	8001c82 <xQueueReceive+0x5e>
        __asm volatile
 8001c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c70:	f383 8811 	msr	BASEPRI, r3
 8001c74:	f3bf 8f6f 	isb	sy
 8001c78:	f3bf 8f4f 	dsb	sy
 8001c7c:	61fb      	str	r3, [r7, #28]
    }
 8001c7e:	bf00      	nop
 8001c80:	e7fe      	b.n	8001c80 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c82:	f001 f925 	bl	8002ed0 <xTaskGetSchedulerState>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d102      	bne.n	8001c92 <xQueueReceive+0x6e>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <xQueueReceive+0x72>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <xQueueReceive+0x74>
 8001c96:	2300      	movs	r3, #0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10a      	bne.n	8001cb2 <xQueueReceive+0x8e>
        __asm volatile
 8001c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca0:	f383 8811 	msr	BASEPRI, r3
 8001ca4:	f3bf 8f6f 	isb	sy
 8001ca8:	f3bf 8f4f 	dsb	sy
 8001cac:	61bb      	str	r3, [r7, #24]
    }
 8001cae:	bf00      	nop
 8001cb0:	e7fe      	b.n	8001cb0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001cb2:	f001 fde7 	bl	8003884 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d02f      	beq.n	8001d22 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001cc2:	68b9      	ldr	r1, [r7, #8]
 8001cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001cc6:	f000 f8bd 	bl	8001e44 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8001cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f003 fddb 	bl	8005888 <SEGGER_SYSVIEW_ShrinkId>
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f003 fdd7 	bl	8005888 <SEGGER_SYSVIEW_ShrinkId>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2101      	movs	r1, #1
 8001ce0:	9100      	str	r1, [sp, #0]
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	205c      	movs	r0, #92	; 0x5c
 8001ce6:	f003 f8b9 	bl	8004e5c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	1e5a      	subs	r2, r3, #1
 8001cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00f      	beq.n	8001d1a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfc:	3310      	adds	r3, #16
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 fed4 	bl	8002aac <xTaskRemoveFromEventList>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001d0a:	4b4d      	ldr	r3, [pc, #308]	; (8001e40 <xQueueReceive+0x21c>)
 8001d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	f3bf 8f4f 	dsb	sy
 8001d16:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001d1a:	f001 fde3 	bl	80038e4 <vPortExitCritical>
                return pdPASS;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e08a      	b.n	8001e38 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d113      	bne.n	8001d50 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001d28:	f001 fddc 	bl	80038e4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 fdaa 	bl	8005888 <SEGGER_SYSVIEW_ShrinkId>
 8001d34:	4604      	mov	r4, r0
 8001d36:	2000      	movs	r0, #0
 8001d38:	f003 fda6 	bl	8005888 <SEGGER_SYSVIEW_ShrinkId>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2101      	movs	r1, #1
 8001d42:	9100      	str	r1, [sp, #0]
 8001d44:	4621      	mov	r1, r4
 8001d46:	205c      	movs	r0, #92	; 0x5c
 8001d48:	f003 f888 	bl	8004e5c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	e073      	b.n	8001e38 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d106      	bne.n	8001d64 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 ff7e 	bl	8002c5c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001d60:	2301      	movs	r3, #1
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001d64:	f001 fdbe 	bl	80038e4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001d68:	f000 fb80 	bl	800246c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001d6c:	f001 fd8a 	bl	8003884 <vPortEnterCritical>
 8001d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d76:	b25b      	sxtb	r3, r3
 8001d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7c:	d103      	bne.n	8001d86 <xQueueReceive+0x162>
 8001d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d8c:	b25b      	sxtb	r3, r3
 8001d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d92:	d103      	bne.n	8001d9c <xQueueReceive+0x178>
 8001d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d9c:	f001 fda2 	bl	80038e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001da0:	1d3a      	adds	r2, r7, #4
 8001da2:	f107 0310 	add.w	r3, r7, #16
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 ff6d 	bl	8002c88 <xTaskCheckForTimeOut>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d124      	bne.n	8001dfe <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001db6:	f000 f8bd 	bl	8001f34 <prvIsQueueEmpty>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d018      	beq.n	8001df2 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc2:	3324      	adds	r3, #36	; 0x24
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 fe03 	bl	80029d4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dd0:	f000 f85e 	bl	8001e90 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001dd4:	f000 fb58 	bl	8002488 <xTaskResumeAll>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f47f af69 	bne.w	8001cb2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001de0:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <xQueueReceive+0x21c>)
 8001de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	f3bf 8f4f 	dsb	sy
 8001dec:	f3bf 8f6f 	isb	sy
 8001df0:	e75f      	b.n	8001cb2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001df4:	f000 f84c 	bl	8001e90 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001df8:	f000 fb46 	bl	8002488 <xTaskResumeAll>
 8001dfc:	e759      	b.n	8001cb2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e00:	f000 f846 	bl	8001e90 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001e04:	f000 fb40 	bl	8002488 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e0a:	f000 f893 	bl	8001f34 <prvIsQueueEmpty>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f43f af4e 	beq.w	8001cb2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f003 fd35 	bl	8005888 <SEGGER_SYSVIEW_ShrinkId>
 8001e1e:	4604      	mov	r4, r0
 8001e20:	2000      	movs	r0, #0
 8001e22:	f003 fd31 	bl	8005888 <SEGGER_SYSVIEW_ShrinkId>
 8001e26:	4602      	mov	r2, r0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	9100      	str	r1, [sp, #0]
 8001e2e:	4621      	mov	r1, r4
 8001e30:	205c      	movs	r0, #92	; 0x5c
 8001e32:	f003 f813 	bl	8004e5c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8001e36:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3734      	adds	r7, #52	; 0x34
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd90      	pop	{r4, r7, pc}
 8001e40:	e000ed04 	.word	0xe000ed04

08001e44 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d018      	beq.n	8001e88 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	441a      	add	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d303      	bcc.n	8001e78 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68d9      	ldr	r1, [r3, #12]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	461a      	mov	r2, r3
 8001e82:	6838      	ldr	r0, [r7, #0]
 8001e84:	f003 fe8c 	bl	8005ba0 <memcpy>
    }
}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001e98:	f001 fcf4 	bl	8003884 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ea2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ea4:	e011      	b.n	8001eca <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d012      	beq.n	8001ed4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3324      	adds	r3, #36	; 0x24
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fdfa 	bl	8002aac <xTaskRemoveFromEventList>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001ebe:	f000 ff49 	bl	8002d54 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	dce9      	bgt.n	8001ea6 <prvUnlockQueue+0x16>
 8001ed2:	e000      	b.n	8001ed6 <prvUnlockQueue+0x46>
                        break;
 8001ed4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	22ff      	movs	r2, #255	; 0xff
 8001eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001ede:	f001 fd01 	bl	80038e4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001ee2:	f001 fccf 	bl	8003884 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001eec:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001eee:	e011      	b.n	8001f14 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d012      	beq.n	8001f1e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3310      	adds	r3, #16
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 fdd5 	bl	8002aac <xTaskRemoveFromEventList>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001f08:	f000 ff24 	bl	8002d54 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001f0c:	7bbb      	ldrb	r3, [r7, #14]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	dce9      	bgt.n	8001ef0 <prvUnlockQueue+0x60>
 8001f1c:	e000      	b.n	8001f20 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001f1e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	22ff      	movs	r2, #255	; 0xff
 8001f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001f28:	f001 fcdc 	bl	80038e4 <vPortExitCritical>
}
 8001f2c:	bf00      	nop
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001f3c:	f001 fca2 	bl	8003884 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d102      	bne.n	8001f4e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	e001      	b.n	8001f52 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001f52:	f001 fcc7 	bl	80038e4 <vPortExitCritical>

    return xReturn;
 8001f56:	68fb      	ldr	r3, [r7, #12]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10a      	bne.n	8001f86 <vQueueAddToRegistry+0x26>
        __asm volatile
 8001f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f74:	f383 8811 	msr	BASEPRI, r3
 8001f78:	f3bf 8f6f 	isb	sy
 8001f7c:	f3bf 8f4f 	dsb	sy
 8001f80:	60fb      	str	r3, [r7, #12]
    }
 8001f82:	bf00      	nop
 8001f84:	e7fe      	b.n	8001f84 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d024      	beq.n	8001fda <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	e01e      	b.n	8001fd4 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001f96:	4a1c      	ldr	r2, [pc, #112]	; (8002008 <vQueueAddToRegistry+0xa8>)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d105      	bne.n	8001fb2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4a17      	ldr	r2, [pc, #92]	; (8002008 <vQueueAddToRegistry+0xa8>)
 8001fac:	4413      	add	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
                    break;
 8001fb0:	e013      	b.n	8001fda <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10a      	bne.n	8001fce <vQueueAddToRegistry+0x6e>
 8001fb8:	4a13      	ldr	r2, [pc, #76]	; (8002008 <vQueueAddToRegistry+0xa8>)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d104      	bne.n	8001fce <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4a0f      	ldr	r2, [pc, #60]	; (8002008 <vQueueAddToRegistry+0xa8>)
 8001fca:	4413      	add	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b07      	cmp	r3, #7
 8001fd8:	d9dd      	bls.n	8001f96 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00f      	beq.n	8002000 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 fc4a 	bl	8005888 <SEGGER_SYSVIEW_ShrinkId>
 8001ff4:	4601      	mov	r1, r0
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2071      	movs	r0, #113	; 0x71
 8001ffc:	f002 fe5e 	bl	8004cbc <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002000:	bf00      	nop
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	200143dc 	.word	0x200143dc

0800200c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800201c:	f001 fc32 	bl	8003884 <vPortEnterCritical>
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002026:	b25b      	sxtb	r3, r3
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202c:	d103      	bne.n	8002036 <vQueueWaitForMessageRestricted+0x2a>
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800203c:	b25b      	sxtb	r3, r3
 800203e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002042:	d103      	bne.n	800204c <vQueueWaitForMessageRestricted+0x40>
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800204c:	f001 fc4a 	bl	80038e4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002054:	2b00      	cmp	r3, #0
 8002056:	d106      	bne.n	8002066 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	3324      	adds	r3, #36	; 0x24
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	4618      	mov	r0, r3
 8002062:	f000 fcdb 	bl	8002a1c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002066:	6978      	ldr	r0, [r7, #20]
 8002068:	f7ff ff12 	bl	8001e90 <prvUnlockQueue>
    }
 800206c:	bf00      	nop
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002074:	b580      	push	{r7, lr}
 8002076:	b08c      	sub	sp, #48	; 0x30
 8002078:	af04      	add	r7, sp, #16
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	4613      	mov	r3, r2
 8002082:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4618      	mov	r0, r3
 800208a:	f001 fd27 	bl	8003adc <pvPortMalloc>
 800208e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00e      	beq.n	80020b4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002096:	2058      	movs	r0, #88	; 0x58
 8002098:	f001 fd20 	bl	8003adc <pvPortMalloc>
 800209c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	631a      	str	r2, [r3, #48]	; 0x30
 80020aa:	e005      	b.n	80020b8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80020ac:	6978      	ldr	r0, [r7, #20]
 80020ae:	f001 fdf5 	bl	8003c9c <vPortFree>
 80020b2:	e001      	b.n	80020b8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d013      	beq.n	80020e6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80020be:	88fa      	ldrh	r2, [r7, #6]
 80020c0:	2300      	movs	r3, #0
 80020c2:	9303      	str	r3, [sp, #12]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	9302      	str	r3, [sp, #8]
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	68b9      	ldr	r1, [r7, #8]
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 f80e 	bl	80020f6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80020da:	69f8      	ldr	r0, [r7, #28]
 80020dc:	f000 f8b0 	bl	8002240 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80020e0:	2301      	movs	r3, #1
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	e002      	b.n	80020ec <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ea:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80020ec:	69bb      	ldr	r3, [r7, #24]
    }
 80020ee:	4618      	mov	r0, r3
 80020f0:	3720      	adds	r7, #32
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b088      	sub	sp, #32
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002106:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	461a      	mov	r2, r3
 800210e:	21a5      	movs	r1, #165	; 0xa5
 8002110:	f003 fd54 	bl	8005bbc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800211e:	3b01      	subs	r3, #1
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	f023 0307 	bic.w	r3, r3, #7
 800212c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00a      	beq.n	800214e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213c:	f383 8811 	msr	BASEPRI, r3
 8002140:	f3bf 8f6f 	isb	sy
 8002144:	f3bf 8f4f 	dsb	sy
 8002148:	617b      	str	r3, [r7, #20]
    }
 800214a:	bf00      	nop
 800214c:	e7fe      	b.n	800214c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d01f      	beq.n	8002194 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
 8002158:	e012      	b.n	8002180 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	4413      	add	r3, r2
 8002160:	7819      	ldrb	r1, [r3, #0]
 8002162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	4413      	add	r3, r2
 8002168:	3334      	adds	r3, #52	; 0x34
 800216a:	460a      	mov	r2, r1
 800216c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	4413      	add	r3, r2
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d006      	beq.n	8002188 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3301      	adds	r3, #1
 800217e:	61fb      	str	r3, [r7, #28]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2b09      	cmp	r3, #9
 8002184:	d9e9      	bls.n	800215a <prvInitialiseNewTask+0x64>
 8002186:	e000      	b.n	800218a <prvInitialiseNewTask+0x94>
            {
                break;
 8002188:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800218a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002192:	e003      	b.n	800219c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800219c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d90a      	bls.n	80021b8 <prvInitialiseNewTask+0xc2>
        __asm volatile
 80021a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a6:	f383 8811 	msr	BASEPRI, r3
 80021aa:	f3bf 8f6f 	isb	sy
 80021ae:	f3bf 8f4f 	dsb	sy
 80021b2:	613b      	str	r3, [r7, #16]
    }
 80021b4:	bf00      	nop
 80021b6:	e7fe      	b.n	80021b6 <prvInitialiseNewTask+0xc0>
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80021b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d901      	bls.n	80021c2 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80021be:	2304      	movs	r3, #4
 80021c0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80021c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021c6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80021c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021cc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80021ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d0:	2200      	movs	r2, #0
 80021d2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80021d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d6:	3304      	adds	r3, #4
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fbab 	bl	8001934 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80021de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e0:	3318      	adds	r3, #24
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fba6 	bl	8001934 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80021e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021ec:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f0:	f1c3 0205 	rsb	r2, r3, #5
 80021f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80021f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80021fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002200:	3350      	adds	r3, #80	; 0x50
 8002202:	2204      	movs	r2, #4
 8002204:	2100      	movs	r1, #0
 8002206:	4618      	mov	r0, r3
 8002208:	f003 fcd8 	bl	8005bbc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800220c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220e:	3354      	adds	r3, #84	; 0x54
 8002210:	2201      	movs	r2, #1
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f003 fcd1 	bl	8005bbc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	68f9      	ldr	r1, [r7, #12]
 800221e:	69b8      	ldr	r0, [r7, #24]
 8002220:	f001 f984 	bl	800352c <pxPortInitialiseStack>
 8002224:	4602      	mov	r2, r0
 8002226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002228:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800222a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002234:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002236:	bf00      	nop
 8002238:	3720      	adds	r7, #32
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002240:	b5b0      	push	{r4, r5, r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af02      	add	r7, sp, #8
 8002246:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002248:	f001 fb1c 	bl	8003884 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800224c:	4b4f      	ldr	r3, [pc, #316]	; (800238c <prvAddNewTaskToReadyList+0x14c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	3301      	adds	r3, #1
 8002252:	4a4e      	ldr	r2, [pc, #312]	; (800238c <prvAddNewTaskToReadyList+0x14c>)
 8002254:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002256:	4b4e      	ldr	r3, [pc, #312]	; (8002390 <prvAddNewTaskToReadyList+0x150>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800225e:	4a4c      	ldr	r2, [pc, #304]	; (8002390 <prvAddNewTaskToReadyList+0x150>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002264:	4b49      	ldr	r3, [pc, #292]	; (800238c <prvAddNewTaskToReadyList+0x14c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d110      	bne.n	800228e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800226c:	f000 fd96 	bl	8002d9c <prvInitialiseTaskLists>
 8002270:	e00d      	b.n	800228e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002272:	4b48      	ldr	r3, [pc, #288]	; (8002394 <prvAddNewTaskToReadyList+0x154>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d109      	bne.n	800228e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800227a:	4b45      	ldr	r3, [pc, #276]	; (8002390 <prvAddNewTaskToReadyList+0x150>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002284:	429a      	cmp	r2, r3
 8002286:	d802      	bhi.n	800228e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002288:	4a41      	ldr	r2, [pc, #260]	; (8002390 <prvAddNewTaskToReadyList+0x150>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800228e:	4b42      	ldr	r3, [pc, #264]	; (8002398 <prvAddNewTaskToReadyList+0x158>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	3301      	adds	r3, #1
 8002294:	4a40      	ldr	r2, [pc, #256]	; (8002398 <prvAddNewTaskToReadyList+0x158>)
 8002296:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002298:	4b3f      	ldr	r3, [pc, #252]	; (8002398 <prvAddNewTaskToReadyList+0x158>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d016      	beq.n	80022d4 <prvAddNewTaskToReadyList+0x94>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f003 f9c7 	bl	800563c <SEGGER_SYSVIEW_OnTaskCreate>
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	461d      	mov	r5, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	461c      	mov	r4, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	1ae3      	subs	r3, r4, r3
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	462b      	mov	r3, r5
 80022d0:	f001 feaa 	bl	8004028 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 fa34 	bl	8005744 <SEGGER_SYSVIEW_OnTaskStartReady>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	2201      	movs	r2, #1
 80022e2:	409a      	lsls	r2, r3
 80022e4:	4b2d      	ldr	r3, [pc, #180]	; (800239c <prvAddNewTaskToReadyList+0x15c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	4a2c      	ldr	r2, [pc, #176]	; (800239c <prvAddNewTaskToReadyList+0x15c>)
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f2:	492b      	ldr	r1, [pc, #172]	; (80023a0 <prvAddNewTaskToReadyList+0x160>)
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	3304      	adds	r3, #4
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	3204      	adds	r2, #4
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	1d1a      	adds	r2, r3, #4
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4a1b      	ldr	r2, [pc, #108]	; (80023a0 <prvAddNewTaskToReadyList+0x160>)
 8002332:	441a      	add	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	615a      	str	r2, [r3, #20]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233c:	4918      	ldr	r1, [pc, #96]	; (80023a0 <prvAddNewTaskToReadyList+0x160>)
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	1c59      	adds	r1, r3, #1
 800234c:	4814      	ldr	r0, [pc, #80]	; (80023a0 <prvAddNewTaskToReadyList+0x160>)
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4403      	add	r3, r0
 8002358:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800235a:	f001 fac3 	bl	80038e4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800235e:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <prvAddNewTaskToReadyList+0x154>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00e      	beq.n	8002384 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <prvAddNewTaskToReadyList+0x150>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	429a      	cmp	r2, r3
 8002372:	d207      	bcs.n	8002384 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <prvAddNewTaskToReadyList+0x164>)
 8002376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	f3bf 8f4f 	dsb	sy
 8002380:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bdb0      	pop	{r4, r5, r7, pc}
 800238c:	2000016c 	.word	0x2000016c
 8002390:	20000094 	.word	0x20000094
 8002394:	20000178 	.word	0x20000178
 8002398:	20000188 	.word	0x20000188
 800239c:	20000174 	.word	0x20000174
 80023a0:	20000098 	.word	0x20000098
 80023a4:	e000ed04 	.word	0xe000ed04

080023a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80023ae:	4b27      	ldr	r3, [pc, #156]	; (800244c <vTaskStartScheduler+0xa4>)
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	2300      	movs	r3, #0
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2300      	movs	r3, #0
 80023b8:	2282      	movs	r2, #130	; 0x82
 80023ba:	4925      	ldr	r1, [pc, #148]	; (8002450 <vTaskStartScheduler+0xa8>)
 80023bc:	4825      	ldr	r0, [pc, #148]	; (8002454 <vTaskStartScheduler+0xac>)
 80023be:	f7ff fe59 	bl	8002074 <xTaskCreate>
 80023c2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d102      	bne.n	80023d0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80023ca:	f000 fe2b 	bl	8003024 <xTimerCreateTimerTask>
 80023ce:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d124      	bne.n	8002420 <vTaskStartScheduler+0x78>
        __asm volatile
 80023d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023da:	f383 8811 	msr	BASEPRI, r3
 80023de:	f3bf 8f6f 	isb	sy
 80023e2:	f3bf 8f4f 	dsb	sy
 80023e6:	60bb      	str	r3, [r7, #8]
    }
 80023e8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80023ea:	4b1b      	ldr	r3, [pc, #108]	; (8002458 <vTaskStartScheduler+0xb0>)
 80023ec:	f04f 32ff 	mov.w	r2, #4294967295
 80023f0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80023f2:	4b1a      	ldr	r3, [pc, #104]	; (800245c <vTaskStartScheduler+0xb4>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80023f8:	4b19      	ldr	r3, [pc, #100]	; (8002460 <vTaskStartScheduler+0xb8>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80023fe:	4b19      	ldr	r3, [pc, #100]	; (8002464 <vTaskStartScheduler+0xbc>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <vTaskStartScheduler+0xa4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d102      	bne.n	8002410 <vTaskStartScheduler+0x68>
 800240a:	f003 f8fb 	bl	8005604 <SEGGER_SYSVIEW_OnIdle>
 800240e:	e004      	b.n	800241a <vTaskStartScheduler+0x72>
 8002410:	4b14      	ldr	r3, [pc, #80]	; (8002464 <vTaskStartScheduler+0xbc>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f003 f953 	bl	80056c0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800241a:	f001 f913 	bl	8003644 <xPortStartScheduler>
 800241e:	e00e      	b.n	800243e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002426:	d10a      	bne.n	800243e <vTaskStartScheduler+0x96>
        __asm volatile
 8002428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242c:	f383 8811 	msr	BASEPRI, r3
 8002430:	f3bf 8f6f 	isb	sy
 8002434:	f3bf 8f4f 	dsb	sy
 8002438:	607b      	str	r3, [r7, #4]
    }
 800243a:	bf00      	nop
 800243c:	e7fe      	b.n	800243c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800243e:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <vTaskStartScheduler+0xc0>)
 8002440:	681b      	ldr	r3, [r3, #0]
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000190 	.word	0x20000190
 8002450:	080065a8 	.word	0x080065a8
 8002454:	08002d6d 	.word	0x08002d6d
 8002458:	2000018c 	.word	0x2000018c
 800245c:	20000178 	.word	0x20000178
 8002460:	20000170 	.word	0x20000170
 8002464:	20000094 	.word	0x20000094
 8002468:	2000000c 	.word	0x2000000c

0800246c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <vTaskSuspendAll+0x18>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	3301      	adds	r3, #1
 8002476:	4a03      	ldr	r2, [pc, #12]	; (8002484 <vTaskSuspendAll+0x18>)
 8002478:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	20000194 	.word	0x20000194

08002488 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002496:	4b73      	ldr	r3, [pc, #460]	; (8002664 <xTaskResumeAll+0x1dc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10a      	bne.n	80024b4 <xTaskResumeAll+0x2c>
        __asm volatile
 800249e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a2:	f383 8811 	msr	BASEPRI, r3
 80024a6:	f3bf 8f6f 	isb	sy
 80024aa:	f3bf 8f4f 	dsb	sy
 80024ae:	607b      	str	r3, [r7, #4]
    }
 80024b0:	bf00      	nop
 80024b2:	e7fe      	b.n	80024b2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80024b4:	f001 f9e6 	bl	8003884 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80024b8:	4b6a      	ldr	r3, [pc, #424]	; (8002664 <xTaskResumeAll+0x1dc>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3b01      	subs	r3, #1
 80024be:	4a69      	ldr	r2, [pc, #420]	; (8002664 <xTaskResumeAll+0x1dc>)
 80024c0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024c2:	4b68      	ldr	r3, [pc, #416]	; (8002664 <xTaskResumeAll+0x1dc>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 80c4 	bne.w	8002654 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80024cc:	4b66      	ldr	r3, [pc, #408]	; (8002668 <xTaskResumeAll+0x1e0>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80bf 	beq.w	8002654 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024d6:	e08e      	b.n	80025f6 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024d8:	4b64      	ldr	r3, [pc, #400]	; (800266c <xTaskResumeAll+0x1e4>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	6a12      	ldr	r2, [r2, #32]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	69fa      	ldr	r2, [r7, #28]
 80024f6:	69d2      	ldr	r2, [r2, #28]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3318      	adds	r3, #24
 8002502:	429a      	cmp	r2, r3
 8002504:	d103      	bne.n	800250e <xTaskResumeAll+0x86>
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	6a1a      	ldr	r2, [r3, #32]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	2200      	movs	r2, #0
 8002512:	629a      	str	r2, [r3, #40]	; 0x28
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	1e5a      	subs	r2, r3, #1
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	68d2      	ldr	r2, [r2, #12]
 800252c:	609a      	str	r2, [r3, #8]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	69fa      	ldr	r2, [r7, #28]
 8002534:	6892      	ldr	r2, [r2, #8]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	3304      	adds	r3, #4
 8002540:	429a      	cmp	r2, r3
 8002542:	d103      	bne.n	800254c <xTaskResumeAll+0xc4>
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	605a      	str	r2, [r3, #4]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	2200      	movs	r2, #0
 8002550:	615a      	str	r2, [r3, #20]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	1e5a      	subs	r2, r3, #1
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	4618      	mov	r0, r3
 8002560:	f003 f8f0 	bl	8005744 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002568:	2201      	movs	r2, #1
 800256a:	409a      	lsls	r2, r3
 800256c:	4b40      	ldr	r3, [pc, #256]	; (8002670 <xTaskResumeAll+0x1e8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4313      	orrs	r3, r2
 8002572:	4a3f      	ldr	r2, [pc, #252]	; (8002670 <xTaskResumeAll+0x1e8>)
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800257a:	493e      	ldr	r1, [pc, #248]	; (8002674 <xTaskResumeAll+0x1ec>)
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	3304      	adds	r3, #4
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	69fa      	ldr	r2, [r7, #28]
 80025a0:	3204      	adds	r2, #4
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	1d1a      	adds	r2, r3, #4
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4a2e      	ldr	r2, [pc, #184]	; (8002674 <xTaskResumeAll+0x1ec>)
 80025ba:	441a      	add	r2, r3
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	615a      	str	r2, [r3, #20]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c4:	492b      	ldr	r1, [pc, #172]	; (8002674 <xTaskResumeAll+0x1ec>)
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	1c59      	adds	r1, r3, #1
 80025d4:	4827      	ldr	r0, [pc, #156]	; (8002674 <xTaskResumeAll+0x1ec>)
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4403      	add	r3, r0
 80025e0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e6:	4b24      	ldr	r3, [pc, #144]	; (8002678 <xTaskResumeAll+0x1f0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d302      	bcc.n	80025f6 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80025f0:	4b22      	ldr	r3, [pc, #136]	; (800267c <xTaskResumeAll+0x1f4>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025f6:	4b1d      	ldr	r3, [pc, #116]	; (800266c <xTaskResumeAll+0x1e4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f47f af6c 	bne.w	80024d8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002606:	f000 fc47 	bl	8002e98 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <xTaskResumeAll+0x1f8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d010      	beq.n	8002638 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002616:	f000 f859 	bl	80026cc <xTaskIncrementTick>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002620:	4b16      	ldr	r3, [pc, #88]	; (800267c <xTaskResumeAll+0x1f4>)
 8002622:	2201      	movs	r2, #1
 8002624:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	3b01      	subs	r3, #1
 800262a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f1      	bne.n	8002616 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002632:	4b13      	ldr	r3, [pc, #76]	; (8002680 <xTaskResumeAll+0x1f8>)
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002638:	4b10      	ldr	r3, [pc, #64]	; (800267c <xTaskResumeAll+0x1f4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d009      	beq.n	8002654 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002640:	2301      	movs	r3, #1
 8002642:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002644:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <xTaskResumeAll+0x1fc>)
 8002646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002654:	f001 f946 	bl	80038e4 <vPortExitCritical>

    return xAlreadyYielded;
 8002658:	69bb      	ldr	r3, [r7, #24]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3720      	adds	r7, #32
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000194 	.word	0x20000194
 8002668:	2000016c 	.word	0x2000016c
 800266c:	2000012c 	.word	0x2000012c
 8002670:	20000174 	.word	0x20000174
 8002674:	20000098 	.word	0x20000098
 8002678:	20000094 	.word	0x20000094
 800267c:	20000180 	.word	0x20000180
 8002680:	2000017c 	.word	0x2000017c
 8002684:	e000ed04 	.word	0xe000ed04

08002688 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800268e:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <xTaskGetTickCount+0x1c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002694:	687b      	ldr	r3, [r7, #4]
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20000170 	.word	0x20000170

080026a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026ae:	f001 f9d5 	bl	8003a5c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80026b2:	2300      	movs	r3, #0
 80026b4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80026b6:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <xTaskGetTickCountFromISR+0x20>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80026bc:	683b      	ldr	r3, [r7, #0]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000170 	.word	0x20000170

080026cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026d6:	4b7f      	ldr	r3, [pc, #508]	; (80028d4 <xTaskIncrementTick+0x208>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f040 80f0 	bne.w	80028c0 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80026e0:	4b7d      	ldr	r3, [pc, #500]	; (80028d8 <xTaskIncrementTick+0x20c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	3301      	adds	r3, #1
 80026e6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80026e8:	4a7b      	ldr	r2, [pc, #492]	; (80028d8 <xTaskIncrementTick+0x20c>)
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d120      	bne.n	8002736 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80026f4:	4b79      	ldr	r3, [pc, #484]	; (80028dc <xTaskIncrementTick+0x210>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <xTaskIncrementTick+0x48>
        __asm volatile
 80026fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002702:	f383 8811 	msr	BASEPRI, r3
 8002706:	f3bf 8f6f 	isb	sy
 800270a:	f3bf 8f4f 	dsb	sy
 800270e:	607b      	str	r3, [r7, #4]
    }
 8002710:	bf00      	nop
 8002712:	e7fe      	b.n	8002712 <xTaskIncrementTick+0x46>
 8002714:	4b71      	ldr	r3, [pc, #452]	; (80028dc <xTaskIncrementTick+0x210>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	4b71      	ldr	r3, [pc, #452]	; (80028e0 <xTaskIncrementTick+0x214>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a6f      	ldr	r2, [pc, #444]	; (80028dc <xTaskIncrementTick+0x210>)
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	4a6f      	ldr	r2, [pc, #444]	; (80028e0 <xTaskIncrementTick+0x214>)
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b6e      	ldr	r3, [pc, #440]	; (80028e4 <xTaskIncrementTick+0x218>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	3301      	adds	r3, #1
 800272e:	4a6d      	ldr	r2, [pc, #436]	; (80028e4 <xTaskIncrementTick+0x218>)
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	f000 fbb1 	bl	8002e98 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002736:	4b6c      	ldr	r3, [pc, #432]	; (80028e8 <xTaskIncrementTick+0x21c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6a3a      	ldr	r2, [r7, #32]
 800273c:	429a      	cmp	r2, r3
 800273e:	f0c0 80aa 	bcc.w	8002896 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002742:	4b66      	ldr	r3, [pc, #408]	; (80028dc <xTaskIncrementTick+0x210>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d104      	bne.n	8002756 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800274c:	4b66      	ldr	r3, [pc, #408]	; (80028e8 <xTaskIncrementTick+0x21c>)
 800274e:	f04f 32ff 	mov.w	r2, #4294967295
 8002752:	601a      	str	r2, [r3, #0]
                    break;
 8002754:	e09f      	b.n	8002896 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002756:	4b61      	ldr	r3, [pc, #388]	; (80028dc <xTaskIncrementTick+0x210>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002766:	6a3a      	ldr	r2, [r7, #32]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	429a      	cmp	r2, r3
 800276c:	d203      	bcs.n	8002776 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800276e:	4a5e      	ldr	r2, [pc, #376]	; (80028e8 <xTaskIncrementTick+0x21c>)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002774:	e08f      	b.n	8002896 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	68d2      	ldr	r2, [r2, #12]
 8002784:	609a      	str	r2, [r3, #8]
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	6892      	ldr	r2, [r2, #8]
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	3304      	adds	r3, #4
 8002798:	429a      	cmp	r2, r3
 800279a:	d103      	bne.n	80027a4 <xTaskIncrementTick+0xd8>
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	2200      	movs	r2, #0
 80027a8:	615a      	str	r2, [r3, #20]
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	1e5a      	subs	r2, r3, #1
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01e      	beq.n	80027fa <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	6a12      	ldr	r2, [r2, #32]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	69d2      	ldr	r2, [r2, #28]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	3318      	adds	r3, #24
 80027de:	429a      	cmp	r2, r3
 80027e0:	d103      	bne.n	80027ea <xTaskIncrementTick+0x11e>
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	6a1a      	ldr	r2, [r3, #32]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	2200      	movs	r2, #0
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	1e5a      	subs	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f002 ffa1 	bl	8005744 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	2201      	movs	r2, #1
 8002808:	409a      	lsls	r2, r3
 800280a:	4b38      	ldr	r3, [pc, #224]	; (80028ec <xTaskIncrementTick+0x220>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4313      	orrs	r3, r2
 8002810:	4a36      	ldr	r2, [pc, #216]	; (80028ec <xTaskIncrementTick+0x220>)
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002818:	4935      	ldr	r1, [pc, #212]	; (80028f0 <xTaskIncrementTick+0x224>)
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	3304      	adds	r3, #4
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	60da      	str	r2, [r3, #12]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	3204      	adds	r2, #4
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	1d1a      	adds	r2, r3, #4
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4a26      	ldr	r2, [pc, #152]	; (80028f0 <xTaskIncrementTick+0x224>)
 8002858:	441a      	add	r2, r3
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	615a      	str	r2, [r3, #20]
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002862:	4923      	ldr	r1, [pc, #140]	; (80028f0 <xTaskIncrementTick+0x224>)
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	1c59      	adds	r1, r3, #1
 8002872:	481f      	ldr	r0, [pc, #124]	; (80028f0 <xTaskIncrementTick+0x224>)
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4403      	add	r3, r0
 800287e:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002884:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <xTaskIncrementTick+0x228>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288a:	429a      	cmp	r2, r3
 800288c:	f4ff af59 	bcc.w	8002742 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002890:	2301      	movs	r3, #1
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002894:	e755      	b.n	8002742 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002896:	4b17      	ldr	r3, [pc, #92]	; (80028f4 <xTaskIncrementTick+0x228>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289c:	4914      	ldr	r1, [pc, #80]	; (80028f0 <xTaskIncrementTick+0x224>)
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d901      	bls.n	80028b2 <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 80028ae:	2301      	movs	r3, #1
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80028b2:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <xTaskIncrementTick+0x22c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d007      	beq.n	80028ca <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 80028ba:	2301      	movs	r3, #1
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
 80028be:	e004      	b.n	80028ca <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80028c0:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <xTaskIncrementTick+0x230>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3301      	adds	r3, #1
 80028c6:	4a0d      	ldr	r2, [pc, #52]	; (80028fc <xTaskIncrementTick+0x230>)
 80028c8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3728      	adds	r7, #40	; 0x28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000194 	.word	0x20000194
 80028d8:	20000170 	.word	0x20000170
 80028dc:	20000124 	.word	0x20000124
 80028e0:	20000128 	.word	0x20000128
 80028e4:	20000184 	.word	0x20000184
 80028e8:	2000018c 	.word	0x2000018c
 80028ec:	20000174 	.word	0x20000174
 80028f0:	20000098 	.word	0x20000098
 80028f4:	20000094 	.word	0x20000094
 80028f8:	20000180 	.word	0x20000180
 80028fc:	2000017c 	.word	0x2000017c

08002900 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002906:	4b2d      	ldr	r3, [pc, #180]	; (80029bc <vTaskSwitchContext+0xbc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800290e:	4b2c      	ldr	r3, [pc, #176]	; (80029c0 <vTaskSwitchContext+0xc0>)
 8002910:	2201      	movs	r2, #1
 8002912:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002914:	e04d      	b.n	80029b2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002916:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <vTaskSwitchContext+0xc0>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800291c:	4b29      	ldr	r3, [pc, #164]	; (80029c4 <vTaskSwitchContext+0xc4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800292a:	7afb      	ldrb	r3, [r7, #11]
 800292c:	f1c3 031f 	rsb	r3, r3, #31
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	4925      	ldr	r1, [pc, #148]	; (80029c8 <vTaskSwitchContext+0xc8>)
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10a      	bne.n	800295c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294a:	f383 8811 	msr	BASEPRI, r3
 800294e:	f3bf 8f6f 	isb	sy
 8002952:	f3bf 8f4f 	dsb	sy
 8002956:	607b      	str	r3, [r7, #4]
    }
 8002958:	bf00      	nop
 800295a:	e7fe      	b.n	800295a <vTaskSwitchContext+0x5a>
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4a18      	ldr	r2, [pc, #96]	; (80029c8 <vTaskSwitchContext+0xc8>)
 8002968:	4413      	add	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	3308      	adds	r3, #8
 800297e:	429a      	cmp	r2, r3
 8002980:	d104      	bne.n	800298c <vTaskSwitchContext+0x8c>
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	605a      	str	r2, [r3, #4]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	4a0e      	ldr	r2, [pc, #56]	; (80029cc <vTaskSwitchContext+0xcc>)
 8002994:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002996:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <vTaskSwitchContext+0xcc>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <vTaskSwitchContext+0xd0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d102      	bne.n	80029a8 <vTaskSwitchContext+0xa8>
 80029a2:	f002 fe2f 	bl	8005604 <SEGGER_SYSVIEW_OnIdle>
}
 80029a6:	e004      	b.n	80029b2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <vTaskSwitchContext+0xcc>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f002 fe87 	bl	80056c0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80029b2:	bf00      	nop
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000194 	.word	0x20000194
 80029c0:	20000180 	.word	0x20000180
 80029c4:	20000174 	.word	0x20000174
 80029c8:	20000098 	.word	0x20000098
 80029cc:	20000094 	.word	0x20000094
 80029d0:	20000190 	.word	0x20000190

080029d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10a      	bne.n	80029fa <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80029e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e8:	f383 8811 	msr	BASEPRI, r3
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	60fb      	str	r3, [r7, #12]
    }
 80029f6:	bf00      	nop
 80029f8:	e7fe      	b.n	80029f8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80029fa:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <vTaskPlaceOnEventList+0x44>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	3318      	adds	r3, #24
 8002a00:	4619      	mov	r1, r3
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7fe ffa3 	bl	800194e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002a08:	2101      	movs	r1, #1
 8002a0a:	6838      	ldr	r0, [r7, #0]
 8002a0c:	f000 fa7e 	bl	8002f0c <prvAddCurrentTaskToDelayedList>
}
 8002a10:	bf00      	nop
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000094 	.word	0x20000094

08002a1c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10a      	bne.n	8002a44 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a32:	f383 8811 	msr	BASEPRI, r3
 8002a36:	f3bf 8f6f 	isb	sy
 8002a3a:	f3bf 8f4f 	dsb	sy
 8002a3e:	613b      	str	r3, [r7, #16]
    }
 8002a40:	bf00      	nop
 8002a42:	e7fe      	b.n	8002a42 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	61da      	str	r2, [r3, #28]
 8002a52:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	6892      	ldr	r2, [r2, #8]
 8002a5a:	621a      	str	r2, [r3, #32]
 8002a5c:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	3218      	adds	r2, #24
 8002a66:	605a      	str	r2, [r3, #4]
 8002a68:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f103 0218 	add.w	r2, r3, #24
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a90:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002a92:	2024      	movs	r0, #36	; 0x24
 8002a94:	f002 f8b8 	bl	8004c08 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	68b8      	ldr	r0, [r7, #8]
 8002a9c:	f000 fa36 	bl	8002f0c <prvAddCurrentTaskToDelayedList>
    }
 8002aa0:	bf00      	nop
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20000094 	.word	0x20000094

08002aac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	; 0x28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10a      	bne.n	8002ad8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac6:	f383 8811 	msr	BASEPRI, r3
 8002aca:	f3bf 8f6f 	isb	sy
 8002ace:	f3bf 8f4f 	dsb	sy
 8002ad2:	60fb      	str	r3, [r7, #12]
    }
 8002ad4:	bf00      	nop
 8002ad6:	e7fe      	b.n	8002ad6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	6a3a      	ldr	r2, [r7, #32]
 8002ae4:	6a12      	ldr	r2, [r2, #32]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	6a3a      	ldr	r2, [r7, #32]
 8002aee:	69d2      	ldr	r2, [r2, #28]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	3318      	adds	r3, #24
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d103      	bne.n	8002b06 <xTaskRemoveFromEventList+0x5a>
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	6a1a      	ldr	r2, [r3, #32]
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	1e5a      	subs	r2, r3, #1
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b16:	4b4b      	ldr	r3, [pc, #300]	; (8002c44 <xTaskRemoveFromEventList+0x198>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d162      	bne.n	8002be4 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	6a3a      	ldr	r2, [r7, #32]
 8002b2a:	68d2      	ldr	r2, [r2, #12]
 8002b2c:	609a      	str	r2, [r3, #8]
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	6a3a      	ldr	r2, [r7, #32]
 8002b34:	6892      	ldr	r2, [r2, #8]
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d103      	bne.n	8002b4c <xTaskRemoveFromEventList+0xa0>
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	615a      	str	r2, [r3, #20]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	1e5a      	subs	r2, r3, #1
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f002 fdf0 	bl	8005744 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	2201      	movs	r2, #1
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <xTaskRemoveFromEventList+0x19c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	4a35      	ldr	r2, [pc, #212]	; (8002c48 <xTaskRemoveFromEventList+0x19c>)
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b7a:	4934      	ldr	r1, [pc, #208]	; (8002c4c <xTaskRemoveFromEventList+0x1a0>)
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	3304      	adds	r3, #4
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	6a3a      	ldr	r2, [r7, #32]
 8002ba0:	3204      	adds	r2, #4
 8002ba2:	605a      	str	r2, [r3, #4]
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	1d1a      	adds	r2, r3, #4
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4a24      	ldr	r2, [pc, #144]	; (8002c4c <xTaskRemoveFromEventList+0x1a0>)
 8002bba:	441a      	add	r2, r3
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	615a      	str	r2, [r3, #20]
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc4:	4921      	ldr	r1, [pc, #132]	; (8002c4c <xTaskRemoveFromEventList+0x1a0>)
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	1c59      	adds	r1, r3, #1
 8002bd4:	481d      	ldr	r0, [pc, #116]	; (8002c4c <xTaskRemoveFromEventList+0x1a0>)
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4403      	add	r3, r0
 8002be0:	6019      	str	r1, [r3, #0]
 8002be2:	e01b      	b.n	8002c1c <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002be4:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <xTaskRemoveFromEventList+0x1a4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	61bb      	str	r3, [r7, #24]
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	61da      	str	r2, [r3, #28]
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	621a      	str	r2, [r3, #32]
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	6a3a      	ldr	r2, [r7, #32]
 8002bfe:	3218      	adds	r2, #24
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	f103 0218 	add.w	r2, r3, #24
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	4a10      	ldr	r2, [pc, #64]	; (8002c50 <xTaskRemoveFromEventList+0x1a4>)
 8002c10:	629a      	str	r2, [r3, #40]	; 0x28
 8002c12:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <xTaskRemoveFromEventList+0x1a4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3301      	adds	r3, #1
 8002c18:	4a0d      	ldr	r2, [pc, #52]	; (8002c50 <xTaskRemoveFromEventList+0x1a4>)
 8002c1a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <xTaskRemoveFromEventList+0x1a8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d905      	bls.n	8002c36 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <xTaskRemoveFromEventList+0x1ac>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	e001      	b.n	8002c3a <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3728      	adds	r7, #40	; 0x28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000194 	.word	0x20000194
 8002c48:	20000174 	.word	0x20000174
 8002c4c:	20000098 	.word	0x20000098
 8002c50:	2000012c 	.word	0x2000012c
 8002c54:	20000094 	.word	0x20000094
 8002c58:	20000180 	.word	0x20000180

08002c5c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <vTaskInternalSetTimeOutState+0x24>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <vTaskInternalSetTimeOutState+0x28>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	605a      	str	r2, [r3, #4]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	20000184 	.word	0x20000184
 8002c84:	20000170 	.word	0x20000170

08002c88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10a      	bne.n	8002cae <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9c:	f383 8811 	msr	BASEPRI, r3
 8002ca0:	f3bf 8f6f 	isb	sy
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	613b      	str	r3, [r7, #16]
    }
 8002caa:	bf00      	nop
 8002cac:	e7fe      	b.n	8002cac <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10a      	bne.n	8002cca <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	60fb      	str	r3, [r7, #12]
    }
 8002cc6:	bf00      	nop
 8002cc8:	e7fe      	b.n	8002cc8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002cca:	f000 fddb 	bl	8003884 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002cce:	4b1f      	ldr	r3, [pc, #124]	; (8002d4c <xTaskCheckForTimeOut+0xc4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce6:	d102      	bne.n	8002cee <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	e026      	b.n	8002d3c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4b17      	ldr	r3, [pc, #92]	; (8002d50 <xTaskCheckForTimeOut+0xc8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d00a      	beq.n	8002d10 <xTaskCheckForTimeOut+0x88>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d305      	bcc.n	8002d10 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002d04:	2301      	movs	r3, #1
 8002d06:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	e015      	b.n	8002d3c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d20b      	bcs.n	8002d32 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	1ad2      	subs	r2, r2, r3
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff ff98 	bl	8002c5c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
 8002d30:	e004      	b.n	8002d3c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002d3c:	f000 fdd2 	bl	80038e4 <vPortExitCritical>

    return xReturn;
 8002d40:	69fb      	ldr	r3, [r7, #28]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3720      	adds	r7, #32
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000170 	.word	0x20000170
 8002d50:	20000184 	.word	0x20000184

08002d54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002d58:	4b03      	ldr	r3, [pc, #12]	; (8002d68 <vTaskMissedYield+0x14>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]
}
 8002d5e:	bf00      	nop
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	20000180 	.word	0x20000180

08002d6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002d74:	f000 f852 	bl	8002e1c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002d78:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <prvIdleTask+0x28>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d9f9      	bls.n	8002d74 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <prvIdleTask+0x2c>)
 8002d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002d90:	e7f0      	b.n	8002d74 <prvIdleTask+0x8>
 8002d92:	bf00      	nop
 8002d94:	20000098 	.word	0x20000098
 8002d98:	e000ed04 	.word	0xe000ed04

08002d9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002da2:	2300      	movs	r3, #0
 8002da4:	607b      	str	r3, [r7, #4]
 8002da6:	e00c      	b.n	8002dc2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4a12      	ldr	r2, [pc, #72]	; (8002dfc <prvInitialiseTaskLists+0x60>)
 8002db4:	4413      	add	r3, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fe fd9c 	bl	80018f4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	607b      	str	r3, [r7, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d9ef      	bls.n	8002da8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002dc8:	480d      	ldr	r0, [pc, #52]	; (8002e00 <prvInitialiseTaskLists+0x64>)
 8002dca:	f7fe fd93 	bl	80018f4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002dce:	480d      	ldr	r0, [pc, #52]	; (8002e04 <prvInitialiseTaskLists+0x68>)
 8002dd0:	f7fe fd90 	bl	80018f4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002dd4:	480c      	ldr	r0, [pc, #48]	; (8002e08 <prvInitialiseTaskLists+0x6c>)
 8002dd6:	f7fe fd8d 	bl	80018f4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002dda:	480c      	ldr	r0, [pc, #48]	; (8002e0c <prvInitialiseTaskLists+0x70>)
 8002ddc:	f7fe fd8a 	bl	80018f4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002de0:	480b      	ldr	r0, [pc, #44]	; (8002e10 <prvInitialiseTaskLists+0x74>)
 8002de2:	f7fe fd87 	bl	80018f4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002de6:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <prvInitialiseTaskLists+0x78>)
 8002de8:	4a05      	ldr	r2, [pc, #20]	; (8002e00 <prvInitialiseTaskLists+0x64>)
 8002dea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002dec:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <prvInitialiseTaskLists+0x7c>)
 8002dee:	4a05      	ldr	r2, [pc, #20]	; (8002e04 <prvInitialiseTaskLists+0x68>)
 8002df0:	601a      	str	r2, [r3, #0]
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000098 	.word	0x20000098
 8002e00:	200000fc 	.word	0x200000fc
 8002e04:	20000110 	.word	0x20000110
 8002e08:	2000012c 	.word	0x2000012c
 8002e0c:	20000140 	.word	0x20000140
 8002e10:	20000158 	.word	0x20000158
 8002e14:	20000124 	.word	0x20000124
 8002e18:	20000128 	.word	0x20000128

08002e1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e22:	e019      	b.n	8002e58 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002e24:	f000 fd2e 	bl	8003884 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e28:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <prvCheckTasksWaitingTermination+0x50>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3304      	adds	r3, #4
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fe fdc3 	bl	80019c0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <prvCheckTasksWaitingTermination+0x54>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	4a0b      	ldr	r2, [pc, #44]	; (8002e70 <prvCheckTasksWaitingTermination+0x54>)
 8002e42:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <prvCheckTasksWaitingTermination+0x58>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <prvCheckTasksWaitingTermination+0x58>)
 8002e4c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002e4e:	f000 fd49 	bl	80038e4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f810 	bl	8002e78 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e58:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <prvCheckTasksWaitingTermination+0x58>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1e1      	bne.n	8002e24 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002e60:	bf00      	nop
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000140 	.word	0x20000140
 8002e70:	2000016c 	.word	0x2000016c
 8002e74:	20000154 	.word	0x20000154

08002e78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 ff09 	bl	8003c9c <vPortFree>
                vPortFree( pxTCB );
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 ff06 	bl	8003c9c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <prvResetNextTaskUnblockTime+0x30>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d104      	bne.n	8002eb0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <prvResetNextTaskUnblockTime+0x34>)
 8002ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002eae:	e005      	b.n	8002ebc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <prvResetNextTaskUnblockTime+0x30>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <prvResetNextTaskUnblockTime+0x34>)
 8002eba:	6013      	str	r3, [r2, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	20000124 	.word	0x20000124
 8002ecc:	2000018c 	.word	0x2000018c

08002ed0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <xTaskGetSchedulerState+0x34>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d102      	bne.n	8002ee4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	e008      	b.n	8002ef6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ee4:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <xTaskGetSchedulerState+0x38>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d102      	bne.n	8002ef2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002eec:	2302      	movs	r3, #2
 8002eee:	607b      	str	r3, [r7, #4]
 8002ef0:	e001      	b.n	8002ef6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002ef6:	687b      	ldr	r3, [r7, #4]
    }
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	20000178 	.word	0x20000178
 8002f08:	20000194 	.word	0x20000194

08002f0c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002f16:	4b3c      	ldr	r3, [pc, #240]	; (8003008 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f1c:	4b3b      	ldr	r3, [pc, #236]	; (800300c <prvAddCurrentTaskToDelayedList+0x100>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3304      	adds	r3, #4
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe fd4c 	bl	80019c0 <uxListRemove>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10b      	bne.n	8002f46 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002f2e:	4b37      	ldr	r3, [pc, #220]	; (800300c <prvAddCurrentTaskToDelayedList+0x100>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	2201      	movs	r2, #1
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43da      	mvns	r2, r3
 8002f3c:	4b34      	ldr	r3, [pc, #208]	; (8003010 <prvAddCurrentTaskToDelayedList+0x104>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4013      	ands	r3, r2
 8002f42:	4a33      	ldr	r2, [pc, #204]	; (8003010 <prvAddCurrentTaskToDelayedList+0x104>)
 8002f44:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4c:	d124      	bne.n	8002f98 <prvAddCurrentTaskToDelayedList+0x8c>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d021      	beq.n	8002f98 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f54:	4b2f      	ldr	r3, [pc, #188]	; (8003014 <prvAddCurrentTaskToDelayedList+0x108>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	4b2c      	ldr	r3, [pc, #176]	; (800300c <prvAddCurrentTaskToDelayedList+0x100>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	4b2a      	ldr	r3, [pc, #168]	; (800300c <prvAddCurrentTaskToDelayedList+0x100>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	6892      	ldr	r2, [r2, #8]
 8002f6a:	60da      	str	r2, [r3, #12]
 8002f6c:	4b27      	ldr	r3, [pc, #156]	; (800300c <prvAddCurrentTaskToDelayedList+0x100>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	3204      	adds	r2, #4
 8002f76:	605a      	str	r2, [r3, #4]
 8002f78:	4b24      	ldr	r3, [pc, #144]	; (800300c <prvAddCurrentTaskToDelayedList+0x100>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	1d1a      	adds	r2, r3, #4
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	609a      	str	r2, [r3, #8]
 8002f82:	4b22      	ldr	r3, [pc, #136]	; (800300c <prvAddCurrentTaskToDelayedList+0x100>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a23      	ldr	r2, [pc, #140]	; (8003014 <prvAddCurrentTaskToDelayedList+0x108>)
 8002f88:	615a      	str	r2, [r3, #20]
 8002f8a:	4b22      	ldr	r3, [pc, #136]	; (8003014 <prvAddCurrentTaskToDelayedList+0x108>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	4a20      	ldr	r2, [pc, #128]	; (8003014 <prvAddCurrentTaskToDelayedList+0x108>)
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002f96:	e032      	b.n	8002ffe <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002fa0:	4b1a      	ldr	r3, [pc, #104]	; (800300c <prvAddCurrentTaskToDelayedList+0x100>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d20f      	bcs.n	8002fd0 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002fb0:	4b16      	ldr	r3, [pc, #88]	; (800300c <prvAddCurrentTaskToDelayedList+0x100>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2104      	movs	r1, #4
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f002 fc06 	bl	80057c8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fbc:	4b16      	ldr	r3, [pc, #88]	; (8003018 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	4b12      	ldr	r3, [pc, #72]	; (800300c <prvAddCurrentTaskToDelayedList+0x100>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4610      	mov	r0, r2
 8002fca:	f7fe fcc0 	bl	800194e <vListInsert>
}
 8002fce:	e016      	b.n	8002ffe <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002fd0:	4b0e      	ldr	r3, [pc, #56]	; (800300c <prvAddCurrentTaskToDelayedList+0x100>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2104      	movs	r1, #4
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f002 fbf6 	bl	80057c8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	; (800301c <prvAddCurrentTaskToDelayedList+0x110>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b0a      	ldr	r3, [pc, #40]	; (800300c <prvAddCurrentTaskToDelayedList+0x100>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4610      	mov	r0, r2
 8002fea:	f7fe fcb0 	bl	800194e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002fee:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <prvAddCurrentTaskToDelayedList+0x114>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d202      	bcs.n	8002ffe <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8002ff8:	4a09      	ldr	r2, [pc, #36]	; (8003020 <prvAddCurrentTaskToDelayedList+0x114>)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6013      	str	r3, [r2, #0]
}
 8002ffe:	bf00      	nop
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000170 	.word	0x20000170
 800300c:	20000094 	.word	0x20000094
 8003010:	20000174 	.word	0x20000174
 8003014:	20000158 	.word	0x20000158
 8003018:	20000128 	.word	0x20000128
 800301c:	20000124 	.word	0x20000124
 8003020:	2000018c 	.word	0x2000018c

08003024 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800302a:	2300      	movs	r3, #0
 800302c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800302e:	f000 fa47 	bl	80034c0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003032:	4b11      	ldr	r3, [pc, #68]	; (8003078 <xTimerCreateTimerTask+0x54>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00b      	beq.n	8003052 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800303a:	4b10      	ldr	r3, [pc, #64]	; (800307c <xTimerCreateTimerTask+0x58>)
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	2302      	movs	r3, #2
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	2300      	movs	r3, #0
 8003044:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003048:	490d      	ldr	r1, [pc, #52]	; (8003080 <xTimerCreateTimerTask+0x5c>)
 800304a:	480e      	ldr	r0, [pc, #56]	; (8003084 <xTimerCreateTimerTask+0x60>)
 800304c:	f7ff f812 	bl	8002074 <xTaskCreate>
 8003050:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10a      	bne.n	800306e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305c:	f383 8811 	msr	BASEPRI, r3
 8003060:	f3bf 8f6f 	isb	sy
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	603b      	str	r3, [r7, #0]
    }
 800306a:	bf00      	nop
 800306c:	e7fe      	b.n	800306c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800306e:	687b      	ldr	r3, [r7, #4]
    }
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	200001c8 	.word	0x200001c8
 800307c:	200001cc 	.word	0x200001cc
 8003080:	080065b0 	.word	0x080065b0
 8003084:	0800312d 	.word	0x0800312d

08003088 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while ( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003094:	e008      	b.n	80030a8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	4413      	add	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	4798      	blx	r3
        while ( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	699a      	ldr	r2, [r3, #24]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	18d1      	adds	r1, r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f8dd 	bl	8003274 <prvInsertTimerInActiveList>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1ea      	bne.n	8003096 <prvReloadTimer+0xe>
        }
    }
 80030c0:	bf00      	nop
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030d6:	4b14      	ldr	r3, [pc, #80]	; (8003128 <prvProcessExpiredTimer+0x5c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	3304      	adds	r3, #4
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fe fc6b 	bl	80019c0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f7ff ffc3 	bl	8003088 <prvReloadTimer>
 8003102:	e008      	b.n	8003116 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800310a:	f023 0301 	bic.w	r3, r3, #1
 800310e:	b2da      	uxtb	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	4798      	blx	r3
    }
 800311e:	bf00      	nop
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	200001c0 	.word	0x200001c0

0800312c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003134:	f107 0308 	add.w	r3, r7, #8
 8003138:	4618      	mov	r0, r3
 800313a:	f000 f857 	bl	80031ec <prvGetNextExpireTime>
 800313e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	4619      	mov	r1, r3
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f803 	bl	8003150 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800314a:	f000 f8d5 	bl	80032f8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800314e:	e7f1      	b.n	8003134 <prvTimerTask+0x8>

08003150 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800315a:	f7ff f987 	bl	800246c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800315e:	f107 0308 	add.w	r3, r7, #8
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f866 	bl	8003234 <prvSampleTimeNow>
 8003168:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d130      	bne.n	80031d2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10a      	bne.n	800318c <prvProcessTimerOrBlockTask+0x3c>
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	429a      	cmp	r2, r3
 800317c:	d806      	bhi.n	800318c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800317e:	f7ff f983 	bl	8002488 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003182:	68f9      	ldr	r1, [r7, #12]
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff ffa1 	bl	80030cc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800318a:	e024      	b.n	80031d6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d008      	beq.n	80031a4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003192:	4b13      	ldr	r3, [pc, #76]	; (80031e0 <prvProcessTimerOrBlockTask+0x90>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <prvProcessTimerOrBlockTask+0x50>
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <prvProcessTimerOrBlockTask+0x52>
 80031a0:	2300      	movs	r3, #0
 80031a2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80031a4:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <prvProcessTimerOrBlockTask+0x94>)
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	4619      	mov	r1, r3
 80031b2:	f7fe ff2b 	bl	800200c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80031b6:	f7ff f967 	bl	8002488 <xTaskResumeAll>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10a      	bne.n	80031d6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80031c0:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <prvProcessTimerOrBlockTask+0x98>)
 80031c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	f3bf 8f6f 	isb	sy
    }
 80031d0:	e001      	b.n	80031d6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80031d2:	f7ff f959 	bl	8002488 <xTaskResumeAll>
    }
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	200001c4 	.word	0x200001c4
 80031e4:	200001c8 	.word	0x200001c8
 80031e8:	e000ed04 	.word	0xe000ed04

080031ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80031f4:	4b0e      	ldr	r3, [pc, #56]	; (8003230 <prvGetNextExpireTime+0x44>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <prvGetNextExpireTime+0x16>
 80031fe:	2201      	movs	r2, #1
 8003200:	e000      	b.n	8003204 <prvGetNextExpireTime+0x18>
 8003202:	2200      	movs	r2, #0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d105      	bne.n	800321c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003210:	4b07      	ldr	r3, [pc, #28]	; (8003230 <prvGetNextExpireTime+0x44>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	e001      	b.n	8003220 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003220:	68fb      	ldr	r3, [r7, #12]
    }
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	200001c0 	.word	0x200001c0

08003234 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800323c:	f7ff fa24 	bl	8002688 <xTaskGetTickCount>
 8003240:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003242:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <prvSampleTimeNow+0x3c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	429a      	cmp	r2, r3
 800324a:	d205      	bcs.n	8003258 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800324c:	f000 f912 	bl	8003474 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	e002      	b.n	800325e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800325e:	4a04      	ldr	r2, [pc, #16]	; (8003270 <prvSampleTimeNow+0x3c>)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003264:	68fb      	ldr	r3, [r7, #12]
    }
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	200001d0 	.word	0x200001d0

08003274 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	429a      	cmp	r2, r3
 8003298:	d812      	bhi.n	80032c0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	1ad2      	subs	r2, r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d302      	bcc.n	80032ae <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80032a8:	2301      	movs	r3, #1
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	e01b      	b.n	80032e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80032ae:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <prvInsertTimerInActiveList+0x7c>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	3304      	adds	r3, #4
 80032b6:	4619      	mov	r1, r3
 80032b8:	4610      	mov	r0, r2
 80032ba:	f7fe fb48 	bl	800194e <vListInsert>
 80032be:	e012      	b.n	80032e6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d206      	bcs.n	80032d6 <prvInsertTimerInActiveList+0x62>
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d302      	bcc.n	80032d6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80032d0:	2301      	movs	r3, #1
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	e007      	b.n	80032e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80032d6:	4b07      	ldr	r3, [pc, #28]	; (80032f4 <prvInsertTimerInActiveList+0x80>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	3304      	adds	r3, #4
 80032de:	4619      	mov	r1, r3
 80032e0:	4610      	mov	r0, r2
 80032e2:	f7fe fb34 	bl	800194e <vListInsert>
            }
        }

        return xProcessTimerNow;
 80032e6:	697b      	ldr	r3, [r7, #20]
    }
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	200001c4 	.word	0x200001c4
 80032f4:	200001c0 	.word	0x200001c0

080032f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80032fe:	e0a6      	b.n	800344e <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	f2c0 80a2 	blt.w	800344c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d004      	beq.n	800331e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	3304      	adds	r3, #4
 8003318:	4618      	mov	r0, r3
 800331a:	f7fe fb51 	bl	80019c0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800331e:	1d3b      	adds	r3, r7, #4
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff ff87 	bl	8003234 <prvSampleTimeNow>
 8003326:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	3b01      	subs	r3, #1
 800332c:	2b08      	cmp	r3, #8
 800332e:	f200 808e 	bhi.w	800344e <prvProcessReceivedCommands+0x156>
 8003332:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <prvProcessReceivedCommands+0x40>)
 8003334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003338:	0800335d 	.word	0x0800335d
 800333c:	0800335d 	.word	0x0800335d
 8003340:	080033c5 	.word	0x080033c5
 8003344:	080033d9 	.word	0x080033d9
 8003348:	08003423 	.word	0x08003423
 800334c:	0800335d 	.word	0x0800335d
 8003350:	0800335d 	.word	0x0800335d
 8003354:	080033c5 	.word	0x080033c5
 8003358:	080033d9 	.word	0x080033d9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	b2da      	uxtb	r2, r3
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	18d1      	adds	r1, r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	69f8      	ldr	r0, [r7, #28]
 800337c:	f7ff ff7a 	bl	8003274 <prvInsertTimerInActiveList>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d063      	beq.n	800344e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d009      	beq.n	80033a8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	4413      	add	r3, r2
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4619      	mov	r1, r3
 80033a0:	69f8      	ldr	r0, [r7, #28]
 80033a2:	f7ff fe71 	bl	8003088 <prvReloadTimer>
 80033a6:	e008      	b.n	80033ba <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	69f8      	ldr	r0, [r7, #28]
 80033c0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80033c2:	e044      	b.n	800344e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033ca:	f023 0301 	bic.w	r3, r3, #1
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80033d6:	e03a      	b.n	800344e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10a      	bne.n	800340e <prvProcessReceivedCommands+0x116>
        __asm volatile
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	617b      	str	r3, [r7, #20]
    }
 800340a:	bf00      	nop
 800340c:	e7fe      	b.n	800340c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	699a      	ldr	r2, [r3, #24]
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	18d1      	adds	r1, r2, r3
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	69f8      	ldr	r0, [r7, #28]
 800341c:	f7ff ff2a 	bl	8003274 <prvInsertTimerInActiveList>
                        break;
 8003420:	e015      	b.n	800344e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d103      	bne.n	8003438 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8003430:	69f8      	ldr	r0, [r7, #28]
 8003432:	f000 fc33 	bl	8003c9c <vPortFree>
 8003436:	e00a      	b.n	800344e <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800343e:	f023 0301 	bic.w	r3, r3, #1
 8003442:	b2da      	uxtb	r2, r3
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800344a:	e000      	b.n	800344e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800344c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800344e:	4b08      	ldr	r3, [pc, #32]	; (8003470 <prvProcessReceivedCommands+0x178>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f107 0108 	add.w	r1, r7, #8
 8003456:	2200      	movs	r2, #0
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe fbe3 	bl	8001c24 <xQueueReceive>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	f47f af4d 	bne.w	8003300 <prvProcessReceivedCommands+0x8>
        }
    }
 8003466:	bf00      	nop
 8003468:	bf00      	nop
 800346a:	3720      	adds	r7, #32
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	200001c8 	.word	0x200001c8

08003474 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800347a:	e009      	b.n	8003490 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800347c:	4b0e      	ldr	r3, [pc, #56]	; (80034b8 <prvSwitchTimerLists+0x44>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003486:	f04f 31ff 	mov.w	r1, #4294967295
 800348a:	6838      	ldr	r0, [r7, #0]
 800348c:	f7ff fe1e 	bl	80030cc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003490:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <prvSwitchTimerLists+0x44>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800349a:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <prvSwitchTimerLists+0x44>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80034a0:	4b06      	ldr	r3, [pc, #24]	; (80034bc <prvSwitchTimerLists+0x48>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <prvSwitchTimerLists+0x44>)
 80034a6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80034a8:	4a04      	ldr	r2, [pc, #16]	; (80034bc <prvSwitchTimerLists+0x48>)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6013      	str	r3, [r2, #0]
    }
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	200001c0 	.word	0x200001c0
 80034bc:	200001c4 	.word	0x200001c4

080034c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80034c4:	f000 f9de 	bl	8003884 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80034c8:	4b12      	ldr	r3, [pc, #72]	; (8003514 <prvCheckForValidListAndQueue+0x54>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d11d      	bne.n	800350c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80034d0:	4811      	ldr	r0, [pc, #68]	; (8003518 <prvCheckForValidListAndQueue+0x58>)
 80034d2:	f7fe fa0f 	bl	80018f4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80034d6:	4811      	ldr	r0, [pc, #68]	; (800351c <prvCheckForValidListAndQueue+0x5c>)
 80034d8:	f7fe fa0c 	bl	80018f4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80034dc:	4b10      	ldr	r3, [pc, #64]	; (8003520 <prvCheckForValidListAndQueue+0x60>)
 80034de:	4a0e      	ldr	r2, [pc, #56]	; (8003518 <prvCheckForValidListAndQueue+0x58>)
 80034e0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80034e2:	4b10      	ldr	r3, [pc, #64]	; (8003524 <prvCheckForValidListAndQueue+0x64>)
 80034e4:	4a0d      	ldr	r2, [pc, #52]	; (800351c <prvCheckForValidListAndQueue+0x5c>)
 80034e6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80034e8:	2200      	movs	r2, #0
 80034ea:	210c      	movs	r1, #12
 80034ec:	200a      	movs	r0, #10
 80034ee:	f7fe fb21 	bl	8001b34 <xQueueGenericCreate>
 80034f2:	4603      	mov	r3, r0
 80034f4:	4a07      	ldr	r2, [pc, #28]	; (8003514 <prvCheckForValidListAndQueue+0x54>)
 80034f6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80034f8:	4b06      	ldr	r3, [pc, #24]	; (8003514 <prvCheckForValidListAndQueue+0x54>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003500:	4b04      	ldr	r3, [pc, #16]	; (8003514 <prvCheckForValidListAndQueue+0x54>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4908      	ldr	r1, [pc, #32]	; (8003528 <prvCheckForValidListAndQueue+0x68>)
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe fd2a 	bl	8001f60 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800350c:	f000 f9ea 	bl	80038e4 <vPortExitCritical>
    }
 8003510:	bf00      	nop
 8003512:	bd80      	pop	{r7, pc}
 8003514:	200001c8 	.word	0x200001c8
 8003518:	20000198 	.word	0x20000198
 800351c:	200001ac 	.word	0x200001ac
 8003520:	200001c0 	.word	0x200001c0
 8003524:	200001c4 	.word	0x200001c4
 8003528:	080065b8 	.word	0x080065b8

0800352c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	3b04      	subs	r3, #4
 800353c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003544:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	3b04      	subs	r3, #4
 800354a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f023 0201 	bic.w	r2, r3, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	3b04      	subs	r3, #4
 800355a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800355c:	4a0c      	ldr	r2, [pc, #48]	; (8003590 <pxPortInitialiseStack+0x64>)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	3b14      	subs	r3, #20
 8003566:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	3b04      	subs	r3, #4
 8003572:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f06f 0202 	mvn.w	r2, #2
 800357a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	3b20      	subs	r3, #32
 8003580:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003582:	68fb      	ldr	r3, [r7, #12]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	08003595 	.word	0x08003595

08003594 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800359e:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <prvTaskExitError+0x54>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a6:	d00a      	beq.n	80035be <prvTaskExitError+0x2a>
        __asm volatile
 80035a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	60fb      	str	r3, [r7, #12]
    }
 80035ba:	bf00      	nop
 80035bc:	e7fe      	b.n	80035bc <prvTaskExitError+0x28>
        __asm volatile
 80035be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	60bb      	str	r3, [r7, #8]
    }
 80035d0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80035d2:	bf00      	nop
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0fc      	beq.n	80035d4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80035da:	bf00      	nop
 80035dc:	bf00      	nop
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	20000010 	.word	0x20000010
 80035ec:	00000000 	.word	0x00000000

080035f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80035f0:	4b07      	ldr	r3, [pc, #28]	; (8003610 <pxCurrentTCBConst2>)
 80035f2:	6819      	ldr	r1, [r3, #0]
 80035f4:	6808      	ldr	r0, [r1, #0]
 80035f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035fa:	f380 8809 	msr	PSP, r0
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	f04f 0000 	mov.w	r0, #0
 8003606:	f380 8811 	msr	BASEPRI, r0
 800360a:	4770      	bx	lr
 800360c:	f3af 8000 	nop.w

08003610 <pxCurrentTCBConst2>:
 8003610:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop

08003618 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003618:	4808      	ldr	r0, [pc, #32]	; (800363c <prvPortStartFirstTask+0x24>)
 800361a:	6800      	ldr	r0, [r0, #0]
 800361c:	6800      	ldr	r0, [r0, #0]
 800361e:	f380 8808 	msr	MSP, r0
 8003622:	f04f 0000 	mov.w	r0, #0
 8003626:	f380 8814 	msr	CONTROL, r0
 800362a:	b662      	cpsie	i
 800362c:	b661      	cpsie	f
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	df00      	svc	0
 8003638:	bf00      	nop
 800363a:	0000      	.short	0x0000
 800363c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003640:	bf00      	nop
 8003642:	bf00      	nop

08003644 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800364a:	4b46      	ldr	r3, [pc, #280]	; (8003764 <xPortStartScheduler+0x120>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a46      	ldr	r2, [pc, #280]	; (8003768 <xPortStartScheduler+0x124>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d10a      	bne.n	800366a <xPortStartScheduler+0x26>
        __asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	613b      	str	r3, [r7, #16]
    }
 8003666:	bf00      	nop
 8003668:	e7fe      	b.n	8003668 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800366a:	4b3e      	ldr	r3, [pc, #248]	; (8003764 <xPortStartScheduler+0x120>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a3f      	ldr	r2, [pc, #252]	; (800376c <xPortStartScheduler+0x128>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d10a      	bne.n	800368a <xPortStartScheduler+0x46>
        __asm volatile
 8003674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	60fb      	str	r3, [r7, #12]
    }
 8003686:	bf00      	nop
 8003688:	e7fe      	b.n	8003688 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800368a:	4b39      	ldr	r3, [pc, #228]	; (8003770 <xPortStartScheduler+0x12c>)
 800368c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	22ff      	movs	r2, #255	; 0xff
 800369a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	4b31      	ldr	r3, [pc, #196]	; (8003774 <xPortStartScheduler+0x130>)
 80036b0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80036b2:	4b31      	ldr	r3, [pc, #196]	; (8003778 <xPortStartScheduler+0x134>)
 80036b4:	2207      	movs	r2, #7
 80036b6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036b8:	e009      	b.n	80036ce <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80036ba:	4b2f      	ldr	r3, [pc, #188]	; (8003778 <xPortStartScheduler+0x134>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	3b01      	subs	r3, #1
 80036c0:	4a2d      	ldr	r2, [pc, #180]	; (8003778 <xPortStartScheduler+0x134>)
 80036c2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d6:	2b80      	cmp	r3, #128	; 0x80
 80036d8:	d0ef      	beq.n	80036ba <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80036da:	4b27      	ldr	r3, [pc, #156]	; (8003778 <xPortStartScheduler+0x134>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f1c3 0307 	rsb	r3, r3, #7
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d00a      	beq.n	80036fc <xPortStartScheduler+0xb8>
        __asm volatile
 80036e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ea:	f383 8811 	msr	BASEPRI, r3
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f3bf 8f4f 	dsb	sy
 80036f6:	60bb      	str	r3, [r7, #8]
    }
 80036f8:	bf00      	nop
 80036fa:	e7fe      	b.n	80036fa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80036fc:	4b1e      	ldr	r3, [pc, #120]	; (8003778 <xPortStartScheduler+0x134>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <xPortStartScheduler+0x134>)
 8003704:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003706:	4b1c      	ldr	r3, [pc, #112]	; (8003778 <xPortStartScheduler+0x134>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800370e:	4a1a      	ldr	r2, [pc, #104]	; (8003778 <xPortStartScheduler+0x134>)
 8003710:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	b2da      	uxtb	r2, r3
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800371a:	4b18      	ldr	r3, [pc, #96]	; (800377c <xPortStartScheduler+0x138>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a17      	ldr	r2, [pc, #92]	; (800377c <xPortStartScheduler+0x138>)
 8003720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003724:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003726:	4b15      	ldr	r3, [pc, #84]	; (800377c <xPortStartScheduler+0x138>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a14      	ldr	r2, [pc, #80]	; (800377c <xPortStartScheduler+0x138>)
 800372c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003730:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003732:	f000 f963 	bl	80039fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003736:	4b12      	ldr	r3, [pc, #72]	; (8003780 <xPortStartScheduler+0x13c>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800373c:	f000 f982 	bl	8003a44 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003740:	4b10      	ldr	r3, [pc, #64]	; (8003784 <xPortStartScheduler+0x140>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a0f      	ldr	r2, [pc, #60]	; (8003784 <xPortStartScheduler+0x140>)
 8003746:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800374a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800374c:	f7ff ff64 	bl	8003618 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003750:	f7ff f8d6 	bl	8002900 <vTaskSwitchContext>
    prvTaskExitError();
 8003754:	f7ff ff1e 	bl	8003594 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	e000ed00 	.word	0xe000ed00
 8003768:	410fc271 	.word	0x410fc271
 800376c:	410fc270 	.word	0x410fc270
 8003770:	e000e400 	.word	0xe000e400
 8003774:	200001d4 	.word	0x200001d4
 8003778:	200001d8 	.word	0x200001d8
 800377c:	e000ed20 	.word	0xe000ed20
 8003780:	20000010 	.word	0x20000010
 8003784:	e000ef34 	.word	0xe000ef34

08003788 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800378e:	4b37      	ldr	r3, [pc, #220]	; (800386c <vInitPrioGroupValue+0xe4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a37      	ldr	r2, [pc, #220]	; (8003870 <vInitPrioGroupValue+0xe8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d10a      	bne.n	80037ae <vInitPrioGroupValue+0x26>
        __asm volatile
 8003798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	613b      	str	r3, [r7, #16]
    }
 80037aa:	bf00      	nop
 80037ac:	e7fe      	b.n	80037ac <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80037ae:	4b2f      	ldr	r3, [pc, #188]	; (800386c <vInitPrioGroupValue+0xe4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a30      	ldr	r2, [pc, #192]	; (8003874 <vInitPrioGroupValue+0xec>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d10a      	bne.n	80037ce <vInitPrioGroupValue+0x46>
        __asm volatile
 80037b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	60fb      	str	r3, [r7, #12]
    }
 80037ca:	bf00      	nop
 80037cc:	e7fe      	b.n	80037cc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80037ce:	4b2a      	ldr	r3, [pc, #168]	; (8003878 <vInitPrioGroupValue+0xf0>)
 80037d0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	22ff      	movs	r2, #255	; 0xff
 80037de:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80037e8:	78fb      	ldrb	r3, [r7, #3]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	4b22      	ldr	r3, [pc, #136]	; (800387c <vInitPrioGroupValue+0xf4>)
 80037f4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80037f6:	4b22      	ldr	r3, [pc, #136]	; (8003880 <vInitPrioGroupValue+0xf8>)
 80037f8:	2207      	movs	r2, #7
 80037fa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037fc:	e009      	b.n	8003812 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80037fe:	4b20      	ldr	r3, [pc, #128]	; (8003880 <vInitPrioGroupValue+0xf8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3b01      	subs	r3, #1
 8003804:	4a1e      	ldr	r2, [pc, #120]	; (8003880 <vInitPrioGroupValue+0xf8>)
 8003806:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	b2db      	uxtb	r3, r3
 8003810:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381a:	2b80      	cmp	r3, #128	; 0x80
 800381c:	d0ef      	beq.n	80037fe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800381e:	4b18      	ldr	r3, [pc, #96]	; (8003880 <vInitPrioGroupValue+0xf8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f1c3 0307 	rsb	r3, r3, #7
 8003826:	2b04      	cmp	r3, #4
 8003828:	d00a      	beq.n	8003840 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	60bb      	str	r3, [r7, #8]
    }
 800383c:	bf00      	nop
 800383e:	e7fe      	b.n	800383e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003840:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <vInitPrioGroupValue+0xf8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	021b      	lsls	r3, r3, #8
 8003846:	4a0e      	ldr	r2, [pc, #56]	; (8003880 <vInitPrioGroupValue+0xf8>)
 8003848:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800384a:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <vInitPrioGroupValue+0xf8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003852:	4a0b      	ldr	r2, [pc, #44]	; (8003880 <vInitPrioGroupValue+0xf8>)
 8003854:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	b2da      	uxtb	r2, r3
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800385e:	bf00      	nop
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	e000ed00 	.word	0xe000ed00
 8003870:	410fc271 	.word	0x410fc271
 8003874:	410fc270 	.word	0x410fc270
 8003878:	e000e400 	.word	0xe000e400
 800387c:	200001d4 	.word	0x200001d4
 8003880:	200001d8 	.word	0x200001d8

08003884 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
        __asm volatile
 800388a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	607b      	str	r3, [r7, #4]
    }
 800389c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800389e:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <vPortEnterCritical+0x58>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3301      	adds	r3, #1
 80038a4:	4a0d      	ldr	r2, [pc, #52]	; (80038dc <vPortEnterCritical+0x58>)
 80038a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <vPortEnterCritical+0x58>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d10f      	bne.n	80038d0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <vPortEnterCritical+0x5c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <vPortEnterCritical+0x4c>
        __asm volatile
 80038ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	603b      	str	r3, [r7, #0]
    }
 80038cc:	bf00      	nop
 80038ce:	e7fe      	b.n	80038ce <vPortEnterCritical+0x4a>
    }
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	20000010 	.word	0x20000010
 80038e0:	e000ed04 	.word	0xe000ed04

080038e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80038ea:	4b12      	ldr	r3, [pc, #72]	; (8003934 <vPortExitCritical+0x50>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10a      	bne.n	8003908 <vPortExitCritical+0x24>
        __asm volatile
 80038f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	607b      	str	r3, [r7, #4]
    }
 8003904:	bf00      	nop
 8003906:	e7fe      	b.n	8003906 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003908:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <vPortExitCritical+0x50>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3b01      	subs	r3, #1
 800390e:	4a09      	ldr	r2, [pc, #36]	; (8003934 <vPortExitCritical+0x50>)
 8003910:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003912:	4b08      	ldr	r3, [pc, #32]	; (8003934 <vPortExitCritical+0x50>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d105      	bne.n	8003926 <vPortExitCritical+0x42>
 800391a:	2300      	movs	r3, #0
 800391c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003924:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000010 	.word	0x20000010
	...

08003940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003940:	f3ef 8009 	mrs	r0, PSP
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <pxCurrentTCBConst>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	f01e 0f10 	tst.w	lr, #16
 8003950:	bf08      	it	eq
 8003952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395a:	6010      	str	r0, [r2, #0]
 800395c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003964:	f380 8811 	msr	BASEPRI, r0
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f7fe ffc6 	bl	8002900 <vTaskSwitchContext>
 8003974:	f04f 0000 	mov.w	r0, #0
 8003978:	f380 8811 	msr	BASEPRI, r0
 800397c:	bc09      	pop	{r0, r3}
 800397e:	6819      	ldr	r1, [r3, #0]
 8003980:	6808      	ldr	r0, [r1, #0]
 8003982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003986:	f01e 0f10 	tst.w	lr, #16
 800398a:	bf08      	it	eq
 800398c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003990:	f380 8809 	msr	PSP, r0
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	f3af 8000 	nop.w

080039a0 <pxCurrentTCBConst>:
 80039a0:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop

080039a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
        __asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	607b      	str	r3, [r7, #4]
    }
 80039c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80039c2:	f001 fda5 	bl	8005510 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80039c6:	f7fe fe81 	bl	80026cc <xTaskIncrementTick>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d006      	beq.n	80039de <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80039d0:	f001 fdfc 	bl	80055cc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80039d4:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <SysTick_Handler+0x50>)
 80039d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	e001      	b.n	80039e2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80039de:	f001 fdd9 	bl	8005594 <SEGGER_SYSVIEW_RecordExitISR>
 80039e2:	2300      	movs	r3, #0
 80039e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	f383 8811 	msr	BASEPRI, r3
    }
 80039ec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80039ee:	bf00      	nop
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	e000ed04 	.word	0xe000ed04

080039fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <vPortSetupTimerInterrupt+0x34>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003a06:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <vPortSetupTimerInterrupt+0x38>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003a0c:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <vPortSetupTimerInterrupt+0x3c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a0a      	ldr	r2, [pc, #40]	; (8003a3c <vPortSetupTimerInterrupt+0x40>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	099b      	lsrs	r3, r3, #6
 8003a18:	4a09      	ldr	r2, [pc, #36]	; (8003a40 <vPortSetupTimerInterrupt+0x44>)
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a1e:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <vPortSetupTimerInterrupt+0x34>)
 8003a20:	2207      	movs	r2, #7
 8003a22:	601a      	str	r2, [r3, #0]
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	e000e010 	.word	0xe000e010
 8003a34:	e000e018 	.word	0xe000e018
 8003a38:	20000000 	.word	0x20000000
 8003a3c:	10624dd3 	.word	0x10624dd3
 8003a40:	e000e014 	.word	0xe000e014

08003a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003a44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003a54 <vPortEnableVFP+0x10>
 8003a48:	6801      	ldr	r1, [r0, #0]
 8003a4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003a4e:	6001      	str	r1, [r0, #0]
 8003a50:	4770      	bx	lr
 8003a52:	0000      	.short	0x0000
 8003a54:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003a58:	bf00      	nop
 8003a5a:	bf00      	nop

08003a5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003a62:	f3ef 8305 	mrs	r3, IPSR
 8003a66:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b0f      	cmp	r3, #15
 8003a6c:	d914      	bls.n	8003a98 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003a6e:	4a17      	ldr	r2, [pc, #92]	; (8003acc <vPortValidateInterruptPriority+0x70>)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003a78:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <vPortValidateInterruptPriority+0x74>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	7afa      	ldrb	r2, [r7, #11]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d20a      	bcs.n	8003a98 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	607b      	str	r3, [r7, #4]
    }
 8003a94:	bf00      	nop
 8003a96:	e7fe      	b.n	8003a96 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003a98:	4b0e      	ldr	r3, [pc, #56]	; (8003ad4 <vPortValidateInterruptPriority+0x78>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003aa0:	4b0d      	ldr	r3, [pc, #52]	; (8003ad8 <vPortValidateInterruptPriority+0x7c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d90a      	bls.n	8003abe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	603b      	str	r3, [r7, #0]
    }
 8003aba:	bf00      	nop
 8003abc:	e7fe      	b.n	8003abc <vPortValidateInterruptPriority+0x60>
    }
 8003abe:	bf00      	nop
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	e000e3f0 	.word	0xe000e3f0
 8003ad0:	200001d4 	.word	0x200001d4
 8003ad4:	e000ed0c 	.word	0xe000ed0c
 8003ad8:	200001d8 	.word	0x200001d8

08003adc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08a      	sub	sp, #40	; 0x28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003ae8:	f7fe fcc0 	bl	800246c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003aec:	4b65      	ldr	r3, [pc, #404]	; (8003c84 <pvPortMalloc+0x1a8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003af4:	f000 f934 	bl	8003d60 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003af8:	4b63      	ldr	r3, [pc, #396]	; (8003c88 <pvPortMalloc+0x1ac>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f040 80a7 	bne.w	8003c54 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d02d      	beq.n	8003b68 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003b0c:	2208      	movs	r2, #8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d227      	bcs.n	8003b68 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003b18:	2208      	movs	r2, #8
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d021      	beq.n	8003b6e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f023 0307 	bic.w	r3, r3, #7
 8003b30:	3308      	adds	r3, #8
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d214      	bcs.n	8003b62 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f023 0307 	bic.w	r3, r3, #7
 8003b3e:	3308      	adds	r3, #8
 8003b40:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d010      	beq.n	8003b6e <pvPortMalloc+0x92>
        __asm volatile
 8003b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	617b      	str	r3, [r7, #20]
    }
 8003b5e:	bf00      	nop
 8003b60:	e7fe      	b.n	8003b60 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b66:	e002      	b.n	8003b6e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	607b      	str	r3, [r7, #4]
 8003b6c:	e000      	b.n	8003b70 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b6e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d06e      	beq.n	8003c54 <pvPortMalloc+0x178>
 8003b76:	4b45      	ldr	r3, [pc, #276]	; (8003c8c <pvPortMalloc+0x1b0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d869      	bhi.n	8003c54 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003b80:	4b43      	ldr	r3, [pc, #268]	; (8003c90 <pvPortMalloc+0x1b4>)
 8003b82:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003b84:	4b42      	ldr	r3, [pc, #264]	; (8003c90 <pvPortMalloc+0x1b4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b8a:	e004      	b.n	8003b96 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d903      	bls.n	8003ba8 <pvPortMalloc+0xcc>
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f1      	bne.n	8003b8c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003ba8:	4b36      	ldr	r3, [pc, #216]	; (8003c84 <pvPortMalloc+0x1a8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d050      	beq.n	8003c54 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2208      	movs	r2, #8
 8003bb8:	4413      	add	r3, r2
 8003bba:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	1ad2      	subs	r2, r2, r3
 8003bcc:	2308      	movs	r3, #8
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d91f      	bls.n	8003c14 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <pvPortMalloc+0x120>
        __asm volatile
 8003be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bea:	f383 8811 	msr	BASEPRI, r3
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	613b      	str	r3, [r7, #16]
    }
 8003bf8:	bf00      	nop
 8003bfa:	e7fe      	b.n	8003bfa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	1ad2      	subs	r2, r2, r3
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c0e:	69b8      	ldr	r0, [r7, #24]
 8003c10:	f000 f908 	bl	8003e24 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c14:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <pvPortMalloc+0x1b0>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	4a1b      	ldr	r2, [pc, #108]	; (8003c8c <pvPortMalloc+0x1b0>)
 8003c20:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c22:	4b1a      	ldr	r3, [pc, #104]	; (8003c8c <pvPortMalloc+0x1b0>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	4b1b      	ldr	r3, [pc, #108]	; (8003c94 <pvPortMalloc+0x1b8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d203      	bcs.n	8003c36 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c2e:	4b17      	ldr	r3, [pc, #92]	; (8003c8c <pvPortMalloc+0x1b0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a18      	ldr	r2, [pc, #96]	; (8003c94 <pvPortMalloc+0x1b8>)
 8003c34:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	4b13      	ldr	r3, [pc, #76]	; (8003c88 <pvPortMalloc+0x1ac>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003c4a:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <pvPortMalloc+0x1bc>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	4a11      	ldr	r2, [pc, #68]	; (8003c98 <pvPortMalloc+0x1bc>)
 8003c52:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003c54:	f7fe fc18 	bl	8002488 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <pvPortMalloc+0x19c>
        __asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	60fb      	str	r3, [r7, #12]
    }
 8003c74:	bf00      	nop
 8003c76:	e7fe      	b.n	8003c76 <pvPortMalloc+0x19a>
    return pvReturn;
 8003c78:	69fb      	ldr	r3, [r7, #28]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3728      	adds	r7, #40	; 0x28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20012de4 	.word	0x20012de4
 8003c88:	20012df8 	.word	0x20012df8
 8003c8c:	20012de8 	.word	0x20012de8
 8003c90:	20012ddc 	.word	0x20012ddc
 8003c94:	20012dec 	.word	0x20012dec
 8003c98:	20012df0 	.word	0x20012df0

08003c9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d04d      	beq.n	8003d4a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003cae:	2308      	movs	r3, #8
 8003cb0:	425b      	negs	r3, r3
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <vPortFree+0xb8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10a      	bne.n	8003ce0 <vPortFree+0x44>
        __asm volatile
 8003cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	60fb      	str	r3, [r7, #12]
    }
 8003cdc:	bf00      	nop
 8003cde:	e7fe      	b.n	8003cde <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <vPortFree+0x62>
        __asm volatile
 8003ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cec:	f383 8811 	msr	BASEPRI, r3
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	60bb      	str	r3, [r7, #8]
    }
 8003cfa:	bf00      	nop
 8003cfc:	e7fe      	b.n	8003cfc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <vPortFree+0xb8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4013      	ands	r3, r2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01e      	beq.n	8003d4a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d11a      	bne.n	8003d4a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <vPortFree+0xb8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	401a      	ands	r2, r3
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003d24:	f7fe fba2 	bl	800246c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <vPortFree+0xbc>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4413      	add	r3, r2
 8003d32:	4a09      	ldr	r2, [pc, #36]	; (8003d58 <vPortFree+0xbc>)
 8003d34:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d36:	6938      	ldr	r0, [r7, #16]
 8003d38:	f000 f874 	bl	8003e24 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003d3c:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <vPortFree+0xc0>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3301      	adds	r3, #1
 8003d42:	4a06      	ldr	r2, [pc, #24]	; (8003d5c <vPortFree+0xc0>)
 8003d44:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003d46:	f7fe fb9f 	bl	8002488 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003d4a:	bf00      	nop
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20012df8 	.word	0x20012df8
 8003d58:	20012de8 	.word	0x20012de8
 8003d5c:	20012df4 	.word	0x20012df4

08003d60 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003d66:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003d6a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003d6c:	4b27      	ldr	r3, [pc, #156]	; (8003e0c <prvHeapInit+0xac>)
 8003d6e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00c      	beq.n	8003d94 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3307      	adds	r3, #7
 8003d7e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0307 	bic.w	r3, r3, #7
 8003d86:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	4a1f      	ldr	r2, [pc, #124]	; (8003e0c <prvHeapInit+0xac>)
 8003d90:	4413      	add	r3, r2
 8003d92:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d98:	4a1d      	ldr	r2, [pc, #116]	; (8003e10 <prvHeapInit+0xb0>)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003d9e:	4b1c      	ldr	r3, [pc, #112]	; (8003e10 <prvHeapInit+0xb0>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	4413      	add	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003dac:	2208      	movs	r2, #8
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0307 	bic.w	r3, r3, #7
 8003dba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a15      	ldr	r2, [pc, #84]	; (8003e14 <prvHeapInit+0xb4>)
 8003dc0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003dc2:	4b14      	ldr	r3, [pc, #80]	; (8003e14 <prvHeapInit+0xb4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003dca:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <prvHeapInit+0xb4>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	1ad2      	subs	r2, r2, r3
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003de0:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <prvHeapInit+0xb4>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	4a0a      	ldr	r2, [pc, #40]	; (8003e18 <prvHeapInit+0xb8>)
 8003dee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4a09      	ldr	r2, [pc, #36]	; (8003e1c <prvHeapInit+0xbc>)
 8003df6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003df8:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <prvHeapInit+0xc0>)
 8003dfa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003dfe:	601a      	str	r2, [r3, #0]
}
 8003e00:	bf00      	nop
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	200001dc 	.word	0x200001dc
 8003e10:	20012ddc 	.word	0x20012ddc
 8003e14:	20012de4 	.word	0x20012de4
 8003e18:	20012dec 	.word	0x20012dec
 8003e1c:	20012de8 	.word	0x20012de8
 8003e20:	20012df8 	.word	0x20012df8

08003e24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003e2c:	4b28      	ldr	r3, [pc, #160]	; (8003ed0 <prvInsertBlockIntoFreeList+0xac>)
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	e002      	b.n	8003e38 <prvInsertBlockIntoFreeList+0x14>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d8f7      	bhi.n	8003e32 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d108      	bne.n	8003e66 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	441a      	add	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	441a      	add	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d118      	bne.n	8003eac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4b15      	ldr	r3, [pc, #84]	; (8003ed4 <prvInsertBlockIntoFreeList+0xb0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d00d      	beq.n	8003ea2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	441a      	add	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	e008      	b.n	8003eb4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <prvInsertBlockIntoFreeList+0xb0>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e003      	b.n	8003eb4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d002      	beq.n	8003ec2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003ec2:	bf00      	nop
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	20012ddc 	.word	0x20012ddc
 8003ed4:	20012de4 	.word	0x20012de4

08003ed8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003edc:	4803      	ldr	r0, [pc, #12]	; (8003eec <_cbSendSystemDesc+0x14>)
 8003ede:	f001 fac1 	bl	8005464 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003ee2:	4803      	ldr	r0, [pc, #12]	; (8003ef0 <_cbSendSystemDesc+0x18>)
 8003ee4:	f001 fabe 	bl	8005464 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003ee8:	bf00      	nop
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	080065c0 	.word	0x080065c0
 8003ef0:	08006600 	.word	0x08006600

08003ef4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003ef8:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <SEGGER_SYSVIEW_Conf+0x20>)
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <SEGGER_SYSVIEW_Conf+0x20>)
 8003efe:	6819      	ldr	r1, [r3, #0]
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <SEGGER_SYSVIEW_Conf+0x24>)
 8003f02:	4a06      	ldr	r2, [pc, #24]	; (8003f1c <SEGGER_SYSVIEW_Conf+0x28>)
 8003f04:	f000 fe2c 	bl	8004b60 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003f08:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003f0c:	f000 fe6c 	bl	8004be8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003f10:	bf00      	nop
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20000000 	.word	0x20000000
 8003f18:	08003ed9 	.word	0x08003ed9
 8003f1c:	080066c8 	.word	0x080066c8

08003f20 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003f26:	2300      	movs	r3, #0
 8003f28:	607b      	str	r3, [r7, #4]
 8003f2a:	e033      	b.n	8003f94 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003f2c:	491e      	ldr	r1, [pc, #120]	; (8003fa8 <_cbSendTaskList+0x88>)
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	491a      	ldr	r1, [pc, #104]	; (8003fa8 <_cbSendTaskList+0x88>)
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	6819      	ldr	r1, [r3, #0]
 8003f4e:	4c16      	ldr	r4, [pc, #88]	; (8003fa8 <_cbSendTaskList+0x88>)
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4423      	add	r3, r4
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	681c      	ldr	r4, [r3, #0]
 8003f60:	4d11      	ldr	r5, [pc, #68]	; (8003fa8 <_cbSendTaskList+0x88>)
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	442b      	add	r3, r5
 8003f6e:	330c      	adds	r3, #12
 8003f70:	681d      	ldr	r5, [r3, #0]
 8003f72:	4e0d      	ldr	r6, [pc, #52]	; (8003fa8 <_cbSendTaskList+0x88>)
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4433      	add	r3, r6
 8003f80:	3310      	adds	r3, #16
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	462b      	mov	r3, r5
 8003f88:	4622      	mov	r2, r4
 8003f8a:	f000 f8b5 	bl	80040f8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3301      	adds	r3, #1
 8003f92:	607b      	str	r3, [r7, #4]
 8003f94:	4b05      	ldr	r3, [pc, #20]	; (8003fac <_cbSendTaskList+0x8c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d3c6      	bcc.n	8003f2c <_cbSendTaskList+0xc>
  }
}
 8003f9e:	bf00      	nop
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fa8:	20012dfc 	.word	0x20012dfc
 8003fac:	20012e9c 	.word	0x20012e9c

08003fb0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003fb0:	b5b0      	push	{r4, r5, r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003fb6:	f7fe fb77 	bl	80026a8 <xTaskGetTickCountFromISR>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003fc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	f04f 0400 	mov.w	r4, #0
 8003fd2:	f04f 0500 	mov.w	r5, #0
 8003fd6:	015d      	lsls	r5, r3, #5
 8003fd8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003fdc:	0154      	lsls	r4, r2, #5
 8003fde:	4622      	mov	r2, r4
 8003fe0:	462b      	mov	r3, r5
 8003fe2:	1a12      	subs	r2, r2, r0
 8003fe4:	eb63 0301 	sbc.w	r3, r3, r1
 8003fe8:	f04f 0400 	mov.w	r4, #0
 8003fec:	f04f 0500 	mov.w	r5, #0
 8003ff0:	009d      	lsls	r5, r3, #2
 8003ff2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8003ff6:	0094      	lsls	r4, r2, #2
 8003ff8:	4622      	mov	r2, r4
 8003ffa:	462b      	mov	r3, r5
 8003ffc:	1812      	adds	r2, r2, r0
 8003ffe:	eb41 0303 	adc.w	r3, r1, r3
 8004002:	f04f 0000 	mov.w	r0, #0
 8004006:	f04f 0100 	mov.w	r1, #0
 800400a:	00d9      	lsls	r1, r3, #3
 800400c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004010:	00d0      	lsls	r0, r2, #3
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800401a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800401e:	4610      	mov	r0, r2
 8004020:	4619      	mov	r1, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bdb0      	pop	{r4, r5, r7, pc}

08004028 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004036:	2205      	movs	r2, #5
 8004038:	492b      	ldr	r1, [pc, #172]	; (80040e8 <SYSVIEW_AddTask+0xc0>)
 800403a:	68b8      	ldr	r0, [r7, #8]
 800403c:	f001 fda2 	bl	8005b84 <memcmp>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d04b      	beq.n	80040de <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004046:	4b29      	ldr	r3, [pc, #164]	; (80040ec <SYSVIEW_AddTask+0xc4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b07      	cmp	r3, #7
 800404c:	d903      	bls.n	8004056 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800404e:	4828      	ldr	r0, [pc, #160]	; (80040f0 <SYSVIEW_AddTask+0xc8>)
 8004050:	f001 fd06 	bl	8005a60 <SEGGER_SYSVIEW_Warn>
    return;
 8004054:	e044      	b.n	80040e0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004056:	4b25      	ldr	r3, [pc, #148]	; (80040ec <SYSVIEW_AddTask+0xc4>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	4926      	ldr	r1, [pc, #152]	; (80040f4 <SYSVIEW_AddTask+0xcc>)
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800406a:	4b20      	ldr	r3, [pc, #128]	; (80040ec <SYSVIEW_AddTask+0xc4>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	4921      	ldr	r1, [pc, #132]	; (80040f4 <SYSVIEW_AddTask+0xcc>)
 8004070:	4613      	mov	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	3304      	adds	r3, #4
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004080:	4b1a      	ldr	r3, [pc, #104]	; (80040ec <SYSVIEW_AddTask+0xc4>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	491b      	ldr	r1, [pc, #108]	; (80040f4 <SYSVIEW_AddTask+0xcc>)
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	3308      	adds	r3, #8
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004096:	4b15      	ldr	r3, [pc, #84]	; (80040ec <SYSVIEW_AddTask+0xc4>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	4916      	ldr	r1, [pc, #88]	; (80040f4 <SYSVIEW_AddTask+0xcc>)
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	330c      	adds	r3, #12
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80040ac:	4b0f      	ldr	r3, [pc, #60]	; (80040ec <SYSVIEW_AddTask+0xc4>)
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	4910      	ldr	r1, [pc, #64]	; (80040f4 <SYSVIEW_AddTask+0xcc>)
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	3310      	adds	r3, #16
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80040c2:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <SYSVIEW_AddTask+0xc4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3301      	adds	r3, #1
 80040c8:	4a08      	ldr	r2, [pc, #32]	; (80040ec <SYSVIEW_AddTask+0xc4>)
 80040ca:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	68b9      	ldr	r1, [r7, #8]
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f80e 	bl	80040f8 <SYSVIEW_SendTaskInfo>
 80040dc:	e000      	b.n	80040e0 <SYSVIEW_AddTask+0xb8>
    return;
 80040de:	bf00      	nop

}
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	08006610 	.word	0x08006610
 80040ec:	20012e9c 	.word	0x20012e9c
 80040f0:	08006618 	.word	0x08006618
 80040f4:	20012dfc 	.word	0x20012dfc

080040f8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08a      	sub	sp, #40	; 0x28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004106:	f107 0314 	add.w	r3, r7, #20
 800410a:	2214      	movs	r2, #20
 800410c:	2100      	movs	r1, #0
 800410e:	4618      	mov	r0, r3
 8004110:	f001 fd54 	bl	8005bbc <memset>
  TaskInfo.TaskID     = TaskID;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004128:	f107 0314 	add.w	r3, r7, #20
 800412c:	4618      	mov	r0, r3
 800412e:	f001 f8a1 	bl	8005274 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004132:	bf00      	nop
 8004134:	3728      	adds	r7, #40	; 0x28
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004142:	4b24      	ldr	r3, [pc, #144]	; (80041d4 <_DoInit+0x98>)
 8004144:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2203      	movs	r2, #3
 800414a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2203      	movs	r2, #3
 8004150:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a20      	ldr	r2, [pc, #128]	; (80041d8 <_DoInit+0x9c>)
 8004156:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a20      	ldr	r2, [pc, #128]	; (80041dc <_DoInit+0xa0>)
 800415c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004164:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a17      	ldr	r2, [pc, #92]	; (80041d8 <_DoInit+0x9c>)
 800417c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a17      	ldr	r2, [pc, #92]	; (80041e0 <_DoInit+0xa4>)
 8004182:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2210      	movs	r2, #16
 8004188:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3307      	adds	r3, #7
 80041a0:	4a10      	ldr	r2, [pc, #64]	; (80041e4 <_DoInit+0xa8>)
 80041a2:	6810      	ldr	r0, [r2, #0]
 80041a4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80041a6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a0e      	ldr	r2, [pc, #56]	; (80041e8 <_DoInit+0xac>)
 80041ae:	6810      	ldr	r0, [r2, #0]
 80041b0:	6018      	str	r0, [r3, #0]
 80041b2:	8891      	ldrh	r1, [r2, #4]
 80041b4:	7992      	ldrb	r2, [r2, #6]
 80041b6:	8099      	strh	r1, [r3, #4]
 80041b8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80041ba:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2220      	movs	r2, #32
 80041c2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80041c4:	f3bf 8f5f 	dmb	sy
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	2001441c 	.word	0x2001441c
 80041d8:	08006668 	.word	0x08006668
 80041dc:	20012ea0 	.word	0x20012ea0
 80041e0:	200132a0 	.word	0x200132a0
 80041e4:	08006674 	.word	0x08006674
 80041e8:	08006678 	.word	0x08006678

080041ec <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08a      	sub	sp, #40	; 0x28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80041f8:	2300      	movs	r3, #0
 80041fa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	429a      	cmp	r2, r3
 800420e:	d905      	bls.n	800421c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
 800421a:	e007      	b.n	800422c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	69b9      	ldr	r1, [r7, #24]
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	1acb      	subs	r3, r1, r3
 8004226:	4413      	add	r3, r2
 8004228:	3b01      	subs	r3, #1
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004236:	4293      	cmp	r3, r2
 8004238:	bf28      	it	cs
 800423a:	4613      	movcs	r3, r2
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800423e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4293      	cmp	r3, r2
 8004244:	bf28      	it	cs
 8004246:	4613      	movcs	r3, r2
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	4413      	add	r3, r2
 8004252:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004256:	68b9      	ldr	r1, [r7, #8]
 8004258:	6978      	ldr	r0, [r7, #20]
 800425a:	f001 fca1 	bl	8005ba0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800425e:	6a3a      	ldr	r2, [r7, #32]
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	4413      	add	r3, r2
 8004264:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	4413      	add	r3, r2
 800426c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004276:	69fa      	ldr	r2, [r7, #28]
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	4413      	add	r3, r2
 800427c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	429a      	cmp	r2, r3
 8004286:	d101      	bne.n	800428c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004288:	2300      	movs	r3, #0
 800428a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800428c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	69fa      	ldr	r2, [r7, #28]
 8004294:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1b2      	bne.n	8004202 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800429c:	6a3b      	ldr	r3, [r7, #32]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3728      	adds	r7, #40	; 0x28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b088      	sub	sp, #32
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	60f8      	str	r0, [r7, #12]
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d911      	bls.n	80042ee <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	4413      	add	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	68b9      	ldr	r1, [r7, #8]
 80042d8:	6938      	ldr	r0, [r7, #16]
 80042da:	f001 fc61 	bl	8005ba0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80042de:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	441a      	add	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80042ec:	e01f      	b.n	800432e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	4413      	add	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	68b9      	ldr	r1, [r7, #8]
 8004300:	6938      	ldr	r0, [r7, #16]
 8004302:	f001 fc4d 	bl	8005ba0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	4413      	add	r3, r2
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	4619      	mov	r1, r3
 800431e:	6938      	ldr	r0, [r7, #16]
 8004320:	f001 fc3e 	bl	8005ba0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004324:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	60da      	str	r2, [r3, #12]
}
 800432e:	bf00      	nop
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004336:	b480      	push	{r7}
 8004338:	b087      	sub	sp, #28
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	429a      	cmp	r2, r3
 8004350:	d808      	bhi.n	8004364 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	1ad2      	subs	r2, r2, r3
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4413      	add	r3, r2
 800435e:	3b01      	subs	r3, #1
 8004360:	617b      	str	r3, [r7, #20]
 8004362:	e004      	b.n	800436e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	3b01      	subs	r3, #1
 800436c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800436e:	697b      	ldr	r3, [r7, #20]
}
 8004370:	4618      	mov	r0, r3
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800437c:	b580      	push	{r7, lr}
 800437e:	b08c      	sub	sp, #48	; 0x30
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004388:	4b3e      	ldr	r3, [pc, #248]	; (8004484 <SEGGER_RTT_ReadNoLock+0x108>)
 800438a:	623b      	str	r3, [r7, #32]
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <SEGGER_RTT_ReadNoLock+0x1e>
 8004396:	f7ff fed1 	bl	800413c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	4613      	mov	r3, r2
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	4413      	add	r3, r2
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	3360      	adds	r3, #96	; 0x60
 80043a6:	4a37      	ldr	r2, [pc, #220]	; (8004484 <SEGGER_RTT_ReadNoLock+0x108>)
 80043a8:	4413      	add	r3, r2
 80043aa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80043bc:	2300      	movs	r3, #0
 80043be:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80043c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d92b      	bls.n	8004420 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4293      	cmp	r3, r2
 80043d8:	bf28      	it	cs
 80043da:	4613      	movcs	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e4:	4413      	add	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	6939      	ldr	r1, [r7, #16]
 80043ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043ee:	f001 fbd7 	bl	8005ba0 <memcpy>
    NumBytesRead += NumBytesRem;
 80043f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	4413      	add	r3, r2
 80043f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80043fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	4413      	add	r3, r2
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800440a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	4413      	add	r3, r2
 8004410:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004418:	429a      	cmp	r2, r3
 800441a:	d101      	bne.n	8004420 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800441c:	2300      	movs	r3, #0
 800441e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4293      	cmp	r3, r2
 800442e:	bf28      	it	cs
 8004430:	4613      	movcs	r3, r2
 8004432:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d019      	beq.n	800446e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004440:	4413      	add	r3, r2
 8004442:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	6939      	ldr	r1, [r7, #16]
 8004448:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800444a:	f001 fba9 	bl	8005ba0 <memcpy>
    NumBytesRead += NumBytesRem;
 800444e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	4413      	add	r3, r2
 8004454:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	4413      	add	r3, r2
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	4413      	add	r3, r2
 800446c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800446e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004478:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800447c:	4618      	mov	r0, r3
 800447e:	3730      	adds	r7, #48	; 0x30
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	2001441c 	.word	0x2001441c

08004488 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	4613      	mov	r3, r2
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	4413      	add	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4a1f      	ldr	r2, [pc, #124]	; (8004524 <SEGGER_RTT_WriteNoLock+0x9c>)
 80044a6:	4413      	add	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d029      	beq.n	8004506 <SEGGER_RTT_WriteNoLock+0x7e>
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d82e      	bhi.n	8004514 <SEGGER_RTT_WriteNoLock+0x8c>
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <SEGGER_RTT_WriteNoLock+0x38>
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d013      	beq.n	80044e6 <SEGGER_RTT_WriteNoLock+0x5e>
 80044be:	e029      	b.n	8004514 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80044c0:	6978      	ldr	r0, [r7, #20]
 80044c2:	f7ff ff38 	bl	8004336 <_GetAvailWriteSpace>
 80044c6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d202      	bcs.n	80044d6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80044d4:	e021      	b.n	800451a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	69b9      	ldr	r1, [r7, #24]
 80044de:	6978      	ldr	r0, [r7, #20]
 80044e0:	f7ff fee1 	bl	80042a6 <_WriteNoCheck>
    break;
 80044e4:	e019      	b.n	800451a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80044e6:	6978      	ldr	r0, [r7, #20]
 80044e8:	f7ff ff25 	bl	8004336 <_GetAvailWriteSpace>
 80044ec:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	4293      	cmp	r3, r2
 80044f4:	bf28      	it	cs
 80044f6:	4613      	movcs	r3, r2
 80044f8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80044fa:	69fa      	ldr	r2, [r7, #28]
 80044fc:	69b9      	ldr	r1, [r7, #24]
 80044fe:	6978      	ldr	r0, [r7, #20]
 8004500:	f7ff fed1 	bl	80042a6 <_WriteNoCheck>
    break;
 8004504:	e009      	b.n	800451a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	69b9      	ldr	r1, [r7, #24]
 800450a:	6978      	ldr	r0, [r7, #20]
 800450c:	f7ff fe6e 	bl	80041ec <_WriteBlocking>
 8004510:	61f8      	str	r0, [r7, #28]
    break;
 8004512:	e002      	b.n	800451a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004514:	2300      	movs	r3, #0
 8004516:	61fb      	str	r3, [r7, #28]
    break;
 8004518:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800451a:	69fb      	ldr	r3, [r7, #28]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3720      	adds	r7, #32
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	2001441c 	.word	0x2001441c

08004528 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004528:	b580      	push	{r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004534:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <SEGGER_RTT_Write+0x48>)
 8004536:	61fb      	str	r3, [r7, #28]
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <SEGGER_RTT_Write+0x1e>
 8004542:	f7ff fdfb 	bl	800413c <_DoInit>
  SEGGER_RTT_LOCK();
 8004546:	f3ef 8311 	mrs	r3, BASEPRI
 800454a:	f04f 0120 	mov.w	r1, #32
 800454e:	f381 8811 	msr	BASEPRI, r1
 8004552:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	68b9      	ldr	r1, [r7, #8]
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f7ff ff95 	bl	8004488 <SEGGER_RTT_WriteNoLock>
 800455e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004566:	697b      	ldr	r3, [r7, #20]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3720      	adds	r7, #32
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	2001441c 	.word	0x2001441c

08004574 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004582:	4b3d      	ldr	r3, [pc, #244]	; (8004678 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004584:	61bb      	str	r3, [r7, #24]
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004590:	f7ff fdd4 	bl	800413c <_DoInit>
  SEGGER_RTT_LOCK();
 8004594:	f3ef 8311 	mrs	r3, BASEPRI
 8004598:	f04f 0120 	mov.w	r1, #32
 800459c:	f381 8811 	msr	BASEPRI, r1
 80045a0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80045a2:	4b35      	ldr	r3, [pc, #212]	; (8004678 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80045a4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80045aa:	6939      	ldr	r1, [r7, #16]
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	4613      	mov	r3, r2
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	4413      	add	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	440b      	add	r3, r1
 80045ba:	3304      	adds	r3, #4
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3301      	adds	r3, #1
 80045c6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	69fa      	ldr	r2, [r7, #28]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	dbeb      	blt.n	80045aa <SEGGER_RTT_AllocUpBuffer+0x36>
 80045d2:	e000      	b.n	80045d6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80045d4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	69fa      	ldr	r2, [r7, #28]
 80045dc:	429a      	cmp	r2, r3
 80045de:	da3f      	bge.n	8004660 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80045e0:	6939      	ldr	r1, [r7, #16]
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	4613      	mov	r3, r2
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	4413      	add	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	440b      	add	r3, r1
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80045f4:	6939      	ldr	r1, [r7, #16]
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	4613      	mov	r3, r2
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	4413      	add	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	440b      	add	r3, r1
 8004604:	3304      	adds	r3, #4
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800460a:	6939      	ldr	r1, [r7, #16]
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	4613      	mov	r3, r2
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	4413      	add	r3, r2
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	440b      	add	r3, r1
 8004618:	3320      	adds	r3, #32
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800461e:	6939      	ldr	r1, [r7, #16]
 8004620:	69fa      	ldr	r2, [r7, #28]
 8004622:	4613      	mov	r3, r2
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	4413      	add	r3, r2
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	440b      	add	r3, r1
 800462c:	3328      	adds	r3, #40	; 0x28
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004632:	6939      	ldr	r1, [r7, #16]
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	4613      	mov	r3, r2
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	4413      	add	r3, r2
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	440b      	add	r3, r1
 8004640:	3324      	adds	r3, #36	; 0x24
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004646:	6939      	ldr	r1, [r7, #16]
 8004648:	69fa      	ldr	r2, [r7, #28]
 800464a:	4613      	mov	r3, r2
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	4413      	add	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	440b      	add	r3, r1
 8004654:	332c      	adds	r3, #44	; 0x2c
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800465a:	f3bf 8f5f 	dmb	sy
 800465e:	e002      	b.n	8004666 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004660:	f04f 33ff 	mov.w	r3, #4294967295
 8004664:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800466c:	69fb      	ldr	r3, [r7, #28]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3720      	adds	r7, #32
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	2001441c 	.word	0x2001441c

0800467c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800467c:	b580      	push	{r7, lr}
 800467e:	b08a      	sub	sp, #40	; 0x28
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
 8004688:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800468a:	4b21      	ldr	r3, [pc, #132]	; (8004710 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800468c:	623b      	str	r3, [r7, #32]
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004698:	f7ff fd50 	bl	800413c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800469c:	4b1c      	ldr	r3, [pc, #112]	; (8004710 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800469e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d82c      	bhi.n	8004700 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80046a6:	f3ef 8311 	mrs	r3, BASEPRI
 80046aa:	f04f 0120 	mov.w	r1, #32
 80046ae:	f381 8811 	msr	BASEPRI, r1
 80046b2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	4613      	mov	r3, r2
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	4413      	add	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	3360      	adds	r3, #96	; 0x60
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	4413      	add	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00e      	beq.n	80046ea <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2200      	movs	r2, #0
 80046e2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2200      	movs	r2, #0
 80046e8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ee:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80046f0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80046fa:	2300      	movs	r3, #0
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
 80046fe:	e002      	b.n	8004706 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004700:	f04f 33ff 	mov.w	r3, #4294967295
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004708:	4618      	mov	r0, r3
 800470a:	3728      	adds	r7, #40	; 0x28
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	2001441c 	.word	0x2001441c

08004714 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004720:	2300      	movs	r3, #0
 8004722:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00f      	beq.n	800474a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800472a:	e002      	b.n	8004732 <_EncodeStr+0x1e>
      Len++;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	3301      	adds	r3, #1
 8004730:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	4413      	add	r3, r2
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f6      	bne.n	800472c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	429a      	cmp	r2, r3
 8004744:	d901      	bls.n	800474a <_EncodeStr+0x36>
      Len = Limit;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2bfe      	cmp	r3, #254	; 0xfe
 800474e:	d806      	bhi.n	800475e <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	60fa      	str	r2, [r7, #12]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	701a      	strb	r2, [r3, #0]
 800475c:	e011      	b.n	8004782 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	60fa      	str	r2, [r7, #12]
 8004764:	22ff      	movs	r2, #255	; 0xff
 8004766:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	60fa      	str	r2, [r7, #12]
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	0a19      	lsrs	r1, r3, #8
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	60fa      	str	r2, [r7, #12]
 800477e:	b2ca      	uxtb	r2, r1
 8004780:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004782:	2300      	movs	r3, #0
 8004784:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004786:	e00a      	b.n	800479e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	1c53      	adds	r3, r2, #1
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	1c59      	adds	r1, r3, #1
 8004792:	60f9      	str	r1, [r7, #12]
 8004794:	7812      	ldrb	r2, [r2, #0]
 8004796:	701a      	strb	r2, [r3, #0]
    n++;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	3301      	adds	r3, #1
 800479c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d3f0      	bcc.n	8004788 <_EncodeStr+0x74>
  }
  return pPayload;
 80047a6:	68fb      	ldr	r3, [r7, #12]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	371c      	adds	r7, #28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3304      	adds	r3, #4
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80047d2:	4b36      	ldr	r3, [pc, #216]	; (80048ac <_HandleIncomingPacket+0xe0>)
 80047d4:	7e1b      	ldrb	r3, [r3, #24]
 80047d6:	4618      	mov	r0, r3
 80047d8:	1cfb      	adds	r3, r7, #3
 80047da:	2201      	movs	r2, #1
 80047dc:	4619      	mov	r1, r3
 80047de:	f7ff fdcd 	bl	800437c <SEGGER_RTT_ReadNoLock>
 80047e2:	4603      	mov	r3, r0
 80047e4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	dd54      	ble.n	8004896 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80047ec:	78fb      	ldrb	r3, [r7, #3]
 80047ee:	2b80      	cmp	r3, #128	; 0x80
 80047f0:	d032      	beq.n	8004858 <_HandleIncomingPacket+0x8c>
 80047f2:	2b80      	cmp	r3, #128	; 0x80
 80047f4:	dc42      	bgt.n	800487c <_HandleIncomingPacket+0xb0>
 80047f6:	2b07      	cmp	r3, #7
 80047f8:	dc16      	bgt.n	8004828 <_HandleIncomingPacket+0x5c>
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	dd3e      	ble.n	800487c <_HandleIncomingPacket+0xb0>
 80047fe:	3b01      	subs	r3, #1
 8004800:	2b06      	cmp	r3, #6
 8004802:	d83b      	bhi.n	800487c <_HandleIncomingPacket+0xb0>
 8004804:	a201      	add	r2, pc, #4	; (adr r2, 800480c <_HandleIncomingPacket+0x40>)
 8004806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480a:	bf00      	nop
 800480c:	0800482f 	.word	0x0800482f
 8004810:	08004835 	.word	0x08004835
 8004814:	0800483b 	.word	0x0800483b
 8004818:	08004841 	.word	0x08004841
 800481c:	08004847 	.word	0x08004847
 8004820:	0800484d 	.word	0x0800484d
 8004824:	08004853 	.word	0x08004853
 8004828:	2b7f      	cmp	r3, #127	; 0x7f
 800482a:	d036      	beq.n	800489a <_HandleIncomingPacket+0xce>
 800482c:	e026      	b.n	800487c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800482e:	f000 fba7 	bl	8004f80 <SEGGER_SYSVIEW_Start>
      break;
 8004832:	e037      	b.n	80048a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004834:	f000 fc5e 	bl	80050f4 <SEGGER_SYSVIEW_Stop>
      break;
 8004838:	e034      	b.n	80048a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800483a:	f000 fe37 	bl	80054ac <SEGGER_SYSVIEW_RecordSystime>
      break;
 800483e:	e031      	b.n	80048a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004840:	f000 fdfc 	bl	800543c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004844:	e02e      	b.n	80048a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004846:	f000 fc7b 	bl	8005140 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800484a:	e02b      	b.n	80048a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800484c:	f001 f8ca 	bl	80059e4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004850:	e028      	b.n	80048a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004852:	f001 f8a9 	bl	80059a8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004856:	e025      	b.n	80048a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004858:	4b14      	ldr	r3, [pc, #80]	; (80048ac <_HandleIncomingPacket+0xe0>)
 800485a:	7e1b      	ldrb	r3, [r3, #24]
 800485c:	4618      	mov	r0, r3
 800485e:	1cfb      	adds	r3, r7, #3
 8004860:	2201      	movs	r2, #1
 8004862:	4619      	mov	r1, r3
 8004864:	f7ff fd8a 	bl	800437c <SEGGER_RTT_ReadNoLock>
 8004868:	4603      	mov	r3, r0
 800486a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	dd15      	ble.n	800489e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004872:	78fb      	ldrb	r3, [r7, #3]
 8004874:	4618      	mov	r0, r3
 8004876:	f001 f817 	bl	80058a8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800487a:	e010      	b.n	800489e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800487c:	78fb      	ldrb	r3, [r7, #3]
 800487e:	b25b      	sxtb	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	da0e      	bge.n	80048a2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004884:	4b09      	ldr	r3, [pc, #36]	; (80048ac <_HandleIncomingPacket+0xe0>)
 8004886:	7e1b      	ldrb	r3, [r3, #24]
 8004888:	4618      	mov	r0, r3
 800488a:	1cfb      	adds	r3, r7, #3
 800488c:	2201      	movs	r2, #1
 800488e:	4619      	mov	r1, r3
 8004890:	f7ff fd74 	bl	800437c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004894:	e005      	b.n	80048a2 <_HandleIncomingPacket+0xd6>
    }
  }
 8004896:	bf00      	nop
 8004898:	e004      	b.n	80048a4 <_HandleIncomingPacket+0xd8>
      break;
 800489a:	bf00      	nop
 800489c:	e002      	b.n	80048a4 <_HandleIncomingPacket+0xd8>
      break;
 800489e:	bf00      	nop
 80048a0:	e000      	b.n	80048a4 <_HandleIncomingPacket+0xd8>
      break;
 80048a2:	bf00      	nop
}
 80048a4:	bf00      	nop
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	200142b8 	.word	0x200142b8

080048b0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08c      	sub	sp, #48	; 0x30
 80048b4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80048b6:	2301      	movs	r3, #1
 80048b8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80048ba:	1d3b      	adds	r3, r7, #4
 80048bc:	3301      	adds	r3, #1
 80048be:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048c4:	4b31      	ldr	r3, [pc, #196]	; (800498c <_TrySendOverflowPacket+0xdc>)
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ca:	e00b      	b.n	80048e4 <_TrySendOverflowPacket+0x34>
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d2:	1c59      	adds	r1, r3, #1
 80048d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80048d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	701a      	strb	r2, [r3, #0]
 80048de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e0:	09db      	lsrs	r3, r3, #7
 80048e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	2b7f      	cmp	r3, #127	; 0x7f
 80048e8:	d8f0      	bhi.n	80048cc <_TrySendOverflowPacket+0x1c>
 80048ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	701a      	strb	r2, [r3, #0]
 80048f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80048fa:	4b25      	ldr	r3, [pc, #148]	; (8004990 <_TrySendOverflowPacket+0xe0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004900:	4b22      	ldr	r3, [pc, #136]	; (800498c <_TrySendOverflowPacket+0xdc>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	627b      	str	r3, [r7, #36]	; 0x24
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	623b      	str	r3, [r7, #32]
 8004912:	e00b      	b.n	800492c <_TrySendOverflowPacket+0x7c>
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	b2da      	uxtb	r2, r3
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	1c59      	adds	r1, r3, #1
 800491c:	6279      	str	r1, [r7, #36]	; 0x24
 800491e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	701a      	strb	r2, [r3, #0]
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	09db      	lsrs	r3, r3, #7
 800492a:	623b      	str	r3, [r7, #32]
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	2b7f      	cmp	r3, #127	; 0x7f
 8004930:	d8f0      	bhi.n	8004914 <_TrySendOverflowPacket+0x64>
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	627a      	str	r2, [r7, #36]	; 0x24
 8004938:	6a3a      	ldr	r2, [r7, #32]
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004942:	4b12      	ldr	r3, [pc, #72]	; (800498c <_TrySendOverflowPacket+0xdc>)
 8004944:	785b      	ldrb	r3, [r3, #1]
 8004946:	4618      	mov	r0, r3
 8004948:	1d3b      	adds	r3, r7, #4
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	461a      	mov	r2, r3
 8004950:	1d3b      	adds	r3, r7, #4
 8004952:	4619      	mov	r1, r3
 8004954:	f7fb fc3c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004958:	4603      	mov	r3, r0
 800495a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d009      	beq.n	8004976 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004962:	4a0a      	ldr	r2, [pc, #40]	; (800498c <_TrySendOverflowPacket+0xdc>)
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004968:	4b08      	ldr	r3, [pc, #32]	; (800498c <_TrySendOverflowPacket+0xdc>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	3b01      	subs	r3, #1
 800496e:	b2da      	uxtb	r2, r3
 8004970:	4b06      	ldr	r3, [pc, #24]	; (800498c <_TrySendOverflowPacket+0xdc>)
 8004972:	701a      	strb	r2, [r3, #0]
 8004974:	e004      	b.n	8004980 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004976:	4b05      	ldr	r3, [pc, #20]	; (800498c <_TrySendOverflowPacket+0xdc>)
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	3301      	adds	r3, #1
 800497c:	4a03      	ldr	r2, [pc, #12]	; (800498c <_TrySendOverflowPacket+0xdc>)
 800497e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004980:	693b      	ldr	r3, [r7, #16]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3730      	adds	r7, #48	; 0x30
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	200142b8 	.word	0x200142b8
 8004990:	e0001004 	.word	0xe0001004

08004994 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004994:	b580      	push	{r7, lr}
 8004996:	b08a      	sub	sp, #40	; 0x28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80049a0:	4b6c      	ldr	r3, [pc, #432]	; (8004b54 <_SendPacket+0x1c0>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d010      	beq.n	80049ca <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80049a8:	4b6a      	ldr	r3, [pc, #424]	; (8004b54 <_SendPacket+0x1c0>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 80a3 	beq.w	8004af8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80049b2:	4b68      	ldr	r3, [pc, #416]	; (8004b54 <_SendPacket+0x1c0>)
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d109      	bne.n	80049ce <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80049ba:	f7ff ff79 	bl	80048b0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80049be:	4b65      	ldr	r3, [pc, #404]	; (8004b54 <_SendPacket+0x1c0>)
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	f040 809a 	bne.w	8004afc <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80049c8:	e001      	b.n	80049ce <_SendPacket+0x3a>
    goto Send;
 80049ca:	bf00      	nop
 80049cc:	e000      	b.n	80049d0 <_SendPacket+0x3c>
Send:
 80049ce:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b1f      	cmp	r3, #31
 80049d4:	d809      	bhi.n	80049ea <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80049d6:	4b5f      	ldr	r3, [pc, #380]	; (8004b54 <_SendPacket+0x1c0>)
 80049d8:	69da      	ldr	r2, [r3, #28]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	fa22 f303 	lsr.w	r3, r2, r3
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f040 808b 	bne.w	8004b00 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b17      	cmp	r3, #23
 80049ee:	d807      	bhi.n	8004a00 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	701a      	strb	r2, [r3, #0]
 80049fe:	e03d      	b.n	8004a7c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a0c:	d912      	bls.n	8004a34 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	09da      	lsrs	r2, r3, #7
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	3a01      	subs	r2, #1
 8004a26:	60fa      	str	r2, [r7, #12]
 8004a28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	701a      	strb	r2, [r3, #0]
 8004a32:	e006      	b.n	8004a42 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	60fb      	str	r3, [r7, #12]
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b7f      	cmp	r3, #127	; 0x7f
 8004a46:	d912      	bls.n	8004a6e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	09da      	lsrs	r2, r3, #7
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	3a01      	subs	r2, #1
 8004a60:	60fa      	str	r2, [r7, #12]
 8004a62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	701a      	strb	r2, [r3, #0]
 8004a6c:	e006      	b.n	8004a7c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3b01      	subs	r3, #1
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004a7c:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <_SendPacket+0x1c4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004a82:	4b34      	ldr	r3, [pc, #208]	; (8004b54 <_SendPacket+0x1c0>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	623b      	str	r3, [r7, #32]
 8004a94:	e00b      	b.n	8004aae <_SendPacket+0x11a>
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	1c59      	adds	r1, r3, #1
 8004a9e:	6279      	str	r1, [r7, #36]	; 0x24
 8004aa0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	701a      	strb	r2, [r3, #0]
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	09db      	lsrs	r3, r3, #7
 8004aac:	623b      	str	r3, [r7, #32]
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ab2:	d8f0      	bhi.n	8004a96 <_SendPacket+0x102>
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	627a      	str	r2, [r7, #36]	; 0x24
 8004aba:	6a3a      	ldr	r2, [r7, #32]
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	701a      	strb	r2, [r3, #0]
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004ac4:	4b23      	ldr	r3, [pc, #140]	; (8004b54 <_SendPacket+0x1c0>)
 8004ac6:	785b      	ldrb	r3, [r3, #1]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	68f9      	ldr	r1, [r7, #12]
 8004ad4:	f7fb fb7c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004ae2:	4a1c      	ldr	r2, [pc, #112]	; (8004b54 <_SendPacket+0x1c0>)
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	60d3      	str	r3, [r2, #12]
 8004ae8:	e00b      	b.n	8004b02 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004aea:	4b1a      	ldr	r3, [pc, #104]	; (8004b54 <_SendPacket+0x1c0>)
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	3301      	adds	r3, #1
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	4b18      	ldr	r3, [pc, #96]	; (8004b54 <_SendPacket+0x1c0>)
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	e004      	b.n	8004b02 <_SendPacket+0x16e>
    goto SendDone;
 8004af8:	bf00      	nop
 8004afa:	e002      	b.n	8004b02 <_SendPacket+0x16e>
      goto SendDone;
 8004afc:	bf00      	nop
 8004afe:	e000      	b.n	8004b02 <_SendPacket+0x16e>
      goto SendDone;
 8004b00:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004b02:	4b14      	ldr	r3, [pc, #80]	; (8004b54 <_SendPacket+0x1c0>)
 8004b04:	7e1b      	ldrb	r3, [r3, #24]
 8004b06:	4619      	mov	r1, r3
 8004b08:	4a14      	ldr	r2, [pc, #80]	; (8004b5c <_SendPacket+0x1c8>)
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	440b      	add	r3, r1
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	4413      	add	r3, r2
 8004b14:	336c      	adds	r3, #108	; 0x6c
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	4b0e      	ldr	r3, [pc, #56]	; (8004b54 <_SendPacket+0x1c0>)
 8004b1a:	7e1b      	ldrb	r3, [r3, #24]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	490f      	ldr	r1, [pc, #60]	; (8004b5c <_SendPacket+0x1c8>)
 8004b20:	4603      	mov	r3, r0
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	4403      	add	r3, r0
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	440b      	add	r3, r1
 8004b2a:	3370      	adds	r3, #112	; 0x70
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d00b      	beq.n	8004b4a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004b32:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <_SendPacket+0x1c0>)
 8004b34:	789b      	ldrb	r3, [r3, #2]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d107      	bne.n	8004b4a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004b3a:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <_SendPacket+0x1c0>)
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004b40:	f7ff fe44 	bl	80047cc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004b44:	4b03      	ldr	r3, [pc, #12]	; (8004b54 <_SendPacket+0x1c0>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004b4a:	bf00      	nop
 8004b4c:	3728      	adds	r7, #40	; 0x28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	200142b8 	.word	0x200142b8
 8004b58:	e0001004 	.word	0xe0001004
 8004b5c:	2001441c 	.word	0x2001441c

08004b60 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b74:	4917      	ldr	r1, [pc, #92]	; (8004bd4 <SEGGER_SYSVIEW_Init+0x74>)
 8004b76:	4818      	ldr	r0, [pc, #96]	; (8004bd8 <SEGGER_SYSVIEW_Init+0x78>)
 8004b78:	f7ff fcfc 	bl	8004574 <SEGGER_RTT_AllocUpBuffer>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	4b16      	ldr	r3, [pc, #88]	; (8004bdc <SEGGER_SYSVIEW_Init+0x7c>)
 8004b82:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004b84:	4b15      	ldr	r3, [pc, #84]	; (8004bdc <SEGGER_SYSVIEW_Init+0x7c>)
 8004b86:	785a      	ldrb	r2, [r3, #1]
 8004b88:	4b14      	ldr	r3, [pc, #80]	; (8004bdc <SEGGER_SYSVIEW_Init+0x7c>)
 8004b8a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004b8c:	4b13      	ldr	r3, [pc, #76]	; (8004bdc <SEGGER_SYSVIEW_Init+0x7c>)
 8004b8e:	7e1b      	ldrb	r3, [r3, #24]
 8004b90:	4618      	mov	r0, r3
 8004b92:	2300      	movs	r3, #0
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	2308      	movs	r3, #8
 8004b98:	4a11      	ldr	r2, [pc, #68]	; (8004be0 <SEGGER_SYSVIEW_Init+0x80>)
 8004b9a:	490f      	ldr	r1, [pc, #60]	; (8004bd8 <SEGGER_SYSVIEW_Init+0x78>)
 8004b9c:	f7ff fd6e 	bl	800467c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004ba0:	4b0e      	ldr	r3, [pc, #56]	; (8004bdc <SEGGER_SYSVIEW_Init+0x7c>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004ba6:	4b0f      	ldr	r3, [pc, #60]	; (8004be4 <SEGGER_SYSVIEW_Init+0x84>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a0c      	ldr	r2, [pc, #48]	; (8004bdc <SEGGER_SYSVIEW_Init+0x7c>)
 8004bac:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004bae:	4a0b      	ldr	r2, [pc, #44]	; (8004bdc <SEGGER_SYSVIEW_Init+0x7c>)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004bb4:	4a09      	ldr	r2, [pc, #36]	; (8004bdc <SEGGER_SYSVIEW_Init+0x7c>)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004bba:	4a08      	ldr	r2, [pc, #32]	; (8004bdc <SEGGER_SYSVIEW_Init+0x7c>)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004bc0:	4a06      	ldr	r2, [pc, #24]	; (8004bdc <SEGGER_SYSVIEW_Init+0x7c>)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004bc6:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <SEGGER_SYSVIEW_Init+0x7c>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004bcc:	bf00      	nop
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	200132b0 	.word	0x200132b0
 8004bd8:	08006680 	.word	0x08006680
 8004bdc:	200142b8 	.word	0x200142b8
 8004be0:	200142b0 	.word	0x200142b0
 8004be4:	e0001004 	.word	0xe0001004

08004be8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004bf0:	4a04      	ldr	r2, [pc, #16]	; (8004c04 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6113      	str	r3, [r2, #16]
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	200142b8 	.word	0x200142b8

08004c08 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c10:	f3ef 8311 	mrs	r3, BASEPRI
 8004c14:	f04f 0120 	mov.w	r1, #32
 8004c18:	f381 8811 	msr	BASEPRI, r1
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	4808      	ldr	r0, [pc, #32]	; (8004c40 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004c20:	f7ff fdc8 	bl	80047b4 <_PreparePacket>
 8004c24:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	68b8      	ldr	r0, [r7, #8]
 8004c2c:	f7ff feb2 	bl	8004994 <_SendPacket>
  RECORD_END();
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f383 8811 	msr	BASEPRI, r3
}
 8004c36:	bf00      	nop
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	200142e8 	.word	0x200142e8

08004c44 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c4e:	f3ef 8311 	mrs	r3, BASEPRI
 8004c52:	f04f 0120 	mov.w	r1, #32
 8004c56:	f381 8811 	msr	BASEPRI, r1
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	4816      	ldr	r0, [pc, #88]	; (8004cb8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004c5e:	f7ff fda9 	bl	80047b4 <_PreparePacket>
 8004c62:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	61fb      	str	r3, [r7, #28]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	61bb      	str	r3, [r7, #24]
 8004c70:	e00b      	b.n	8004c8a <SEGGER_SYSVIEW_RecordU32+0x46>
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	1c59      	adds	r1, r3, #1
 8004c7a:	61f9      	str	r1, [r7, #28]
 8004c7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	09db      	lsrs	r3, r3, #7
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	2b7f      	cmp	r3, #127	; 0x7f
 8004c8e:	d8f0      	bhi.n	8004c72 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	61fa      	str	r2, [r7, #28]
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	701a      	strb	r2, [r3, #0]
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	68f9      	ldr	r1, [r7, #12]
 8004ca4:	6938      	ldr	r0, [r7, #16]
 8004ca6:	f7ff fe75 	bl	8004994 <_SendPacket>
  RECORD_END();
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f383 8811 	msr	BASEPRI, r3
}
 8004cb0:	bf00      	nop
 8004cb2:	3720      	adds	r7, #32
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	200142e8 	.word	0x200142e8

08004cbc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08c      	sub	sp, #48	; 0x30
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004cc8:	f3ef 8311 	mrs	r3, BASEPRI
 8004ccc:	f04f 0120 	mov.w	r1, #32
 8004cd0:	f381 8811 	msr	BASEPRI, r1
 8004cd4:	61fb      	str	r3, [r7, #28]
 8004cd6:	4825      	ldr	r0, [pc, #148]	; (8004d6c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004cd8:	f7ff fd6c 	bl	80047b4 <_PreparePacket>
 8004cdc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cea:	e00b      	b.n	8004d04 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf2:	1c59      	adds	r1, r3, #1
 8004cf4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004cf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	09db      	lsrs	r3, r3, #7
 8004d02:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	2b7f      	cmp	r3, #127	; 0x7f
 8004d08:	d8f0      	bhi.n	8004cec <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	701a      	strb	r2, [r3, #0]
 8004d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d18:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	623b      	str	r3, [r7, #32]
 8004d22:	e00b      	b.n	8004d3c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	1c59      	adds	r1, r3, #1
 8004d2c:	6279      	str	r1, [r7, #36]	; 0x24
 8004d2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	09db      	lsrs	r3, r3, #7
 8004d3a:	623b      	str	r3, [r7, #32]
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d40:	d8f0      	bhi.n	8004d24 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	627a      	str	r2, [r7, #36]	; 0x24
 8004d48:	6a3a      	ldr	r2, [r7, #32]
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	6979      	ldr	r1, [r7, #20]
 8004d56:	69b8      	ldr	r0, [r7, #24]
 8004d58:	f7ff fe1c 	bl	8004994 <_SendPacket>
  RECORD_END();
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f383 8811 	msr	BASEPRI, r3
}
 8004d62:	bf00      	nop
 8004d64:	3730      	adds	r7, #48	; 0x30
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	200142e8 	.word	0x200142e8

08004d70 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08e      	sub	sp, #56	; 0x38
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d7e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d82:	f04f 0120 	mov.w	r1, #32
 8004d86:	f381 8811 	msr	BASEPRI, r1
 8004d8a:	61fb      	str	r3, [r7, #28]
 8004d8c:	4832      	ldr	r0, [pc, #200]	; (8004e58 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004d8e:	f7ff fd11 	bl	80047b4 <_PreparePacket>
 8004d92:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	633b      	str	r3, [r7, #48]	; 0x30
 8004da0:	e00b      	b.n	8004dba <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da8:	1c59      	adds	r1, r3, #1
 8004daa:	6379      	str	r1, [r7, #52]	; 0x34
 8004dac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	701a      	strb	r2, [r3, #0]
 8004db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db6:	09db      	lsrs	r3, r3, #7
 8004db8:	633b      	str	r3, [r7, #48]	; 0x30
 8004dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8004dbe:	d8f0      	bhi.n	8004da2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	637a      	str	r2, [r7, #52]	; 0x34
 8004dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dd8:	e00b      	b.n	8004df2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de0:	1c59      	adds	r1, r3, #1
 8004de2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004de4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dee:	09db      	lsrs	r3, r3, #7
 8004df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	2b7f      	cmp	r3, #127	; 0x7f
 8004df6:	d8f0      	bhi.n	8004dda <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	701a      	strb	r2, [r3, #0]
 8004e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	623b      	str	r3, [r7, #32]
 8004e10:	e00b      	b.n	8004e2a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	1c59      	adds	r1, r3, #1
 8004e1a:	6279      	str	r1, [r7, #36]	; 0x24
 8004e1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	701a      	strb	r2, [r3, #0]
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	09db      	lsrs	r3, r3, #7
 8004e28:	623b      	str	r3, [r7, #32]
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e2e:	d8f0      	bhi.n	8004e12 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	627a      	str	r2, [r7, #36]	; 0x24
 8004e36:	6a3a      	ldr	r2, [r7, #32]
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	6979      	ldr	r1, [r7, #20]
 8004e44:	69b8      	ldr	r0, [r7, #24]
 8004e46:	f7ff fda5 	bl	8004994 <_SendPacket>
  RECORD_END();
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	f383 8811 	msr	BASEPRI, r3
}
 8004e50:	bf00      	nop
 8004e52:	3738      	adds	r7, #56	; 0x38
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	200142e8 	.word	0x200142e8

08004e5c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b090      	sub	sp, #64	; 0x40
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e6a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e6e:	f04f 0120 	mov.w	r1, #32
 8004e72:	f381 8811 	msr	BASEPRI, r1
 8004e76:	61fb      	str	r3, [r7, #28]
 8004e78:	4840      	ldr	r0, [pc, #256]	; (8004f7c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004e7a:	f7ff fc9b 	bl	80047b4 <_PreparePacket>
 8004e7e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e8c:	e00b      	b.n	8004ea6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e94:	1c59      	adds	r1, r3, #1
 8004e96:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004e98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea2:	09db      	lsrs	r3, r3, #7
 8004ea4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea8:	2b7f      	cmp	r3, #127	; 0x7f
 8004eaa:	d8f0      	bhi.n	8004e8e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004eb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eb4:	b2d2      	uxtb	r2, r2
 8004eb6:	701a      	strb	r2, [r3, #0]
 8004eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ec4:	e00b      	b.n	8004ede <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ecc:	1c59      	adds	r1, r3, #1
 8004ece:	6379      	str	r1, [r7, #52]	; 0x34
 8004ed0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	09db      	lsrs	r3, r3, #7
 8004edc:	633b      	str	r3, [r7, #48]	; 0x30
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ee2:	d8f0      	bhi.n	8004ec6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	637a      	str	r2, [r7, #52]	; 0x34
 8004eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004efc:	e00b      	b.n	8004f16 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f04:	1c59      	adds	r1, r3, #1
 8004f06:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f0c:	b2d2      	uxtb	r2, r2
 8004f0e:	701a      	strb	r2, [r3, #0]
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	09db      	lsrs	r3, r3, #7
 8004f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f18:	2b7f      	cmp	r3, #127	; 0x7f
 8004f1a:	d8f0      	bhi.n	8004efe <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f24:	b2d2      	uxtb	r2, r2
 8004f26:	701a      	strb	r2, [r3, #0]
 8004f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f32:	623b      	str	r3, [r7, #32]
 8004f34:	e00b      	b.n	8004f4e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	1c59      	adds	r1, r3, #1
 8004f3e:	6279      	str	r1, [r7, #36]	; 0x24
 8004f40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	701a      	strb	r2, [r3, #0]
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	09db      	lsrs	r3, r3, #7
 8004f4c:	623b      	str	r3, [r7, #32]
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	2b7f      	cmp	r3, #127	; 0x7f
 8004f52:	d8f0      	bhi.n	8004f36 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	627a      	str	r2, [r7, #36]	; 0x24
 8004f5a:	6a3a      	ldr	r2, [r7, #32]
 8004f5c:	b2d2      	uxtb	r2, r2
 8004f5e:	701a      	strb	r2, [r3, #0]
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	6979      	ldr	r1, [r7, #20]
 8004f68:	69b8      	ldr	r0, [r7, #24]
 8004f6a:	f7ff fd13 	bl	8004994 <_SendPacket>
  RECORD_END();
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	f383 8811 	msr	BASEPRI, r3
}
 8004f74:	bf00      	nop
 8004f76:	3740      	adds	r7, #64	; 0x40
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	200142e8 	.word	0x200142e8

08004f80 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08c      	sub	sp, #48	; 0x30
 8004f84:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004f86:	4b58      	ldr	r3, [pc, #352]	; (80050e8 <SEGGER_SYSVIEW_Start+0x168>)
 8004f88:	2201      	movs	r2, #1
 8004f8a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004f8c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f90:	f04f 0120 	mov.w	r1, #32
 8004f94:	f381 8811 	msr	BASEPRI, r1
 8004f98:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004f9a:	4b53      	ldr	r3, [pc, #332]	; (80050e8 <SEGGER_SYSVIEW_Start+0x168>)
 8004f9c:	785b      	ldrb	r3, [r3, #1]
 8004f9e:	220a      	movs	r2, #10
 8004fa0:	4952      	ldr	r1, [pc, #328]	; (80050ec <SEGGER_SYSVIEW_Start+0x16c>)
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fb f914 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004fae:	200a      	movs	r0, #10
 8004fb0:	f7ff fe2a 	bl	8004c08 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004fb4:	f3ef 8311 	mrs	r3, BASEPRI
 8004fb8:	f04f 0120 	mov.w	r1, #32
 8004fbc:	f381 8811 	msr	BASEPRI, r1
 8004fc0:	60bb      	str	r3, [r7, #8]
 8004fc2:	484b      	ldr	r0, [pc, #300]	; (80050f0 <SEGGER_SYSVIEW_Start+0x170>)
 8004fc4:	f7ff fbf6 	bl	80047b4 <_PreparePacket>
 8004fc8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fd2:	4b45      	ldr	r3, [pc, #276]	; (80050e8 <SEGGER_SYSVIEW_Start+0x168>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fd8:	e00b      	b.n	8004ff2 <SEGGER_SYSVIEW_Start+0x72>
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe0:	1c59      	adds	r1, r3, #1
 8004fe2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004fe4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	09db      	lsrs	r3, r3, #7
 8004ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ff6:	d8f0      	bhi.n	8004fda <SEGGER_SYSVIEW_Start+0x5a>
 8004ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
 800500c:	4b36      	ldr	r3, [pc, #216]	; (80050e8 <SEGGER_SYSVIEW_Start+0x168>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	623b      	str	r3, [r7, #32]
 8005012:	e00b      	b.n	800502c <SEGGER_SYSVIEW_Start+0xac>
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	b2da      	uxtb	r2, r3
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	1c59      	adds	r1, r3, #1
 800501c:	6279      	str	r1, [r7, #36]	; 0x24
 800501e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	09db      	lsrs	r3, r3, #7
 800502a:	623b      	str	r3, [r7, #32]
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	2b7f      	cmp	r3, #127	; 0x7f
 8005030:	d8f0      	bhi.n	8005014 <SEGGER_SYSVIEW_Start+0x94>
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	627a      	str	r2, [r7, #36]	; 0x24
 8005038:	6a3a      	ldr	r2, [r7, #32]
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	701a      	strb	r2, [r3, #0]
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	61fb      	str	r3, [r7, #28]
 8005046:	4b28      	ldr	r3, [pc, #160]	; (80050e8 <SEGGER_SYSVIEW_Start+0x168>)
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	61bb      	str	r3, [r7, #24]
 800504c:	e00b      	b.n	8005066 <SEGGER_SYSVIEW_Start+0xe6>
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	b2da      	uxtb	r2, r3
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	1c59      	adds	r1, r3, #1
 8005056:	61f9      	str	r1, [r7, #28]
 8005058:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	701a      	strb	r2, [r3, #0]
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	09db      	lsrs	r3, r3, #7
 8005064:	61bb      	str	r3, [r7, #24]
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b7f      	cmp	r3, #127	; 0x7f
 800506a:	d8f0      	bhi.n	800504e <SEGGER_SYSVIEW_Start+0xce>
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	61fa      	str	r2, [r7, #28]
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	701a      	strb	r2, [r3, #0]
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	2300      	movs	r3, #0
 8005082:	613b      	str	r3, [r7, #16]
 8005084:	e00b      	b.n	800509e <SEGGER_SYSVIEW_Start+0x11e>
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	b2da      	uxtb	r2, r3
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	1c59      	adds	r1, r3, #1
 800508e:	6179      	str	r1, [r7, #20]
 8005090:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	701a      	strb	r2, [r3, #0]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	09db      	lsrs	r3, r3, #7
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	2b7f      	cmp	r3, #127	; 0x7f
 80050a2:	d8f0      	bhi.n	8005086 <SEGGER_SYSVIEW_Start+0x106>
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	617a      	str	r2, [r7, #20]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	701a      	strb	r2, [r3, #0]
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80050b4:	2218      	movs	r2, #24
 80050b6:	6839      	ldr	r1, [r7, #0]
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff fc6b 	bl	8004994 <_SendPacket>
      RECORD_END();
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80050c4:	4b08      	ldr	r3, [pc, #32]	; (80050e8 <SEGGER_SYSVIEW_Start+0x168>)
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80050cc:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <SEGGER_SYSVIEW_Start+0x168>)
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80050d2:	f000 f9eb 	bl	80054ac <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80050d6:	f000 f9b1 	bl	800543c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80050da:	f000 fc83 	bl	80059e4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80050de:	bf00      	nop
 80050e0:	3730      	adds	r7, #48	; 0x30
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	200142b8 	.word	0x200142b8
 80050ec:	080066d0 	.word	0x080066d0
 80050f0:	200142e8 	.word	0x200142e8

080050f4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050fa:	f3ef 8311 	mrs	r3, BASEPRI
 80050fe:	f04f 0120 	mov.w	r1, #32
 8005102:	f381 8811 	msr	BASEPRI, r1
 8005106:	607b      	str	r3, [r7, #4]
 8005108:	480b      	ldr	r0, [pc, #44]	; (8005138 <SEGGER_SYSVIEW_Stop+0x44>)
 800510a:	f7ff fb53 	bl	80047b4 <_PreparePacket>
 800510e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005110:	4b0a      	ldr	r3, [pc, #40]	; (800513c <SEGGER_SYSVIEW_Stop+0x48>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d007      	beq.n	8005128 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005118:	220b      	movs	r2, #11
 800511a:	6839      	ldr	r1, [r7, #0]
 800511c:	6838      	ldr	r0, [r7, #0]
 800511e:	f7ff fc39 	bl	8004994 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005122:	4b06      	ldr	r3, [pc, #24]	; (800513c <SEGGER_SYSVIEW_Stop+0x48>)
 8005124:	2200      	movs	r2, #0
 8005126:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f383 8811 	msr	BASEPRI, r3
}
 800512e:	bf00      	nop
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	200142e8 	.word	0x200142e8
 800513c:	200142b8 	.word	0x200142b8

08005140 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005140:	b580      	push	{r7, lr}
 8005142:	b08c      	sub	sp, #48	; 0x30
 8005144:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005146:	f3ef 8311 	mrs	r3, BASEPRI
 800514a:	f04f 0120 	mov.w	r1, #32
 800514e:	f381 8811 	msr	BASEPRI, r1
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	4845      	ldr	r0, [pc, #276]	; (800526c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005156:	f7ff fb2d 	bl	80047b4 <_PreparePacket>
 800515a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005164:	4b42      	ldr	r3, [pc, #264]	; (8005270 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	62bb      	str	r3, [r7, #40]	; 0x28
 800516a:	e00b      	b.n	8005184 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800516c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516e:	b2da      	uxtb	r2, r3
 8005170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005172:	1c59      	adds	r1, r3, #1
 8005174:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005176:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	09db      	lsrs	r3, r3, #7
 8005182:	62bb      	str	r3, [r7, #40]	; 0x28
 8005184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005186:	2b7f      	cmp	r3, #127	; 0x7f
 8005188:	d8f0      	bhi.n	800516c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005190:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005198:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
 800519e:	4b34      	ldr	r3, [pc, #208]	; (8005270 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	623b      	str	r3, [r7, #32]
 80051a4:	e00b      	b.n	80051be <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	1c59      	adds	r1, r3, #1
 80051ae:	6279      	str	r1, [r7, #36]	; 0x24
 80051b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	701a      	strb	r2, [r3, #0]
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	09db      	lsrs	r3, r3, #7
 80051bc:	623b      	str	r3, [r7, #32]
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	2b7f      	cmp	r3, #127	; 0x7f
 80051c2:	d8f0      	bhi.n	80051a6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	627a      	str	r2, [r7, #36]	; 0x24
 80051ca:	6a3a      	ldr	r2, [r7, #32]
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	61fb      	str	r3, [r7, #28]
 80051d8:	4b25      	ldr	r3, [pc, #148]	; (8005270 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	e00b      	b.n	80051f8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	1c59      	adds	r1, r3, #1
 80051e8:	61f9      	str	r1, [r7, #28]
 80051ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	09db      	lsrs	r3, r3, #7
 80051f6:	61bb      	str	r3, [r7, #24]
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	2b7f      	cmp	r3, #127	; 0x7f
 80051fc:	d8f0      	bhi.n	80051e0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	61fa      	str	r2, [r7, #28]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	2300      	movs	r3, #0
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	e00b      	b.n	8005230 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	b2da      	uxtb	r2, r3
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	1c59      	adds	r1, r3, #1
 8005220:	6179      	str	r1, [r7, #20]
 8005222:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	09db      	lsrs	r3, r3, #7
 800522e:	613b      	str	r3, [r7, #16]
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2b7f      	cmp	r3, #127	; 0x7f
 8005234:	d8f0      	bhi.n	8005218 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	617a      	str	r2, [r7, #20]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	701a      	strb	r2, [r3, #0]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005246:	2218      	movs	r2, #24
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	68b8      	ldr	r0, [r7, #8]
 800524c:	f7ff fba2 	bl	8004994 <_SendPacket>
  RECORD_END();
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005256:	4b06      	ldr	r3, [pc, #24]	; (8005270 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800525e:	4b04      	ldr	r3, [pc, #16]	; (8005270 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	4798      	blx	r3
  }
}
 8005264:	bf00      	nop
 8005266:	3730      	adds	r7, #48	; 0x30
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	200142e8 	.word	0x200142e8
 8005270:	200142b8 	.word	0x200142b8

08005274 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005274:	b580      	push	{r7, lr}
 8005276:	b092      	sub	sp, #72	; 0x48
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800527c:	f3ef 8311 	mrs	r3, BASEPRI
 8005280:	f04f 0120 	mov.w	r1, #32
 8005284:	f381 8811 	msr	BASEPRI, r1
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	486a      	ldr	r0, [pc, #424]	; (8005434 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800528c:	f7ff fa92 	bl	80047b4 <_PreparePacket>
 8005290:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	647b      	str	r3, [r7, #68]	; 0x44
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	4b66      	ldr	r3, [pc, #408]	; (8005438 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	643b      	str	r3, [r7, #64]	; 0x40
 80052a6:	e00b      	b.n	80052c0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80052a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ae:	1c59      	adds	r1, r3, #1
 80052b0:	6479      	str	r1, [r7, #68]	; 0x44
 80052b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052bc:	09db      	lsrs	r3, r3, #7
 80052be:	643b      	str	r3, [r7, #64]	; 0x40
 80052c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c2:	2b7f      	cmp	r3, #127	; 0x7f
 80052c4:	d8f0      	bhi.n	80052a8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80052c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	647a      	str	r2, [r7, #68]	; 0x44
 80052cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	63bb      	str	r3, [r7, #56]	; 0x38
 80052e0:	e00b      	b.n	80052fa <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e8:	1c59      	adds	r1, r3, #1
 80052ea:	63f9      	str	r1, [r7, #60]	; 0x3c
 80052ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052f0:	b2d2      	uxtb	r2, r2
 80052f2:	701a      	strb	r2, [r3, #0]
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	09db      	lsrs	r3, r3, #7
 80052f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80052fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fc:	2b7f      	cmp	r3, #127	; 0x7f
 80052fe:	d8f0      	bhi.n	80052e2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005308:	b2d2      	uxtb	r2, r2
 800530a:	701a      	strb	r2, [r3, #0]
 800530c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800530e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2220      	movs	r2, #32
 8005316:	4619      	mov	r1, r3
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7ff f9fb 	bl	8004714 <_EncodeStr>
 800531e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005320:	2209      	movs	r2, #9
 8005322:	68f9      	ldr	r1, [r7, #12]
 8005324:	6938      	ldr	r0, [r7, #16]
 8005326:	f7ff fb35 	bl	8004994 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	637b      	str	r3, [r7, #52]	; 0x34
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	4b40      	ldr	r3, [pc, #256]	; (8005438 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	633b      	str	r3, [r7, #48]	; 0x30
 800533e:	e00b      	b.n	8005358 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	b2da      	uxtb	r2, r3
 8005344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005346:	1c59      	adds	r1, r3, #1
 8005348:	6379      	str	r1, [r7, #52]	; 0x34
 800534a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	09db      	lsrs	r3, r3, #7
 8005356:	633b      	str	r3, [r7, #48]	; 0x30
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	2b7f      	cmp	r3, #127	; 0x7f
 800535c:	d8f0      	bhi.n	8005340 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800535e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	637a      	str	r2, [r7, #52]	; 0x34
 8005364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]
 800536a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	62bb      	str	r3, [r7, #40]	; 0x28
 8005378:	e00b      	b.n	8005392 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	b2da      	uxtb	r2, r3
 800537e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005380:	1c59      	adds	r1, r3, #1
 8005382:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005384:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	701a      	strb	r2, [r3, #0]
 800538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538e:	09db      	lsrs	r3, r3, #7
 8005390:	62bb      	str	r3, [r7, #40]	; 0x28
 8005392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005394:	2b7f      	cmp	r3, #127	; 0x7f
 8005396:	d8f0      	bhi.n	800537a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800539e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053a0:	b2d2      	uxtb	r2, r2
 80053a2:	701a      	strb	r2, [r3, #0]
 80053a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	623b      	str	r3, [r7, #32]
 80053b2:	e00b      	b.n	80053cc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	1c59      	adds	r1, r3, #1
 80053bc:	6279      	str	r1, [r7, #36]	; 0x24
 80053be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053c2:	b2d2      	uxtb	r2, r2
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	09db      	lsrs	r3, r3, #7
 80053ca:	623b      	str	r3, [r7, #32]
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	2b7f      	cmp	r3, #127	; 0x7f
 80053d0:	d8f0      	bhi.n	80053b4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	627a      	str	r2, [r7, #36]	; 0x24
 80053d8:	6a3a      	ldr	r2, [r7, #32]
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	61fb      	str	r3, [r7, #28]
 80053e6:	2300      	movs	r3, #0
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	e00b      	b.n	8005404 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	1c59      	adds	r1, r3, #1
 80053f4:	61f9      	str	r1, [r7, #28]
 80053f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	701a      	strb	r2, [r3, #0]
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	09db      	lsrs	r3, r3, #7
 8005402:	61bb      	str	r3, [r7, #24]
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	2b7f      	cmp	r3, #127	; 0x7f
 8005408:	d8f0      	bhi.n	80053ec <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	61fa      	str	r2, [r7, #28]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800541a:	2215      	movs	r2, #21
 800541c:	68f9      	ldr	r1, [r7, #12]
 800541e:	6938      	ldr	r0, [r7, #16]
 8005420:	f7ff fab8 	bl	8004994 <_SendPacket>
  RECORD_END();
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f383 8811 	msr	BASEPRI, r3
}
 800542a:	bf00      	nop
 800542c:	3748      	adds	r7, #72	; 0x48
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	200142e8 	.word	0x200142e8
 8005438:	200142b8 	.word	0x200142b8

0800543c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005440:	4b07      	ldr	r3, [pc, #28]	; (8005460 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d008      	beq.n	800545a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005448:	4b05      	ldr	r3, [pc, #20]	; (8005460 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005452:	4b03      	ldr	r3, [pc, #12]	; (8005460 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	4798      	blx	r3
  }
}
 800545a:	bf00      	nop
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	200142b8 	.word	0x200142b8

08005464 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800546c:	f3ef 8311 	mrs	r3, BASEPRI
 8005470:	f04f 0120 	mov.w	r1, #32
 8005474:	f381 8811 	msr	BASEPRI, r1
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	480b      	ldr	r0, [pc, #44]	; (80054a8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800547c:	f7ff f99a 	bl	80047b4 <_PreparePacket>
 8005480:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005482:	2280      	movs	r2, #128	; 0x80
 8005484:	6879      	ldr	r1, [r7, #4]
 8005486:	6938      	ldr	r0, [r7, #16]
 8005488:	f7ff f944 	bl	8004714 <_EncodeStr>
 800548c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800548e:	220e      	movs	r2, #14
 8005490:	68f9      	ldr	r1, [r7, #12]
 8005492:	6938      	ldr	r0, [r7, #16]
 8005494:	f7ff fa7e 	bl	8004994 <_SendPacket>
  RECORD_END();
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f383 8811 	msr	BASEPRI, r3
}
 800549e:	bf00      	nop
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	200142e8 	.word	0x200142e8

080054ac <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80054ac:	b590      	push	{r4, r7, lr}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80054b2:	4b15      	ldr	r3, [pc, #84]	; (8005508 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01a      	beq.n	80054f0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80054ba:	4b13      	ldr	r3, [pc, #76]	; (8005508 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d015      	beq.n	80054f0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80054c4:	4b10      	ldr	r3, [pc, #64]	; (8005508 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4798      	blx	r3
 80054cc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80054d0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80054d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	000a      	movs	r2, r1
 80054e0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80054e2:	4613      	mov	r3, r2
 80054e4:	461a      	mov	r2, r3
 80054e6:	4621      	mov	r1, r4
 80054e8:	200d      	movs	r0, #13
 80054ea:	f7ff fbe7 	bl	8004cbc <SEGGER_SYSVIEW_RecordU32x2>
 80054ee:	e006      	b.n	80054fe <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80054f0:	4b06      	ldr	r3, [pc, #24]	; (800550c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4619      	mov	r1, r3
 80054f6:	200c      	movs	r0, #12
 80054f8:	f7ff fba4 	bl	8004c44 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80054fc:	bf00      	nop
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	bd90      	pop	{r4, r7, pc}
 8005506:	bf00      	nop
 8005508:	200142b8 	.word	0x200142b8
 800550c:	e0001004 	.word	0xe0001004

08005510 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005516:	f3ef 8311 	mrs	r3, BASEPRI
 800551a:	f04f 0120 	mov.w	r1, #32
 800551e:	f381 8811 	msr	BASEPRI, r1
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	4819      	ldr	r0, [pc, #100]	; (800558c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005526:	f7ff f945 	bl	80047b4 <_PreparePacket>
 800552a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005530:	4b17      	ldr	r3, [pc, #92]	; (8005590 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005538:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	613b      	str	r3, [r7, #16]
 8005542:	e00b      	b.n	800555c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	b2da      	uxtb	r2, r3
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	1c59      	adds	r1, r3, #1
 800554c:	6179      	str	r1, [r7, #20]
 800554e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	09db      	lsrs	r3, r3, #7
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	2b7f      	cmp	r3, #127	; 0x7f
 8005560:	d8f0      	bhi.n	8005544 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	617a      	str	r2, [r7, #20]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005572:	2202      	movs	r2, #2
 8005574:	6879      	ldr	r1, [r7, #4]
 8005576:	68b8      	ldr	r0, [r7, #8]
 8005578:	f7ff fa0c 	bl	8004994 <_SendPacket>
  RECORD_END();
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f383 8811 	msr	BASEPRI, r3
}
 8005582:	bf00      	nop
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	200142e8 	.word	0x200142e8
 8005590:	e000ed04 	.word	0xe000ed04

08005594 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800559a:	f3ef 8311 	mrs	r3, BASEPRI
 800559e:	f04f 0120 	mov.w	r1, #32
 80055a2:	f381 8811 	msr	BASEPRI, r1
 80055a6:	607b      	str	r3, [r7, #4]
 80055a8:	4807      	ldr	r0, [pc, #28]	; (80055c8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80055aa:	f7ff f903 	bl	80047b4 <_PreparePacket>
 80055ae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80055b0:	2203      	movs	r2, #3
 80055b2:	6839      	ldr	r1, [r7, #0]
 80055b4:	6838      	ldr	r0, [r7, #0]
 80055b6:	f7ff f9ed 	bl	8004994 <_SendPacket>
  RECORD_END();
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f383 8811 	msr	BASEPRI, r3
}
 80055c0:	bf00      	nop
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	200142e8 	.word	0x200142e8

080055cc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055d2:	f3ef 8311 	mrs	r3, BASEPRI
 80055d6:	f04f 0120 	mov.w	r1, #32
 80055da:	f381 8811 	msr	BASEPRI, r1
 80055de:	607b      	str	r3, [r7, #4]
 80055e0:	4807      	ldr	r0, [pc, #28]	; (8005600 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80055e2:	f7ff f8e7 	bl	80047b4 <_PreparePacket>
 80055e6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80055e8:	2212      	movs	r2, #18
 80055ea:	6839      	ldr	r1, [r7, #0]
 80055ec:	6838      	ldr	r0, [r7, #0]
 80055ee:	f7ff f9d1 	bl	8004994 <_SendPacket>
  RECORD_END();
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f383 8811 	msr	BASEPRI, r3
}
 80055f8:	bf00      	nop
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	200142e8 	.word	0x200142e8

08005604 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800560a:	f3ef 8311 	mrs	r3, BASEPRI
 800560e:	f04f 0120 	mov.w	r1, #32
 8005612:	f381 8811 	msr	BASEPRI, r1
 8005616:	607b      	str	r3, [r7, #4]
 8005618:	4807      	ldr	r0, [pc, #28]	; (8005638 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800561a:	f7ff f8cb 	bl	80047b4 <_PreparePacket>
 800561e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005620:	2211      	movs	r2, #17
 8005622:	6839      	ldr	r1, [r7, #0]
 8005624:	6838      	ldr	r0, [r7, #0]
 8005626:	f7ff f9b5 	bl	8004994 <_SendPacket>
  RECORD_END();
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f383 8811 	msr	BASEPRI, r3
}
 8005630:	bf00      	nop
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	200142e8 	.word	0x200142e8

0800563c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005644:	f3ef 8311 	mrs	r3, BASEPRI
 8005648:	f04f 0120 	mov.w	r1, #32
 800564c:	f381 8811 	msr	BASEPRI, r1
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	4819      	ldr	r0, [pc, #100]	; (80056b8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005654:	f7ff f8ae 	bl	80047b4 <_PreparePacket>
 8005658:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800565e:	4b17      	ldr	r3, [pc, #92]	; (80056bc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	61fb      	str	r3, [r7, #28]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	61bb      	str	r3, [r7, #24]
 8005670:	e00b      	b.n	800568a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	b2da      	uxtb	r2, r3
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	1c59      	adds	r1, r3, #1
 800567a:	61f9      	str	r1, [r7, #28]
 800567c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	09db      	lsrs	r3, r3, #7
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	2b7f      	cmp	r3, #127	; 0x7f
 800568e:	d8f0      	bhi.n	8005672 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	61fa      	str	r2, [r7, #28]
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	701a      	strb	r2, [r3, #0]
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80056a0:	2208      	movs	r2, #8
 80056a2:	68f9      	ldr	r1, [r7, #12]
 80056a4:	6938      	ldr	r0, [r7, #16]
 80056a6:	f7ff f975 	bl	8004994 <_SendPacket>
  RECORD_END();
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f383 8811 	msr	BASEPRI, r3
}
 80056b0:	bf00      	nop
 80056b2:	3720      	adds	r7, #32
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	200142e8 	.word	0x200142e8
 80056bc:	200142b8 	.word	0x200142b8

080056c0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056c8:	f3ef 8311 	mrs	r3, BASEPRI
 80056cc:	f04f 0120 	mov.w	r1, #32
 80056d0:	f381 8811 	msr	BASEPRI, r1
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	4819      	ldr	r0, [pc, #100]	; (800573c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80056d8:	f7ff f86c 	bl	80047b4 <_PreparePacket>
 80056dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056e2:	4b17      	ldr	r3, [pc, #92]	; (8005740 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	61fb      	str	r3, [r7, #28]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	61bb      	str	r3, [r7, #24]
 80056f4:	e00b      	b.n	800570e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	1c59      	adds	r1, r3, #1
 80056fe:	61f9      	str	r1, [r7, #28]
 8005700:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	09db      	lsrs	r3, r3, #7
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	2b7f      	cmp	r3, #127	; 0x7f
 8005712:	d8f0      	bhi.n	80056f6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	61fa      	str	r2, [r7, #28]
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005724:	2204      	movs	r2, #4
 8005726:	68f9      	ldr	r1, [r7, #12]
 8005728:	6938      	ldr	r0, [r7, #16]
 800572a:	f7ff f933 	bl	8004994 <_SendPacket>
  RECORD_END();
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f383 8811 	msr	BASEPRI, r3
}
 8005734:	bf00      	nop
 8005736:	3720      	adds	r7, #32
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	200142e8 	.word	0x200142e8
 8005740:	200142b8 	.word	0x200142b8

08005744 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800574c:	f3ef 8311 	mrs	r3, BASEPRI
 8005750:	f04f 0120 	mov.w	r1, #32
 8005754:	f381 8811 	msr	BASEPRI, r1
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	4819      	ldr	r0, [pc, #100]	; (80057c0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800575c:	f7ff f82a 	bl	80047b4 <_PreparePacket>
 8005760:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005766:	4b17      	ldr	r3, [pc, #92]	; (80057c4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	61fb      	str	r3, [r7, #28]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	61bb      	str	r3, [r7, #24]
 8005778:	e00b      	b.n	8005792 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	b2da      	uxtb	r2, r3
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	1c59      	adds	r1, r3, #1
 8005782:	61f9      	str	r1, [r7, #28]
 8005784:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	701a      	strb	r2, [r3, #0]
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	09db      	lsrs	r3, r3, #7
 8005790:	61bb      	str	r3, [r7, #24]
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	2b7f      	cmp	r3, #127	; 0x7f
 8005796:	d8f0      	bhi.n	800577a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	1c5a      	adds	r2, r3, #1
 800579c:	61fa      	str	r2, [r7, #28]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80057a8:	2206      	movs	r2, #6
 80057aa:	68f9      	ldr	r1, [r7, #12]
 80057ac:	6938      	ldr	r0, [r7, #16]
 80057ae:	f7ff f8f1 	bl	8004994 <_SendPacket>
  RECORD_END();
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f383 8811 	msr	BASEPRI, r3
}
 80057b8:	bf00      	nop
 80057ba:	3720      	adds	r7, #32
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	200142e8 	.word	0x200142e8
 80057c4:	200142b8 	.word	0x200142b8

080057c8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08a      	sub	sp, #40	; 0x28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80057d2:	f3ef 8311 	mrs	r3, BASEPRI
 80057d6:	f04f 0120 	mov.w	r1, #32
 80057da:	f381 8811 	msr	BASEPRI, r1
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	4827      	ldr	r0, [pc, #156]	; (8005880 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80057e2:	f7fe ffe7 	bl	80047b4 <_PreparePacket>
 80057e6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80057ec:	4b25      	ldr	r3, [pc, #148]	; (8005884 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	627b      	str	r3, [r7, #36]	; 0x24
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	623b      	str	r3, [r7, #32]
 80057fe:	e00b      	b.n	8005818 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	b2da      	uxtb	r2, r3
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	1c59      	adds	r1, r3, #1
 8005808:	6279      	str	r1, [r7, #36]	; 0x24
 800580a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	09db      	lsrs	r3, r3, #7
 8005816:	623b      	str	r3, [r7, #32]
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	2b7f      	cmp	r3, #127	; 0x7f
 800581c:	d8f0      	bhi.n	8005800 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	627a      	str	r2, [r7, #36]	; 0x24
 8005824:	6a3a      	ldr	r2, [r7, #32]
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	61fb      	str	r3, [r7, #28]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	61bb      	str	r3, [r7, #24]
 8005836:	e00b      	b.n	8005850 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	b2da      	uxtb	r2, r3
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	1c59      	adds	r1, r3, #1
 8005840:	61f9      	str	r1, [r7, #28]
 8005842:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	701a      	strb	r2, [r3, #0]
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	09db      	lsrs	r3, r3, #7
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	2b7f      	cmp	r3, #127	; 0x7f
 8005854:	d8f0      	bhi.n	8005838 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	61fa      	str	r2, [r7, #28]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005866:	2207      	movs	r2, #7
 8005868:	68f9      	ldr	r1, [r7, #12]
 800586a:	6938      	ldr	r0, [r7, #16]
 800586c:	f7ff f892 	bl	8004994 <_SendPacket>
  RECORD_END();
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f383 8811 	msr	BASEPRI, r3
}
 8005876:	bf00      	nop
 8005878:	3728      	adds	r7, #40	; 0x28
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	200142e8 	.word	0x200142e8
 8005884:	200142b8 	.word	0x200142b8

08005888 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005890:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	1ad3      	subs	r3, r2, r3
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	200142b8 	.word	0x200142b8

080058a8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08c      	sub	sp, #48	; 0x30
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80058b2:	4b3b      	ldr	r3, [pc, #236]	; (80059a0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d06d      	beq.n	8005996 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80058ba:	4b39      	ldr	r3, [pc, #228]	; (80059a0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80058c0:	2300      	movs	r3, #0
 80058c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80058c4:	e008      	b.n	80058d8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80058c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80058cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d007      	beq.n	80058e2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	3301      	adds	r3, #1
 80058d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058d8:	79fb      	ldrb	r3, [r7, #7]
 80058da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058dc:	429a      	cmp	r2, r3
 80058de:	d3f2      	bcc.n	80058c6 <SEGGER_SYSVIEW_SendModule+0x1e>
 80058e0:	e000      	b.n	80058e4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80058e2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80058e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d055      	beq.n	8005996 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058ea:	f3ef 8311 	mrs	r3, BASEPRI
 80058ee:	f04f 0120 	mov.w	r1, #32
 80058f2:	f381 8811 	msr	BASEPRI, r1
 80058f6:	617b      	str	r3, [r7, #20]
 80058f8:	482a      	ldr	r0, [pc, #168]	; (80059a4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80058fa:	f7fe ff5b 	bl	80047b4 <_PreparePacket>
 80058fe:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	627b      	str	r3, [r7, #36]	; 0x24
 8005908:	79fb      	ldrb	r3, [r7, #7]
 800590a:	623b      	str	r3, [r7, #32]
 800590c:	e00b      	b.n	8005926 <SEGGER_SYSVIEW_SendModule+0x7e>
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	b2da      	uxtb	r2, r3
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	1c59      	adds	r1, r3, #1
 8005916:	6279      	str	r1, [r7, #36]	; 0x24
 8005918:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	701a      	strb	r2, [r3, #0]
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	09db      	lsrs	r3, r3, #7
 8005924:	623b      	str	r3, [r7, #32]
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	2b7f      	cmp	r3, #127	; 0x7f
 800592a:	d8f0      	bhi.n	800590e <SEGGER_SYSVIEW_SendModule+0x66>
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	627a      	str	r2, [r7, #36]	; 0x24
 8005932:	6a3a      	ldr	r2, [r7, #32]
 8005934:	b2d2      	uxtb	r2, r2
 8005936:	701a      	strb	r2, [r3, #0]
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	61fb      	str	r3, [r7, #28]
 8005940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	e00b      	b.n	8005960 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	b2da      	uxtb	r2, r3
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	1c59      	adds	r1, r3, #1
 8005950:	61f9      	str	r1, [r7, #28]
 8005952:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	701a      	strb	r2, [r3, #0]
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	09db      	lsrs	r3, r3, #7
 800595e:	61bb      	str	r3, [r7, #24]
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	2b7f      	cmp	r3, #127	; 0x7f
 8005964:	d8f0      	bhi.n	8005948 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	61fa      	str	r2, [r7, #28]
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2280      	movs	r2, #128	; 0x80
 800597c:	4619      	mov	r1, r3
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f7fe fec8 	bl	8004714 <_EncodeStr>
 8005984:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005986:	2216      	movs	r2, #22
 8005988:	68f9      	ldr	r1, [r7, #12]
 800598a:	6938      	ldr	r0, [r7, #16]
 800598c:	f7ff f802 	bl	8004994 <_SendPacket>
      RECORD_END();
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005996:	bf00      	nop
 8005998:	3730      	adds	r7, #48	; 0x30
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	200142e0 	.word	0x200142e0
 80059a4:	200142e8 	.word	0x200142e8

080059a8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80059ae:	4b0c      	ldr	r3, [pc, #48]	; (80059e0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00f      	beq.n	80059d6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80059b6:	4b0a      	ldr	r3, [pc, #40]	; (80059e0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1f2      	bne.n	80059bc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80059d6:	bf00      	nop
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	200142e0 	.word	0x200142e0

080059e4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80059ea:	f3ef 8311 	mrs	r3, BASEPRI
 80059ee:	f04f 0120 	mov.w	r1, #32
 80059f2:	f381 8811 	msr	BASEPRI, r1
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	4817      	ldr	r0, [pc, #92]	; (8005a58 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80059fa:	f7fe fedb 	bl	80047b4 <_PreparePacket>
 80059fe:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	4b14      	ldr	r3, [pc, #80]	; (8005a5c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	613b      	str	r3, [r7, #16]
 8005a0e:	e00b      	b.n	8005a28 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	1c59      	adds	r1, r3, #1
 8005a18:	6179      	str	r1, [r7, #20]
 8005a1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	701a      	strb	r2, [r3, #0]
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	09db      	lsrs	r3, r3, #7
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a2c:	d8f0      	bhi.n	8005a10 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	617a      	str	r2, [r7, #20]
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	701a      	strb	r2, [r3, #0]
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005a3e:	221b      	movs	r2, #27
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	68b8      	ldr	r0, [r7, #8]
 8005a44:	f7fe ffa6 	bl	8004994 <_SendPacket>
  RECORD_END();
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f383 8811 	msr	BASEPRI, r3
}
 8005a4e:	bf00      	nop
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	200142e8 	.word	0x200142e8
 8005a5c:	200142e4 	.word	0x200142e4

08005a60 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08a      	sub	sp, #40	; 0x28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a68:	f3ef 8311 	mrs	r3, BASEPRI
 8005a6c:	f04f 0120 	mov.w	r1, #32
 8005a70:	f381 8811 	msr	BASEPRI, r1
 8005a74:	617b      	str	r3, [r7, #20]
 8005a76:	4827      	ldr	r0, [pc, #156]	; (8005b14 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005a78:	f7fe fe9c 	bl	80047b4 <_PreparePacket>
 8005a7c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a7e:	2280      	movs	r2, #128	; 0x80
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	6938      	ldr	r0, [r7, #16]
 8005a84:	f7fe fe46 	bl	8004714 <_EncodeStr>
 8005a88:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8e:	2301      	movs	r3, #1
 8005a90:	623b      	str	r3, [r7, #32]
 8005a92:	e00b      	b.n	8005aac <SEGGER_SYSVIEW_Warn+0x4c>
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	1c59      	adds	r1, r3, #1
 8005a9c:	6279      	str	r1, [r7, #36]	; 0x24
 8005a9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	09db      	lsrs	r3, r3, #7
 8005aaa:	623b      	str	r3, [r7, #32]
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	2b7f      	cmp	r3, #127	; 0x7f
 8005ab0:	d8f0      	bhi.n	8005a94 <SEGGER_SYSVIEW_Warn+0x34>
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	627a      	str	r2, [r7, #36]	; 0x24
 8005ab8:	6a3a      	ldr	r2, [r7, #32]
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	701a      	strb	r2, [r3, #0]
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	61fb      	str	r3, [r7, #28]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	61bb      	str	r3, [r7, #24]
 8005aca:	e00b      	b.n	8005ae4 <SEGGER_SYSVIEW_Warn+0x84>
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	1c59      	adds	r1, r3, #1
 8005ad4:	61f9      	str	r1, [r7, #28]
 8005ad6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ada:	b2d2      	uxtb	r2, r2
 8005adc:	701a      	strb	r2, [r3, #0]
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	09db      	lsrs	r3, r3, #7
 8005ae2:	61bb      	str	r3, [r7, #24]
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ae8:	d8f0      	bhi.n	8005acc <SEGGER_SYSVIEW_Warn+0x6c>
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	61fa      	str	r2, [r7, #28]
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	701a      	strb	r2, [r3, #0]
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005afa:	221a      	movs	r2, #26
 8005afc:	68f9      	ldr	r1, [r7, #12]
 8005afe:	6938      	ldr	r0, [r7, #16]
 8005b00:	f7fe ff48 	bl	8004994 <_SendPacket>
  RECORD_END();
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f383 8811 	msr	BASEPRI, r3
}
 8005b0a:	bf00      	nop
 8005b0c:	3728      	adds	r7, #40	; 0x28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	200142e8 	.word	0x200142e8

08005b18 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
 8005b24:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	6879      	ldr	r1, [r7, #4]
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	f7fe fcfc 	bl	8004528 <SEGGER_RTT_Write>
  return len;
 8005b30:	683b      	ldr	r3, [r7, #0]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <__libc_init_array>:
 8005b3c:	b570      	push	{r4, r5, r6, lr}
 8005b3e:	4d0d      	ldr	r5, [pc, #52]	; (8005b74 <__libc_init_array+0x38>)
 8005b40:	4c0d      	ldr	r4, [pc, #52]	; (8005b78 <__libc_init_array+0x3c>)
 8005b42:	1b64      	subs	r4, r4, r5
 8005b44:	10a4      	asrs	r4, r4, #2
 8005b46:	2600      	movs	r6, #0
 8005b48:	42a6      	cmp	r6, r4
 8005b4a:	d109      	bne.n	8005b60 <__libc_init_array+0x24>
 8005b4c:	4d0b      	ldr	r5, [pc, #44]	; (8005b7c <__libc_init_array+0x40>)
 8005b4e:	4c0c      	ldr	r4, [pc, #48]	; (8005b80 <__libc_init_array+0x44>)
 8005b50:	f000 fcfe 	bl	8006550 <_init>
 8005b54:	1b64      	subs	r4, r4, r5
 8005b56:	10a4      	asrs	r4, r4, #2
 8005b58:	2600      	movs	r6, #0
 8005b5a:	42a6      	cmp	r6, r4
 8005b5c:	d105      	bne.n	8005b6a <__libc_init_array+0x2e>
 8005b5e:	bd70      	pop	{r4, r5, r6, pc}
 8005b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b64:	4798      	blx	r3
 8005b66:	3601      	adds	r6, #1
 8005b68:	e7ee      	b.n	8005b48 <__libc_init_array+0xc>
 8005b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b6e:	4798      	blx	r3
 8005b70:	3601      	adds	r6, #1
 8005b72:	e7f2      	b.n	8005b5a <__libc_init_array+0x1e>
 8005b74:	08006740 	.word	0x08006740
 8005b78:	08006740 	.word	0x08006740
 8005b7c:	08006740 	.word	0x08006740
 8005b80:	08006744 	.word	0x08006744

08005b84 <memcmp>:
 8005b84:	b530      	push	{r4, r5, lr}
 8005b86:	3901      	subs	r1, #1
 8005b88:	2400      	movs	r4, #0
 8005b8a:	42a2      	cmp	r2, r4
 8005b8c:	d101      	bne.n	8005b92 <memcmp+0xe>
 8005b8e:	2000      	movs	r0, #0
 8005b90:	e005      	b.n	8005b9e <memcmp+0x1a>
 8005b92:	5d03      	ldrb	r3, [r0, r4]
 8005b94:	3401      	adds	r4, #1
 8005b96:	5d0d      	ldrb	r5, [r1, r4]
 8005b98:	42ab      	cmp	r3, r5
 8005b9a:	d0f6      	beq.n	8005b8a <memcmp+0x6>
 8005b9c:	1b58      	subs	r0, r3, r5
 8005b9e:	bd30      	pop	{r4, r5, pc}

08005ba0 <memcpy>:
 8005ba0:	440a      	add	r2, r1
 8005ba2:	4291      	cmp	r1, r2
 8005ba4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ba8:	d100      	bne.n	8005bac <memcpy+0xc>
 8005baa:	4770      	bx	lr
 8005bac:	b510      	push	{r4, lr}
 8005bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bb6:	4291      	cmp	r1, r2
 8005bb8:	d1f9      	bne.n	8005bae <memcpy+0xe>
 8005bba:	bd10      	pop	{r4, pc}

08005bbc <memset>:
 8005bbc:	4402      	add	r2, r0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d100      	bne.n	8005bc6 <memset+0xa>
 8005bc4:	4770      	bx	lr
 8005bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bca:	e7f9      	b.n	8005bc0 <memset+0x4>

08005bcc <_puts_r>:
 8005bcc:	b570      	push	{r4, r5, r6, lr}
 8005bce:	460e      	mov	r6, r1
 8005bd0:	4605      	mov	r5, r0
 8005bd2:	b118      	cbz	r0, 8005bdc <_puts_r+0x10>
 8005bd4:	6983      	ldr	r3, [r0, #24]
 8005bd6:	b90b      	cbnz	r3, 8005bdc <_puts_r+0x10>
 8005bd8:	f000 fa48 	bl	800606c <__sinit>
 8005bdc:	69ab      	ldr	r3, [r5, #24]
 8005bde:	68ac      	ldr	r4, [r5, #8]
 8005be0:	b913      	cbnz	r3, 8005be8 <_puts_r+0x1c>
 8005be2:	4628      	mov	r0, r5
 8005be4:	f000 fa42 	bl	800606c <__sinit>
 8005be8:	4b2c      	ldr	r3, [pc, #176]	; (8005c9c <_puts_r+0xd0>)
 8005bea:	429c      	cmp	r4, r3
 8005bec:	d120      	bne.n	8005c30 <_puts_r+0x64>
 8005bee:	686c      	ldr	r4, [r5, #4]
 8005bf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bf2:	07db      	lsls	r3, r3, #31
 8005bf4:	d405      	bmi.n	8005c02 <_puts_r+0x36>
 8005bf6:	89a3      	ldrh	r3, [r4, #12]
 8005bf8:	0598      	lsls	r0, r3, #22
 8005bfa:	d402      	bmi.n	8005c02 <_puts_r+0x36>
 8005bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bfe:	f000 fad3 	bl	80061a8 <__retarget_lock_acquire_recursive>
 8005c02:	89a3      	ldrh	r3, [r4, #12]
 8005c04:	0719      	lsls	r1, r3, #28
 8005c06:	d51d      	bpl.n	8005c44 <_puts_r+0x78>
 8005c08:	6923      	ldr	r3, [r4, #16]
 8005c0a:	b1db      	cbz	r3, 8005c44 <_puts_r+0x78>
 8005c0c:	3e01      	subs	r6, #1
 8005c0e:	68a3      	ldr	r3, [r4, #8]
 8005c10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c14:	3b01      	subs	r3, #1
 8005c16:	60a3      	str	r3, [r4, #8]
 8005c18:	bb39      	cbnz	r1, 8005c6a <_puts_r+0x9e>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	da38      	bge.n	8005c90 <_puts_r+0xc4>
 8005c1e:	4622      	mov	r2, r4
 8005c20:	210a      	movs	r1, #10
 8005c22:	4628      	mov	r0, r5
 8005c24:	f000 f848 	bl	8005cb8 <__swbuf_r>
 8005c28:	3001      	adds	r0, #1
 8005c2a:	d011      	beq.n	8005c50 <_puts_r+0x84>
 8005c2c:	250a      	movs	r5, #10
 8005c2e:	e011      	b.n	8005c54 <_puts_r+0x88>
 8005c30:	4b1b      	ldr	r3, [pc, #108]	; (8005ca0 <_puts_r+0xd4>)
 8005c32:	429c      	cmp	r4, r3
 8005c34:	d101      	bne.n	8005c3a <_puts_r+0x6e>
 8005c36:	68ac      	ldr	r4, [r5, #8]
 8005c38:	e7da      	b.n	8005bf0 <_puts_r+0x24>
 8005c3a:	4b1a      	ldr	r3, [pc, #104]	; (8005ca4 <_puts_r+0xd8>)
 8005c3c:	429c      	cmp	r4, r3
 8005c3e:	bf08      	it	eq
 8005c40:	68ec      	ldreq	r4, [r5, #12]
 8005c42:	e7d5      	b.n	8005bf0 <_puts_r+0x24>
 8005c44:	4621      	mov	r1, r4
 8005c46:	4628      	mov	r0, r5
 8005c48:	f000 f888 	bl	8005d5c <__swsetup_r>
 8005c4c:	2800      	cmp	r0, #0
 8005c4e:	d0dd      	beq.n	8005c0c <_puts_r+0x40>
 8005c50:	f04f 35ff 	mov.w	r5, #4294967295
 8005c54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c56:	07da      	lsls	r2, r3, #31
 8005c58:	d405      	bmi.n	8005c66 <_puts_r+0x9a>
 8005c5a:	89a3      	ldrh	r3, [r4, #12]
 8005c5c:	059b      	lsls	r3, r3, #22
 8005c5e:	d402      	bmi.n	8005c66 <_puts_r+0x9a>
 8005c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c62:	f000 faa2 	bl	80061aa <__retarget_lock_release_recursive>
 8005c66:	4628      	mov	r0, r5
 8005c68:	bd70      	pop	{r4, r5, r6, pc}
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	da04      	bge.n	8005c78 <_puts_r+0xac>
 8005c6e:	69a2      	ldr	r2, [r4, #24]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	dc06      	bgt.n	8005c82 <_puts_r+0xb6>
 8005c74:	290a      	cmp	r1, #10
 8005c76:	d004      	beq.n	8005c82 <_puts_r+0xb6>
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	6022      	str	r2, [r4, #0]
 8005c7e:	7019      	strb	r1, [r3, #0]
 8005c80:	e7c5      	b.n	8005c0e <_puts_r+0x42>
 8005c82:	4622      	mov	r2, r4
 8005c84:	4628      	mov	r0, r5
 8005c86:	f000 f817 	bl	8005cb8 <__swbuf_r>
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	d1bf      	bne.n	8005c0e <_puts_r+0x42>
 8005c8e:	e7df      	b.n	8005c50 <_puts_r+0x84>
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	250a      	movs	r5, #10
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	6022      	str	r2, [r4, #0]
 8005c98:	701d      	strb	r5, [r3, #0]
 8005c9a:	e7db      	b.n	8005c54 <_puts_r+0x88>
 8005c9c:	08006700 	.word	0x08006700
 8005ca0:	08006720 	.word	0x08006720
 8005ca4:	080066e0 	.word	0x080066e0

08005ca8 <puts>:
 8005ca8:	4b02      	ldr	r3, [pc, #8]	; (8005cb4 <puts+0xc>)
 8005caa:	4601      	mov	r1, r0
 8005cac:	6818      	ldr	r0, [r3, #0]
 8005cae:	f7ff bf8d 	b.w	8005bcc <_puts_r>
 8005cb2:	bf00      	nop
 8005cb4:	20000014 	.word	0x20000014

08005cb8 <__swbuf_r>:
 8005cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cba:	460e      	mov	r6, r1
 8005cbc:	4614      	mov	r4, r2
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	b118      	cbz	r0, 8005cca <__swbuf_r+0x12>
 8005cc2:	6983      	ldr	r3, [r0, #24]
 8005cc4:	b90b      	cbnz	r3, 8005cca <__swbuf_r+0x12>
 8005cc6:	f000 f9d1 	bl	800606c <__sinit>
 8005cca:	4b21      	ldr	r3, [pc, #132]	; (8005d50 <__swbuf_r+0x98>)
 8005ccc:	429c      	cmp	r4, r3
 8005cce:	d12b      	bne.n	8005d28 <__swbuf_r+0x70>
 8005cd0:	686c      	ldr	r4, [r5, #4]
 8005cd2:	69a3      	ldr	r3, [r4, #24]
 8005cd4:	60a3      	str	r3, [r4, #8]
 8005cd6:	89a3      	ldrh	r3, [r4, #12]
 8005cd8:	071a      	lsls	r2, r3, #28
 8005cda:	d52f      	bpl.n	8005d3c <__swbuf_r+0x84>
 8005cdc:	6923      	ldr	r3, [r4, #16]
 8005cde:	b36b      	cbz	r3, 8005d3c <__swbuf_r+0x84>
 8005ce0:	6923      	ldr	r3, [r4, #16]
 8005ce2:	6820      	ldr	r0, [r4, #0]
 8005ce4:	1ac0      	subs	r0, r0, r3
 8005ce6:	6963      	ldr	r3, [r4, #20]
 8005ce8:	b2f6      	uxtb	r6, r6
 8005cea:	4283      	cmp	r3, r0
 8005cec:	4637      	mov	r7, r6
 8005cee:	dc04      	bgt.n	8005cfa <__swbuf_r+0x42>
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	f000 f926 	bl	8005f44 <_fflush_r>
 8005cf8:	bb30      	cbnz	r0, 8005d48 <__swbuf_r+0x90>
 8005cfa:	68a3      	ldr	r3, [r4, #8]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	60a3      	str	r3, [r4, #8]
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	6022      	str	r2, [r4, #0]
 8005d06:	701e      	strb	r6, [r3, #0]
 8005d08:	6963      	ldr	r3, [r4, #20]
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	4283      	cmp	r3, r0
 8005d0e:	d004      	beq.n	8005d1a <__swbuf_r+0x62>
 8005d10:	89a3      	ldrh	r3, [r4, #12]
 8005d12:	07db      	lsls	r3, r3, #31
 8005d14:	d506      	bpl.n	8005d24 <__swbuf_r+0x6c>
 8005d16:	2e0a      	cmp	r6, #10
 8005d18:	d104      	bne.n	8005d24 <__swbuf_r+0x6c>
 8005d1a:	4621      	mov	r1, r4
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	f000 f911 	bl	8005f44 <_fflush_r>
 8005d22:	b988      	cbnz	r0, 8005d48 <__swbuf_r+0x90>
 8005d24:	4638      	mov	r0, r7
 8005d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d28:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <__swbuf_r+0x9c>)
 8005d2a:	429c      	cmp	r4, r3
 8005d2c:	d101      	bne.n	8005d32 <__swbuf_r+0x7a>
 8005d2e:	68ac      	ldr	r4, [r5, #8]
 8005d30:	e7cf      	b.n	8005cd2 <__swbuf_r+0x1a>
 8005d32:	4b09      	ldr	r3, [pc, #36]	; (8005d58 <__swbuf_r+0xa0>)
 8005d34:	429c      	cmp	r4, r3
 8005d36:	bf08      	it	eq
 8005d38:	68ec      	ldreq	r4, [r5, #12]
 8005d3a:	e7ca      	b.n	8005cd2 <__swbuf_r+0x1a>
 8005d3c:	4621      	mov	r1, r4
 8005d3e:	4628      	mov	r0, r5
 8005d40:	f000 f80c 	bl	8005d5c <__swsetup_r>
 8005d44:	2800      	cmp	r0, #0
 8005d46:	d0cb      	beq.n	8005ce0 <__swbuf_r+0x28>
 8005d48:	f04f 37ff 	mov.w	r7, #4294967295
 8005d4c:	e7ea      	b.n	8005d24 <__swbuf_r+0x6c>
 8005d4e:	bf00      	nop
 8005d50:	08006700 	.word	0x08006700
 8005d54:	08006720 	.word	0x08006720
 8005d58:	080066e0 	.word	0x080066e0

08005d5c <__swsetup_r>:
 8005d5c:	4b32      	ldr	r3, [pc, #200]	; (8005e28 <__swsetup_r+0xcc>)
 8005d5e:	b570      	push	{r4, r5, r6, lr}
 8005d60:	681d      	ldr	r5, [r3, #0]
 8005d62:	4606      	mov	r6, r0
 8005d64:	460c      	mov	r4, r1
 8005d66:	b125      	cbz	r5, 8005d72 <__swsetup_r+0x16>
 8005d68:	69ab      	ldr	r3, [r5, #24]
 8005d6a:	b913      	cbnz	r3, 8005d72 <__swsetup_r+0x16>
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	f000 f97d 	bl	800606c <__sinit>
 8005d72:	4b2e      	ldr	r3, [pc, #184]	; (8005e2c <__swsetup_r+0xd0>)
 8005d74:	429c      	cmp	r4, r3
 8005d76:	d10f      	bne.n	8005d98 <__swsetup_r+0x3c>
 8005d78:	686c      	ldr	r4, [r5, #4]
 8005d7a:	89a3      	ldrh	r3, [r4, #12]
 8005d7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d80:	0719      	lsls	r1, r3, #28
 8005d82:	d42c      	bmi.n	8005dde <__swsetup_r+0x82>
 8005d84:	06dd      	lsls	r5, r3, #27
 8005d86:	d411      	bmi.n	8005dac <__swsetup_r+0x50>
 8005d88:	2309      	movs	r3, #9
 8005d8a:	6033      	str	r3, [r6, #0]
 8005d8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d90:	81a3      	strh	r3, [r4, #12]
 8005d92:	f04f 30ff 	mov.w	r0, #4294967295
 8005d96:	e03e      	b.n	8005e16 <__swsetup_r+0xba>
 8005d98:	4b25      	ldr	r3, [pc, #148]	; (8005e30 <__swsetup_r+0xd4>)
 8005d9a:	429c      	cmp	r4, r3
 8005d9c:	d101      	bne.n	8005da2 <__swsetup_r+0x46>
 8005d9e:	68ac      	ldr	r4, [r5, #8]
 8005da0:	e7eb      	b.n	8005d7a <__swsetup_r+0x1e>
 8005da2:	4b24      	ldr	r3, [pc, #144]	; (8005e34 <__swsetup_r+0xd8>)
 8005da4:	429c      	cmp	r4, r3
 8005da6:	bf08      	it	eq
 8005da8:	68ec      	ldreq	r4, [r5, #12]
 8005daa:	e7e6      	b.n	8005d7a <__swsetup_r+0x1e>
 8005dac:	0758      	lsls	r0, r3, #29
 8005dae:	d512      	bpl.n	8005dd6 <__swsetup_r+0x7a>
 8005db0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005db2:	b141      	cbz	r1, 8005dc6 <__swsetup_r+0x6a>
 8005db4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005db8:	4299      	cmp	r1, r3
 8005dba:	d002      	beq.n	8005dc2 <__swsetup_r+0x66>
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	f000 fa59 	bl	8006274 <_free_r>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	6363      	str	r3, [r4, #52]	; 0x34
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005dcc:	81a3      	strh	r3, [r4, #12]
 8005dce:	2300      	movs	r3, #0
 8005dd0:	6063      	str	r3, [r4, #4]
 8005dd2:	6923      	ldr	r3, [r4, #16]
 8005dd4:	6023      	str	r3, [r4, #0]
 8005dd6:	89a3      	ldrh	r3, [r4, #12]
 8005dd8:	f043 0308 	orr.w	r3, r3, #8
 8005ddc:	81a3      	strh	r3, [r4, #12]
 8005dde:	6923      	ldr	r3, [r4, #16]
 8005de0:	b94b      	cbnz	r3, 8005df6 <__swsetup_r+0x9a>
 8005de2:	89a3      	ldrh	r3, [r4, #12]
 8005de4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dec:	d003      	beq.n	8005df6 <__swsetup_r+0x9a>
 8005dee:	4621      	mov	r1, r4
 8005df0:	4630      	mov	r0, r6
 8005df2:	f000 f9ff 	bl	80061f4 <__smakebuf_r>
 8005df6:	89a0      	ldrh	r0, [r4, #12]
 8005df8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dfc:	f010 0301 	ands.w	r3, r0, #1
 8005e00:	d00a      	beq.n	8005e18 <__swsetup_r+0xbc>
 8005e02:	2300      	movs	r3, #0
 8005e04:	60a3      	str	r3, [r4, #8]
 8005e06:	6963      	ldr	r3, [r4, #20]
 8005e08:	425b      	negs	r3, r3
 8005e0a:	61a3      	str	r3, [r4, #24]
 8005e0c:	6923      	ldr	r3, [r4, #16]
 8005e0e:	b943      	cbnz	r3, 8005e22 <__swsetup_r+0xc6>
 8005e10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e14:	d1ba      	bne.n	8005d8c <__swsetup_r+0x30>
 8005e16:	bd70      	pop	{r4, r5, r6, pc}
 8005e18:	0781      	lsls	r1, r0, #30
 8005e1a:	bf58      	it	pl
 8005e1c:	6963      	ldrpl	r3, [r4, #20]
 8005e1e:	60a3      	str	r3, [r4, #8]
 8005e20:	e7f4      	b.n	8005e0c <__swsetup_r+0xb0>
 8005e22:	2000      	movs	r0, #0
 8005e24:	e7f7      	b.n	8005e16 <__swsetup_r+0xba>
 8005e26:	bf00      	nop
 8005e28:	20000014 	.word	0x20000014
 8005e2c:	08006700 	.word	0x08006700
 8005e30:	08006720 	.word	0x08006720
 8005e34:	080066e0 	.word	0x080066e0

08005e38 <__sflush_r>:
 8005e38:	898a      	ldrh	r2, [r1, #12]
 8005e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e3e:	4605      	mov	r5, r0
 8005e40:	0710      	lsls	r0, r2, #28
 8005e42:	460c      	mov	r4, r1
 8005e44:	d458      	bmi.n	8005ef8 <__sflush_r+0xc0>
 8005e46:	684b      	ldr	r3, [r1, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	dc05      	bgt.n	8005e58 <__sflush_r+0x20>
 8005e4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	dc02      	bgt.n	8005e58 <__sflush_r+0x20>
 8005e52:	2000      	movs	r0, #0
 8005e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e5a:	2e00      	cmp	r6, #0
 8005e5c:	d0f9      	beq.n	8005e52 <__sflush_r+0x1a>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e64:	682f      	ldr	r7, [r5, #0]
 8005e66:	602b      	str	r3, [r5, #0]
 8005e68:	d032      	beq.n	8005ed0 <__sflush_r+0x98>
 8005e6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e6c:	89a3      	ldrh	r3, [r4, #12]
 8005e6e:	075a      	lsls	r2, r3, #29
 8005e70:	d505      	bpl.n	8005e7e <__sflush_r+0x46>
 8005e72:	6863      	ldr	r3, [r4, #4]
 8005e74:	1ac0      	subs	r0, r0, r3
 8005e76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e78:	b10b      	cbz	r3, 8005e7e <__sflush_r+0x46>
 8005e7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e7c:	1ac0      	subs	r0, r0, r3
 8005e7e:	2300      	movs	r3, #0
 8005e80:	4602      	mov	r2, r0
 8005e82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e84:	6a21      	ldr	r1, [r4, #32]
 8005e86:	4628      	mov	r0, r5
 8005e88:	47b0      	blx	r6
 8005e8a:	1c43      	adds	r3, r0, #1
 8005e8c:	89a3      	ldrh	r3, [r4, #12]
 8005e8e:	d106      	bne.n	8005e9e <__sflush_r+0x66>
 8005e90:	6829      	ldr	r1, [r5, #0]
 8005e92:	291d      	cmp	r1, #29
 8005e94:	d82c      	bhi.n	8005ef0 <__sflush_r+0xb8>
 8005e96:	4a2a      	ldr	r2, [pc, #168]	; (8005f40 <__sflush_r+0x108>)
 8005e98:	40ca      	lsrs	r2, r1
 8005e9a:	07d6      	lsls	r6, r2, #31
 8005e9c:	d528      	bpl.n	8005ef0 <__sflush_r+0xb8>
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	6062      	str	r2, [r4, #4]
 8005ea2:	04d9      	lsls	r1, r3, #19
 8005ea4:	6922      	ldr	r2, [r4, #16]
 8005ea6:	6022      	str	r2, [r4, #0]
 8005ea8:	d504      	bpl.n	8005eb4 <__sflush_r+0x7c>
 8005eaa:	1c42      	adds	r2, r0, #1
 8005eac:	d101      	bne.n	8005eb2 <__sflush_r+0x7a>
 8005eae:	682b      	ldr	r3, [r5, #0]
 8005eb0:	b903      	cbnz	r3, 8005eb4 <__sflush_r+0x7c>
 8005eb2:	6560      	str	r0, [r4, #84]	; 0x54
 8005eb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005eb6:	602f      	str	r7, [r5, #0]
 8005eb8:	2900      	cmp	r1, #0
 8005eba:	d0ca      	beq.n	8005e52 <__sflush_r+0x1a>
 8005ebc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ec0:	4299      	cmp	r1, r3
 8005ec2:	d002      	beq.n	8005eca <__sflush_r+0x92>
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	f000 f9d5 	bl	8006274 <_free_r>
 8005eca:	2000      	movs	r0, #0
 8005ecc:	6360      	str	r0, [r4, #52]	; 0x34
 8005ece:	e7c1      	b.n	8005e54 <__sflush_r+0x1c>
 8005ed0:	6a21      	ldr	r1, [r4, #32]
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	47b0      	blx	r6
 8005ed8:	1c41      	adds	r1, r0, #1
 8005eda:	d1c7      	bne.n	8005e6c <__sflush_r+0x34>
 8005edc:	682b      	ldr	r3, [r5, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0c4      	beq.n	8005e6c <__sflush_r+0x34>
 8005ee2:	2b1d      	cmp	r3, #29
 8005ee4:	d001      	beq.n	8005eea <__sflush_r+0xb2>
 8005ee6:	2b16      	cmp	r3, #22
 8005ee8:	d101      	bne.n	8005eee <__sflush_r+0xb6>
 8005eea:	602f      	str	r7, [r5, #0]
 8005eec:	e7b1      	b.n	8005e52 <__sflush_r+0x1a>
 8005eee:	89a3      	ldrh	r3, [r4, #12]
 8005ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ef4:	81a3      	strh	r3, [r4, #12]
 8005ef6:	e7ad      	b.n	8005e54 <__sflush_r+0x1c>
 8005ef8:	690f      	ldr	r7, [r1, #16]
 8005efa:	2f00      	cmp	r7, #0
 8005efc:	d0a9      	beq.n	8005e52 <__sflush_r+0x1a>
 8005efe:	0793      	lsls	r3, r2, #30
 8005f00:	680e      	ldr	r6, [r1, #0]
 8005f02:	bf08      	it	eq
 8005f04:	694b      	ldreq	r3, [r1, #20]
 8005f06:	600f      	str	r7, [r1, #0]
 8005f08:	bf18      	it	ne
 8005f0a:	2300      	movne	r3, #0
 8005f0c:	eba6 0807 	sub.w	r8, r6, r7
 8005f10:	608b      	str	r3, [r1, #8]
 8005f12:	f1b8 0f00 	cmp.w	r8, #0
 8005f16:	dd9c      	ble.n	8005e52 <__sflush_r+0x1a>
 8005f18:	6a21      	ldr	r1, [r4, #32]
 8005f1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f1c:	4643      	mov	r3, r8
 8005f1e:	463a      	mov	r2, r7
 8005f20:	4628      	mov	r0, r5
 8005f22:	47b0      	blx	r6
 8005f24:	2800      	cmp	r0, #0
 8005f26:	dc06      	bgt.n	8005f36 <__sflush_r+0xfe>
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f2e:	81a3      	strh	r3, [r4, #12]
 8005f30:	f04f 30ff 	mov.w	r0, #4294967295
 8005f34:	e78e      	b.n	8005e54 <__sflush_r+0x1c>
 8005f36:	4407      	add	r7, r0
 8005f38:	eba8 0800 	sub.w	r8, r8, r0
 8005f3c:	e7e9      	b.n	8005f12 <__sflush_r+0xda>
 8005f3e:	bf00      	nop
 8005f40:	20400001 	.word	0x20400001

08005f44 <_fflush_r>:
 8005f44:	b538      	push	{r3, r4, r5, lr}
 8005f46:	690b      	ldr	r3, [r1, #16]
 8005f48:	4605      	mov	r5, r0
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	b913      	cbnz	r3, 8005f54 <_fflush_r+0x10>
 8005f4e:	2500      	movs	r5, #0
 8005f50:	4628      	mov	r0, r5
 8005f52:	bd38      	pop	{r3, r4, r5, pc}
 8005f54:	b118      	cbz	r0, 8005f5e <_fflush_r+0x1a>
 8005f56:	6983      	ldr	r3, [r0, #24]
 8005f58:	b90b      	cbnz	r3, 8005f5e <_fflush_r+0x1a>
 8005f5a:	f000 f887 	bl	800606c <__sinit>
 8005f5e:	4b14      	ldr	r3, [pc, #80]	; (8005fb0 <_fflush_r+0x6c>)
 8005f60:	429c      	cmp	r4, r3
 8005f62:	d11b      	bne.n	8005f9c <_fflush_r+0x58>
 8005f64:	686c      	ldr	r4, [r5, #4]
 8005f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0ef      	beq.n	8005f4e <_fflush_r+0xa>
 8005f6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f70:	07d0      	lsls	r0, r2, #31
 8005f72:	d404      	bmi.n	8005f7e <_fflush_r+0x3a>
 8005f74:	0599      	lsls	r1, r3, #22
 8005f76:	d402      	bmi.n	8005f7e <_fflush_r+0x3a>
 8005f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f7a:	f000 f915 	bl	80061a8 <__retarget_lock_acquire_recursive>
 8005f7e:	4628      	mov	r0, r5
 8005f80:	4621      	mov	r1, r4
 8005f82:	f7ff ff59 	bl	8005e38 <__sflush_r>
 8005f86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f88:	07da      	lsls	r2, r3, #31
 8005f8a:	4605      	mov	r5, r0
 8005f8c:	d4e0      	bmi.n	8005f50 <_fflush_r+0xc>
 8005f8e:	89a3      	ldrh	r3, [r4, #12]
 8005f90:	059b      	lsls	r3, r3, #22
 8005f92:	d4dd      	bmi.n	8005f50 <_fflush_r+0xc>
 8005f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f96:	f000 f908 	bl	80061aa <__retarget_lock_release_recursive>
 8005f9a:	e7d9      	b.n	8005f50 <_fflush_r+0xc>
 8005f9c:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <_fflush_r+0x70>)
 8005f9e:	429c      	cmp	r4, r3
 8005fa0:	d101      	bne.n	8005fa6 <_fflush_r+0x62>
 8005fa2:	68ac      	ldr	r4, [r5, #8]
 8005fa4:	e7df      	b.n	8005f66 <_fflush_r+0x22>
 8005fa6:	4b04      	ldr	r3, [pc, #16]	; (8005fb8 <_fflush_r+0x74>)
 8005fa8:	429c      	cmp	r4, r3
 8005faa:	bf08      	it	eq
 8005fac:	68ec      	ldreq	r4, [r5, #12]
 8005fae:	e7da      	b.n	8005f66 <_fflush_r+0x22>
 8005fb0:	08006700 	.word	0x08006700
 8005fb4:	08006720 	.word	0x08006720
 8005fb8:	080066e0 	.word	0x080066e0

08005fbc <std>:
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	b510      	push	{r4, lr}
 8005fc0:	4604      	mov	r4, r0
 8005fc2:	e9c0 3300 	strd	r3, r3, [r0]
 8005fc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fca:	6083      	str	r3, [r0, #8]
 8005fcc:	8181      	strh	r1, [r0, #12]
 8005fce:	6643      	str	r3, [r0, #100]	; 0x64
 8005fd0:	81c2      	strh	r2, [r0, #14]
 8005fd2:	6183      	str	r3, [r0, #24]
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	2208      	movs	r2, #8
 8005fd8:	305c      	adds	r0, #92	; 0x5c
 8005fda:	f7ff fdef 	bl	8005bbc <memset>
 8005fde:	4b05      	ldr	r3, [pc, #20]	; (8005ff4 <std+0x38>)
 8005fe0:	6263      	str	r3, [r4, #36]	; 0x24
 8005fe2:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <std+0x3c>)
 8005fe4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005fe6:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <std+0x40>)
 8005fe8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005fea:	4b05      	ldr	r3, [pc, #20]	; (8006000 <std+0x44>)
 8005fec:	6224      	str	r4, [r4, #32]
 8005fee:	6323      	str	r3, [r4, #48]	; 0x30
 8005ff0:	bd10      	pop	{r4, pc}
 8005ff2:	bf00      	nop
 8005ff4:	080063e9 	.word	0x080063e9
 8005ff8:	0800640b 	.word	0x0800640b
 8005ffc:	08006443 	.word	0x08006443
 8006000:	08006467 	.word	0x08006467

08006004 <_cleanup_r>:
 8006004:	4901      	ldr	r1, [pc, #4]	; (800600c <_cleanup_r+0x8>)
 8006006:	f000 b8af 	b.w	8006168 <_fwalk_reent>
 800600a:	bf00      	nop
 800600c:	08005f45 	.word	0x08005f45

08006010 <__sfmoreglue>:
 8006010:	b570      	push	{r4, r5, r6, lr}
 8006012:	1e4a      	subs	r2, r1, #1
 8006014:	2568      	movs	r5, #104	; 0x68
 8006016:	4355      	muls	r5, r2
 8006018:	460e      	mov	r6, r1
 800601a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800601e:	f000 f979 	bl	8006314 <_malloc_r>
 8006022:	4604      	mov	r4, r0
 8006024:	b140      	cbz	r0, 8006038 <__sfmoreglue+0x28>
 8006026:	2100      	movs	r1, #0
 8006028:	e9c0 1600 	strd	r1, r6, [r0]
 800602c:	300c      	adds	r0, #12
 800602e:	60a0      	str	r0, [r4, #8]
 8006030:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006034:	f7ff fdc2 	bl	8005bbc <memset>
 8006038:	4620      	mov	r0, r4
 800603a:	bd70      	pop	{r4, r5, r6, pc}

0800603c <__sfp_lock_acquire>:
 800603c:	4801      	ldr	r0, [pc, #4]	; (8006044 <__sfp_lock_acquire+0x8>)
 800603e:	f000 b8b3 	b.w	80061a8 <__retarget_lock_acquire_recursive>
 8006042:	bf00      	nop
 8006044:	200144cc 	.word	0x200144cc

08006048 <__sfp_lock_release>:
 8006048:	4801      	ldr	r0, [pc, #4]	; (8006050 <__sfp_lock_release+0x8>)
 800604a:	f000 b8ae 	b.w	80061aa <__retarget_lock_release_recursive>
 800604e:	bf00      	nop
 8006050:	200144cc 	.word	0x200144cc

08006054 <__sinit_lock_acquire>:
 8006054:	4801      	ldr	r0, [pc, #4]	; (800605c <__sinit_lock_acquire+0x8>)
 8006056:	f000 b8a7 	b.w	80061a8 <__retarget_lock_acquire_recursive>
 800605a:	bf00      	nop
 800605c:	200144c7 	.word	0x200144c7

08006060 <__sinit_lock_release>:
 8006060:	4801      	ldr	r0, [pc, #4]	; (8006068 <__sinit_lock_release+0x8>)
 8006062:	f000 b8a2 	b.w	80061aa <__retarget_lock_release_recursive>
 8006066:	bf00      	nop
 8006068:	200144c7 	.word	0x200144c7

0800606c <__sinit>:
 800606c:	b510      	push	{r4, lr}
 800606e:	4604      	mov	r4, r0
 8006070:	f7ff fff0 	bl	8006054 <__sinit_lock_acquire>
 8006074:	69a3      	ldr	r3, [r4, #24]
 8006076:	b11b      	cbz	r3, 8006080 <__sinit+0x14>
 8006078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800607c:	f7ff bff0 	b.w	8006060 <__sinit_lock_release>
 8006080:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006084:	6523      	str	r3, [r4, #80]	; 0x50
 8006086:	4b13      	ldr	r3, [pc, #76]	; (80060d4 <__sinit+0x68>)
 8006088:	4a13      	ldr	r2, [pc, #76]	; (80060d8 <__sinit+0x6c>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	62a2      	str	r2, [r4, #40]	; 0x28
 800608e:	42a3      	cmp	r3, r4
 8006090:	bf04      	itt	eq
 8006092:	2301      	moveq	r3, #1
 8006094:	61a3      	streq	r3, [r4, #24]
 8006096:	4620      	mov	r0, r4
 8006098:	f000 f820 	bl	80060dc <__sfp>
 800609c:	6060      	str	r0, [r4, #4]
 800609e:	4620      	mov	r0, r4
 80060a0:	f000 f81c 	bl	80060dc <__sfp>
 80060a4:	60a0      	str	r0, [r4, #8]
 80060a6:	4620      	mov	r0, r4
 80060a8:	f000 f818 	bl	80060dc <__sfp>
 80060ac:	2200      	movs	r2, #0
 80060ae:	60e0      	str	r0, [r4, #12]
 80060b0:	2104      	movs	r1, #4
 80060b2:	6860      	ldr	r0, [r4, #4]
 80060b4:	f7ff ff82 	bl	8005fbc <std>
 80060b8:	68a0      	ldr	r0, [r4, #8]
 80060ba:	2201      	movs	r2, #1
 80060bc:	2109      	movs	r1, #9
 80060be:	f7ff ff7d 	bl	8005fbc <std>
 80060c2:	68e0      	ldr	r0, [r4, #12]
 80060c4:	2202      	movs	r2, #2
 80060c6:	2112      	movs	r1, #18
 80060c8:	f7ff ff78 	bl	8005fbc <std>
 80060cc:	2301      	movs	r3, #1
 80060ce:	61a3      	str	r3, [r4, #24]
 80060d0:	e7d2      	b.n	8006078 <__sinit+0xc>
 80060d2:	bf00      	nop
 80060d4:	080066dc 	.word	0x080066dc
 80060d8:	08006005 	.word	0x08006005

080060dc <__sfp>:
 80060dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060de:	4607      	mov	r7, r0
 80060e0:	f7ff ffac 	bl	800603c <__sfp_lock_acquire>
 80060e4:	4b1e      	ldr	r3, [pc, #120]	; (8006160 <__sfp+0x84>)
 80060e6:	681e      	ldr	r6, [r3, #0]
 80060e8:	69b3      	ldr	r3, [r6, #24]
 80060ea:	b913      	cbnz	r3, 80060f2 <__sfp+0x16>
 80060ec:	4630      	mov	r0, r6
 80060ee:	f7ff ffbd 	bl	800606c <__sinit>
 80060f2:	3648      	adds	r6, #72	; 0x48
 80060f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80060f8:	3b01      	subs	r3, #1
 80060fa:	d503      	bpl.n	8006104 <__sfp+0x28>
 80060fc:	6833      	ldr	r3, [r6, #0]
 80060fe:	b30b      	cbz	r3, 8006144 <__sfp+0x68>
 8006100:	6836      	ldr	r6, [r6, #0]
 8006102:	e7f7      	b.n	80060f4 <__sfp+0x18>
 8006104:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006108:	b9d5      	cbnz	r5, 8006140 <__sfp+0x64>
 800610a:	4b16      	ldr	r3, [pc, #88]	; (8006164 <__sfp+0x88>)
 800610c:	60e3      	str	r3, [r4, #12]
 800610e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006112:	6665      	str	r5, [r4, #100]	; 0x64
 8006114:	f000 f847 	bl	80061a6 <__retarget_lock_init_recursive>
 8006118:	f7ff ff96 	bl	8006048 <__sfp_lock_release>
 800611c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006120:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006124:	6025      	str	r5, [r4, #0]
 8006126:	61a5      	str	r5, [r4, #24]
 8006128:	2208      	movs	r2, #8
 800612a:	4629      	mov	r1, r5
 800612c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006130:	f7ff fd44 	bl	8005bbc <memset>
 8006134:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006138:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800613c:	4620      	mov	r0, r4
 800613e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006140:	3468      	adds	r4, #104	; 0x68
 8006142:	e7d9      	b.n	80060f8 <__sfp+0x1c>
 8006144:	2104      	movs	r1, #4
 8006146:	4638      	mov	r0, r7
 8006148:	f7ff ff62 	bl	8006010 <__sfmoreglue>
 800614c:	4604      	mov	r4, r0
 800614e:	6030      	str	r0, [r6, #0]
 8006150:	2800      	cmp	r0, #0
 8006152:	d1d5      	bne.n	8006100 <__sfp+0x24>
 8006154:	f7ff ff78 	bl	8006048 <__sfp_lock_release>
 8006158:	230c      	movs	r3, #12
 800615a:	603b      	str	r3, [r7, #0]
 800615c:	e7ee      	b.n	800613c <__sfp+0x60>
 800615e:	bf00      	nop
 8006160:	080066dc 	.word	0x080066dc
 8006164:	ffff0001 	.word	0xffff0001

08006168 <_fwalk_reent>:
 8006168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800616c:	4606      	mov	r6, r0
 800616e:	4688      	mov	r8, r1
 8006170:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006174:	2700      	movs	r7, #0
 8006176:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800617a:	f1b9 0901 	subs.w	r9, r9, #1
 800617e:	d505      	bpl.n	800618c <_fwalk_reent+0x24>
 8006180:	6824      	ldr	r4, [r4, #0]
 8006182:	2c00      	cmp	r4, #0
 8006184:	d1f7      	bne.n	8006176 <_fwalk_reent+0xe>
 8006186:	4638      	mov	r0, r7
 8006188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800618c:	89ab      	ldrh	r3, [r5, #12]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d907      	bls.n	80061a2 <_fwalk_reent+0x3a>
 8006192:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006196:	3301      	adds	r3, #1
 8006198:	d003      	beq.n	80061a2 <_fwalk_reent+0x3a>
 800619a:	4629      	mov	r1, r5
 800619c:	4630      	mov	r0, r6
 800619e:	47c0      	blx	r8
 80061a0:	4307      	orrs	r7, r0
 80061a2:	3568      	adds	r5, #104	; 0x68
 80061a4:	e7e9      	b.n	800617a <_fwalk_reent+0x12>

080061a6 <__retarget_lock_init_recursive>:
 80061a6:	4770      	bx	lr

080061a8 <__retarget_lock_acquire_recursive>:
 80061a8:	4770      	bx	lr

080061aa <__retarget_lock_release_recursive>:
 80061aa:	4770      	bx	lr

080061ac <__swhatbuf_r>:
 80061ac:	b570      	push	{r4, r5, r6, lr}
 80061ae:	460e      	mov	r6, r1
 80061b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061b4:	2900      	cmp	r1, #0
 80061b6:	b096      	sub	sp, #88	; 0x58
 80061b8:	4614      	mov	r4, r2
 80061ba:	461d      	mov	r5, r3
 80061bc:	da07      	bge.n	80061ce <__swhatbuf_r+0x22>
 80061be:	2300      	movs	r3, #0
 80061c0:	602b      	str	r3, [r5, #0]
 80061c2:	89b3      	ldrh	r3, [r6, #12]
 80061c4:	061a      	lsls	r2, r3, #24
 80061c6:	d410      	bmi.n	80061ea <__swhatbuf_r+0x3e>
 80061c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061cc:	e00e      	b.n	80061ec <__swhatbuf_r+0x40>
 80061ce:	466a      	mov	r2, sp
 80061d0:	f000 f95e 	bl	8006490 <_fstat_r>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	dbf2      	blt.n	80061be <__swhatbuf_r+0x12>
 80061d8:	9a01      	ldr	r2, [sp, #4]
 80061da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80061de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80061e2:	425a      	negs	r2, r3
 80061e4:	415a      	adcs	r2, r3
 80061e6:	602a      	str	r2, [r5, #0]
 80061e8:	e7ee      	b.n	80061c8 <__swhatbuf_r+0x1c>
 80061ea:	2340      	movs	r3, #64	; 0x40
 80061ec:	2000      	movs	r0, #0
 80061ee:	6023      	str	r3, [r4, #0]
 80061f0:	b016      	add	sp, #88	; 0x58
 80061f2:	bd70      	pop	{r4, r5, r6, pc}

080061f4 <__smakebuf_r>:
 80061f4:	898b      	ldrh	r3, [r1, #12]
 80061f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061f8:	079d      	lsls	r5, r3, #30
 80061fa:	4606      	mov	r6, r0
 80061fc:	460c      	mov	r4, r1
 80061fe:	d507      	bpl.n	8006210 <__smakebuf_r+0x1c>
 8006200:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006204:	6023      	str	r3, [r4, #0]
 8006206:	6123      	str	r3, [r4, #16]
 8006208:	2301      	movs	r3, #1
 800620a:	6163      	str	r3, [r4, #20]
 800620c:	b002      	add	sp, #8
 800620e:	bd70      	pop	{r4, r5, r6, pc}
 8006210:	ab01      	add	r3, sp, #4
 8006212:	466a      	mov	r2, sp
 8006214:	f7ff ffca 	bl	80061ac <__swhatbuf_r>
 8006218:	9900      	ldr	r1, [sp, #0]
 800621a:	4605      	mov	r5, r0
 800621c:	4630      	mov	r0, r6
 800621e:	f000 f879 	bl	8006314 <_malloc_r>
 8006222:	b948      	cbnz	r0, 8006238 <__smakebuf_r+0x44>
 8006224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006228:	059a      	lsls	r2, r3, #22
 800622a:	d4ef      	bmi.n	800620c <__smakebuf_r+0x18>
 800622c:	f023 0303 	bic.w	r3, r3, #3
 8006230:	f043 0302 	orr.w	r3, r3, #2
 8006234:	81a3      	strh	r3, [r4, #12]
 8006236:	e7e3      	b.n	8006200 <__smakebuf_r+0xc>
 8006238:	4b0d      	ldr	r3, [pc, #52]	; (8006270 <__smakebuf_r+0x7c>)
 800623a:	62b3      	str	r3, [r6, #40]	; 0x28
 800623c:	89a3      	ldrh	r3, [r4, #12]
 800623e:	6020      	str	r0, [r4, #0]
 8006240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006244:	81a3      	strh	r3, [r4, #12]
 8006246:	9b00      	ldr	r3, [sp, #0]
 8006248:	6163      	str	r3, [r4, #20]
 800624a:	9b01      	ldr	r3, [sp, #4]
 800624c:	6120      	str	r0, [r4, #16]
 800624e:	b15b      	cbz	r3, 8006268 <__smakebuf_r+0x74>
 8006250:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006254:	4630      	mov	r0, r6
 8006256:	f000 f92d 	bl	80064b4 <_isatty_r>
 800625a:	b128      	cbz	r0, 8006268 <__smakebuf_r+0x74>
 800625c:	89a3      	ldrh	r3, [r4, #12]
 800625e:	f023 0303 	bic.w	r3, r3, #3
 8006262:	f043 0301 	orr.w	r3, r3, #1
 8006266:	81a3      	strh	r3, [r4, #12]
 8006268:	89a0      	ldrh	r0, [r4, #12]
 800626a:	4305      	orrs	r5, r0
 800626c:	81a5      	strh	r5, [r4, #12]
 800626e:	e7cd      	b.n	800620c <__smakebuf_r+0x18>
 8006270:	08006005 	.word	0x08006005

08006274 <_free_r>:
 8006274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006276:	2900      	cmp	r1, #0
 8006278:	d048      	beq.n	800630c <_free_r+0x98>
 800627a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800627e:	9001      	str	r0, [sp, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	f1a1 0404 	sub.w	r4, r1, #4
 8006286:	bfb8      	it	lt
 8006288:	18e4      	addlt	r4, r4, r3
 800628a:	f000 f935 	bl	80064f8 <__malloc_lock>
 800628e:	4a20      	ldr	r2, [pc, #128]	; (8006310 <_free_r+0x9c>)
 8006290:	9801      	ldr	r0, [sp, #4]
 8006292:	6813      	ldr	r3, [r2, #0]
 8006294:	4615      	mov	r5, r2
 8006296:	b933      	cbnz	r3, 80062a6 <_free_r+0x32>
 8006298:	6063      	str	r3, [r4, #4]
 800629a:	6014      	str	r4, [r2, #0]
 800629c:	b003      	add	sp, #12
 800629e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062a2:	f000 b92f 	b.w	8006504 <__malloc_unlock>
 80062a6:	42a3      	cmp	r3, r4
 80062a8:	d90b      	bls.n	80062c2 <_free_r+0x4e>
 80062aa:	6821      	ldr	r1, [r4, #0]
 80062ac:	1862      	adds	r2, r4, r1
 80062ae:	4293      	cmp	r3, r2
 80062b0:	bf04      	itt	eq
 80062b2:	681a      	ldreq	r2, [r3, #0]
 80062b4:	685b      	ldreq	r3, [r3, #4]
 80062b6:	6063      	str	r3, [r4, #4]
 80062b8:	bf04      	itt	eq
 80062ba:	1852      	addeq	r2, r2, r1
 80062bc:	6022      	streq	r2, [r4, #0]
 80062be:	602c      	str	r4, [r5, #0]
 80062c0:	e7ec      	b.n	800629c <_free_r+0x28>
 80062c2:	461a      	mov	r2, r3
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	b10b      	cbz	r3, 80062cc <_free_r+0x58>
 80062c8:	42a3      	cmp	r3, r4
 80062ca:	d9fa      	bls.n	80062c2 <_free_r+0x4e>
 80062cc:	6811      	ldr	r1, [r2, #0]
 80062ce:	1855      	adds	r5, r2, r1
 80062d0:	42a5      	cmp	r5, r4
 80062d2:	d10b      	bne.n	80062ec <_free_r+0x78>
 80062d4:	6824      	ldr	r4, [r4, #0]
 80062d6:	4421      	add	r1, r4
 80062d8:	1854      	adds	r4, r2, r1
 80062da:	42a3      	cmp	r3, r4
 80062dc:	6011      	str	r1, [r2, #0]
 80062de:	d1dd      	bne.n	800629c <_free_r+0x28>
 80062e0:	681c      	ldr	r4, [r3, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	6053      	str	r3, [r2, #4]
 80062e6:	4421      	add	r1, r4
 80062e8:	6011      	str	r1, [r2, #0]
 80062ea:	e7d7      	b.n	800629c <_free_r+0x28>
 80062ec:	d902      	bls.n	80062f4 <_free_r+0x80>
 80062ee:	230c      	movs	r3, #12
 80062f0:	6003      	str	r3, [r0, #0]
 80062f2:	e7d3      	b.n	800629c <_free_r+0x28>
 80062f4:	6825      	ldr	r5, [r4, #0]
 80062f6:	1961      	adds	r1, r4, r5
 80062f8:	428b      	cmp	r3, r1
 80062fa:	bf04      	itt	eq
 80062fc:	6819      	ldreq	r1, [r3, #0]
 80062fe:	685b      	ldreq	r3, [r3, #4]
 8006300:	6063      	str	r3, [r4, #4]
 8006302:	bf04      	itt	eq
 8006304:	1949      	addeq	r1, r1, r5
 8006306:	6021      	streq	r1, [r4, #0]
 8006308:	6054      	str	r4, [r2, #4]
 800630a:	e7c7      	b.n	800629c <_free_r+0x28>
 800630c:	b003      	add	sp, #12
 800630e:	bd30      	pop	{r4, r5, pc}
 8006310:	200143cc 	.word	0x200143cc

08006314 <_malloc_r>:
 8006314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006316:	1ccd      	adds	r5, r1, #3
 8006318:	f025 0503 	bic.w	r5, r5, #3
 800631c:	3508      	adds	r5, #8
 800631e:	2d0c      	cmp	r5, #12
 8006320:	bf38      	it	cc
 8006322:	250c      	movcc	r5, #12
 8006324:	2d00      	cmp	r5, #0
 8006326:	4606      	mov	r6, r0
 8006328:	db01      	blt.n	800632e <_malloc_r+0x1a>
 800632a:	42a9      	cmp	r1, r5
 800632c:	d903      	bls.n	8006336 <_malloc_r+0x22>
 800632e:	230c      	movs	r3, #12
 8006330:	6033      	str	r3, [r6, #0]
 8006332:	2000      	movs	r0, #0
 8006334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006336:	f000 f8df 	bl	80064f8 <__malloc_lock>
 800633a:	4921      	ldr	r1, [pc, #132]	; (80063c0 <_malloc_r+0xac>)
 800633c:	680a      	ldr	r2, [r1, #0]
 800633e:	4614      	mov	r4, r2
 8006340:	b99c      	cbnz	r4, 800636a <_malloc_r+0x56>
 8006342:	4f20      	ldr	r7, [pc, #128]	; (80063c4 <_malloc_r+0xb0>)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	b923      	cbnz	r3, 8006352 <_malloc_r+0x3e>
 8006348:	4621      	mov	r1, r4
 800634a:	4630      	mov	r0, r6
 800634c:	f000 f83c 	bl	80063c8 <_sbrk_r>
 8006350:	6038      	str	r0, [r7, #0]
 8006352:	4629      	mov	r1, r5
 8006354:	4630      	mov	r0, r6
 8006356:	f000 f837 	bl	80063c8 <_sbrk_r>
 800635a:	1c43      	adds	r3, r0, #1
 800635c:	d123      	bne.n	80063a6 <_malloc_r+0x92>
 800635e:	230c      	movs	r3, #12
 8006360:	6033      	str	r3, [r6, #0]
 8006362:	4630      	mov	r0, r6
 8006364:	f000 f8ce 	bl	8006504 <__malloc_unlock>
 8006368:	e7e3      	b.n	8006332 <_malloc_r+0x1e>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	1b5b      	subs	r3, r3, r5
 800636e:	d417      	bmi.n	80063a0 <_malloc_r+0x8c>
 8006370:	2b0b      	cmp	r3, #11
 8006372:	d903      	bls.n	800637c <_malloc_r+0x68>
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	441c      	add	r4, r3
 8006378:	6025      	str	r5, [r4, #0]
 800637a:	e004      	b.n	8006386 <_malloc_r+0x72>
 800637c:	6863      	ldr	r3, [r4, #4]
 800637e:	42a2      	cmp	r2, r4
 8006380:	bf0c      	ite	eq
 8006382:	600b      	streq	r3, [r1, #0]
 8006384:	6053      	strne	r3, [r2, #4]
 8006386:	4630      	mov	r0, r6
 8006388:	f000 f8bc 	bl	8006504 <__malloc_unlock>
 800638c:	f104 000b 	add.w	r0, r4, #11
 8006390:	1d23      	adds	r3, r4, #4
 8006392:	f020 0007 	bic.w	r0, r0, #7
 8006396:	1ac2      	subs	r2, r0, r3
 8006398:	d0cc      	beq.n	8006334 <_malloc_r+0x20>
 800639a:	1a1b      	subs	r3, r3, r0
 800639c:	50a3      	str	r3, [r4, r2]
 800639e:	e7c9      	b.n	8006334 <_malloc_r+0x20>
 80063a0:	4622      	mov	r2, r4
 80063a2:	6864      	ldr	r4, [r4, #4]
 80063a4:	e7cc      	b.n	8006340 <_malloc_r+0x2c>
 80063a6:	1cc4      	adds	r4, r0, #3
 80063a8:	f024 0403 	bic.w	r4, r4, #3
 80063ac:	42a0      	cmp	r0, r4
 80063ae:	d0e3      	beq.n	8006378 <_malloc_r+0x64>
 80063b0:	1a21      	subs	r1, r4, r0
 80063b2:	4630      	mov	r0, r6
 80063b4:	f000 f808 	bl	80063c8 <_sbrk_r>
 80063b8:	3001      	adds	r0, #1
 80063ba:	d1dd      	bne.n	8006378 <_malloc_r+0x64>
 80063bc:	e7cf      	b.n	800635e <_malloc_r+0x4a>
 80063be:	bf00      	nop
 80063c0:	200143cc 	.word	0x200143cc
 80063c4:	200143d0 	.word	0x200143d0

080063c8 <_sbrk_r>:
 80063c8:	b538      	push	{r3, r4, r5, lr}
 80063ca:	4d06      	ldr	r5, [pc, #24]	; (80063e4 <_sbrk_r+0x1c>)
 80063cc:	2300      	movs	r3, #0
 80063ce:	4604      	mov	r4, r0
 80063d0:	4608      	mov	r0, r1
 80063d2:	602b      	str	r3, [r5, #0]
 80063d4:	f000 f8ae 	bl	8006534 <_sbrk>
 80063d8:	1c43      	adds	r3, r0, #1
 80063da:	d102      	bne.n	80063e2 <_sbrk_r+0x1a>
 80063dc:	682b      	ldr	r3, [r5, #0]
 80063de:	b103      	cbz	r3, 80063e2 <_sbrk_r+0x1a>
 80063e0:	6023      	str	r3, [r4, #0]
 80063e2:	bd38      	pop	{r3, r4, r5, pc}
 80063e4:	200144d0 	.word	0x200144d0

080063e8 <__sread>:
 80063e8:	b510      	push	{r4, lr}
 80063ea:	460c      	mov	r4, r1
 80063ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f0:	f000 f88e 	bl	8006510 <_read_r>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	bfab      	itete	ge
 80063f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063fa:	89a3      	ldrhlt	r3, [r4, #12]
 80063fc:	181b      	addge	r3, r3, r0
 80063fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006402:	bfac      	ite	ge
 8006404:	6563      	strge	r3, [r4, #84]	; 0x54
 8006406:	81a3      	strhlt	r3, [r4, #12]
 8006408:	bd10      	pop	{r4, pc}

0800640a <__swrite>:
 800640a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800640e:	461f      	mov	r7, r3
 8006410:	898b      	ldrh	r3, [r1, #12]
 8006412:	05db      	lsls	r3, r3, #23
 8006414:	4605      	mov	r5, r0
 8006416:	460c      	mov	r4, r1
 8006418:	4616      	mov	r6, r2
 800641a:	d505      	bpl.n	8006428 <__swrite+0x1e>
 800641c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006420:	2302      	movs	r3, #2
 8006422:	2200      	movs	r2, #0
 8006424:	f000 f856 	bl	80064d4 <_lseek_r>
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800642e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006432:	81a3      	strh	r3, [r4, #12]
 8006434:	4632      	mov	r2, r6
 8006436:	463b      	mov	r3, r7
 8006438:	4628      	mov	r0, r5
 800643a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800643e:	f7ff bb6b 	b.w	8005b18 <_write_r>

08006442 <__sseek>:
 8006442:	b510      	push	{r4, lr}
 8006444:	460c      	mov	r4, r1
 8006446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800644a:	f000 f843 	bl	80064d4 <_lseek_r>
 800644e:	1c43      	adds	r3, r0, #1
 8006450:	89a3      	ldrh	r3, [r4, #12]
 8006452:	bf15      	itete	ne
 8006454:	6560      	strne	r0, [r4, #84]	; 0x54
 8006456:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800645a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800645e:	81a3      	strheq	r3, [r4, #12]
 8006460:	bf18      	it	ne
 8006462:	81a3      	strhne	r3, [r4, #12]
 8006464:	bd10      	pop	{r4, pc}

08006466 <__sclose>:
 8006466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800646a:	f000 b801 	b.w	8006470 <_close_r>
	...

08006470 <_close_r>:
 8006470:	b538      	push	{r3, r4, r5, lr}
 8006472:	4d06      	ldr	r5, [pc, #24]	; (800648c <_close_r+0x1c>)
 8006474:	2300      	movs	r3, #0
 8006476:	4604      	mov	r4, r0
 8006478:	4608      	mov	r0, r1
 800647a:	602b      	str	r3, [r5, #0]
 800647c:	f7fa f881 	bl	8000582 <_close>
 8006480:	1c43      	adds	r3, r0, #1
 8006482:	d102      	bne.n	800648a <_close_r+0x1a>
 8006484:	682b      	ldr	r3, [r5, #0]
 8006486:	b103      	cbz	r3, 800648a <_close_r+0x1a>
 8006488:	6023      	str	r3, [r4, #0]
 800648a:	bd38      	pop	{r3, r4, r5, pc}
 800648c:	200144d0 	.word	0x200144d0

08006490 <_fstat_r>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	4d07      	ldr	r5, [pc, #28]	; (80064b0 <_fstat_r+0x20>)
 8006494:	2300      	movs	r3, #0
 8006496:	4604      	mov	r4, r0
 8006498:	4608      	mov	r0, r1
 800649a:	4611      	mov	r1, r2
 800649c:	602b      	str	r3, [r5, #0]
 800649e:	f7fa f87c 	bl	800059a <_fstat>
 80064a2:	1c43      	adds	r3, r0, #1
 80064a4:	d102      	bne.n	80064ac <_fstat_r+0x1c>
 80064a6:	682b      	ldr	r3, [r5, #0]
 80064a8:	b103      	cbz	r3, 80064ac <_fstat_r+0x1c>
 80064aa:	6023      	str	r3, [r4, #0]
 80064ac:	bd38      	pop	{r3, r4, r5, pc}
 80064ae:	bf00      	nop
 80064b0:	200144d0 	.word	0x200144d0

080064b4 <_isatty_r>:
 80064b4:	b538      	push	{r3, r4, r5, lr}
 80064b6:	4d06      	ldr	r5, [pc, #24]	; (80064d0 <_isatty_r+0x1c>)
 80064b8:	2300      	movs	r3, #0
 80064ba:	4604      	mov	r4, r0
 80064bc:	4608      	mov	r0, r1
 80064be:	602b      	str	r3, [r5, #0]
 80064c0:	f7fa f87b 	bl	80005ba <_isatty>
 80064c4:	1c43      	adds	r3, r0, #1
 80064c6:	d102      	bne.n	80064ce <_isatty_r+0x1a>
 80064c8:	682b      	ldr	r3, [r5, #0]
 80064ca:	b103      	cbz	r3, 80064ce <_isatty_r+0x1a>
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	bd38      	pop	{r3, r4, r5, pc}
 80064d0:	200144d0 	.word	0x200144d0

080064d4 <_lseek_r>:
 80064d4:	b538      	push	{r3, r4, r5, lr}
 80064d6:	4d07      	ldr	r5, [pc, #28]	; (80064f4 <_lseek_r+0x20>)
 80064d8:	4604      	mov	r4, r0
 80064da:	4608      	mov	r0, r1
 80064dc:	4611      	mov	r1, r2
 80064de:	2200      	movs	r2, #0
 80064e0:	602a      	str	r2, [r5, #0]
 80064e2:	461a      	mov	r2, r3
 80064e4:	f7fa f874 	bl	80005d0 <_lseek>
 80064e8:	1c43      	adds	r3, r0, #1
 80064ea:	d102      	bne.n	80064f2 <_lseek_r+0x1e>
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	b103      	cbz	r3, 80064f2 <_lseek_r+0x1e>
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	bd38      	pop	{r3, r4, r5, pc}
 80064f4:	200144d0 	.word	0x200144d0

080064f8 <__malloc_lock>:
 80064f8:	4801      	ldr	r0, [pc, #4]	; (8006500 <__malloc_lock+0x8>)
 80064fa:	f7ff be55 	b.w	80061a8 <__retarget_lock_acquire_recursive>
 80064fe:	bf00      	nop
 8006500:	200144c8 	.word	0x200144c8

08006504 <__malloc_unlock>:
 8006504:	4801      	ldr	r0, [pc, #4]	; (800650c <__malloc_unlock+0x8>)
 8006506:	f7ff be50 	b.w	80061aa <__retarget_lock_release_recursive>
 800650a:	bf00      	nop
 800650c:	200144c8 	.word	0x200144c8

08006510 <_read_r>:
 8006510:	b538      	push	{r3, r4, r5, lr}
 8006512:	4d07      	ldr	r5, [pc, #28]	; (8006530 <_read_r+0x20>)
 8006514:	4604      	mov	r4, r0
 8006516:	4608      	mov	r0, r1
 8006518:	4611      	mov	r1, r2
 800651a:	2200      	movs	r2, #0
 800651c:	602a      	str	r2, [r5, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	f7fa f812 	bl	8000548 <_read>
 8006524:	1c43      	adds	r3, r0, #1
 8006526:	d102      	bne.n	800652e <_read_r+0x1e>
 8006528:	682b      	ldr	r3, [r5, #0]
 800652a:	b103      	cbz	r3, 800652e <_read_r+0x1e>
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	bd38      	pop	{r3, r4, r5, pc}
 8006530:	200144d0 	.word	0x200144d0

08006534 <_sbrk>:
 8006534:	4b04      	ldr	r3, [pc, #16]	; (8006548 <_sbrk+0x14>)
 8006536:	6819      	ldr	r1, [r3, #0]
 8006538:	4602      	mov	r2, r0
 800653a:	b909      	cbnz	r1, 8006540 <_sbrk+0xc>
 800653c:	4903      	ldr	r1, [pc, #12]	; (800654c <_sbrk+0x18>)
 800653e:	6019      	str	r1, [r3, #0]
 8006540:	6818      	ldr	r0, [r3, #0]
 8006542:	4402      	add	r2, r0
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	4770      	bx	lr
 8006548:	200143d4 	.word	0x200143d4
 800654c:	200144d8 	.word	0x200144d8

08006550 <_init>:
 8006550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006552:	bf00      	nop
 8006554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006556:	bc08      	pop	{r3}
 8006558:	469e      	mov	lr, r3
 800655a:	4770      	bx	lr

0800655c <_fini>:
 800655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655e:	bf00      	nop
 8006560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006562:	bc08      	pop	{r3}
 8006564:	469e      	mov	lr, r3
 8006566:	4770      	bx	lr
